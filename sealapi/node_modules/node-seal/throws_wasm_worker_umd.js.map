{"version":3,"file":"throws_wasm_worker_umd.js","sources":["../src/bin/seal_throws_wasm_worker.js","../src/implementation/seal.ts","../src/implementation/constants.ts","../src/implementation/batch-encoder.ts","../src/implementation/cipher-text.ts","../src/implementation/ckks-encoder.ts","../src/implementation/coeff-modulus.ts","../src/implementation/compr-mode-type.ts","../src/implementation/context-data.ts","../src/implementation/context.ts","../src/implementation/decryptor.ts","../src/implementation/encryption-parameters.ts","../src/implementation/encryptor.ts","../src/implementation/evaluator.ts","../src/implementation/exception.ts","../src/implementation/galois-keys.ts","../src/implementation/key-generator.ts","../src/implementation/memory-pool-handle.ts","../src/implementation/modulus.ts","../src/implementation/parms-id-type.ts","../src/implementation/plain-text.ts","../src/implementation/plain-modulus.ts","../src/implementation/public-key.ts","../src/implementation/relin-keys.ts","../src/implementation/scheme-type.ts","../src/implementation/secret-key.ts","../src/implementation/security-level.ts","../src/implementation/vector.ts","../src/throws_wasm_worker_umd.ts","../src/main/loader.ts","../src/main/seal.ts","../src/implementation/encryption-parameter-qualifiers.ts","../src/implementation/serializable.ts"],"sourcesContent":["\nvar Module = (() => {\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n  \n  return (\nfunction(Module) {\n  Module = Module || {};\n\n\nvar h;h||(h=typeof Module !== 'undefined' ? Module : {});var aa,ba;h.ready=new Promise(function(a,b){aa=a;ba=b});var ca=Object.assign({},h),da=\"./this.program\",fa=(a,b)=>{throw b;},t=\"\",ha;t=self.location.href;_scriptDir&&(t=_scriptDir);0!==t.indexOf(\"blob:\")?t=t.substr(0,t.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):t=\"\";\nha=a=>{try{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.responseType=\"arraybuffer\";b.send(null);return new Uint8Array(b.response)}catch(c){if(a=ia(a))return a;throw c;}};var w=h.printErr||console.warn.bind(console);Object.assign(h,ca);ca=null;h.thisProgram&&(da=h.thisProgram);h.quit&&(fa=h.quit);var x;h.wasmBinary&&(x=h.wasmBinary);var noExitRuntime=h.noExitRuntime||!0;\"object\"!=typeof WebAssembly&&z(\"no native wasm support detected\");\nvar ja,ka=!1,la=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;\nfunction ma(a,b){a>>>=0;if(a){var c=A;a>>>=0;var d=a+b;for(b=a;c[b>>>0]&&!(b>=d);)++b;if(16<b-a&&c.subarray&&la)c=la.decode(c.subarray(a>>>0,b>>>0));else{for(d=\"\";a<b;){var e=c[a++>>>0];if(e&128){var f=c[a++>>>0]&63;if(192==(e&224))d+=String.fromCharCode((e&31)<<6|f);else{var l=c[a++>>>0]&63;e=224==(e&240)?(e&15)<<12|f<<6|l:(e&7)<<18|f<<12|l<<6|c[a++>>>0]&63;65536>e?d+=String.fromCharCode(e):(e-=65536,d+=String.fromCharCode(55296|e>>10,56320|e&1023))}}else d+=String.fromCharCode(e)}c=d}}else c=\"\";\nreturn c}function na(a,b,c,d){c>>>=0;if(0<d){d=c+d-1;for(var e=0;e<a.length;++e){var f=a.charCodeAt(e);if(55296<=f&&57343>=f){var l=a.charCodeAt(++e);f=65536+((f&1023)<<10)|l&1023}if(127>=f){if(c>=d)break;b[c++>>>0]=f}else{if(2047>=f){if(c+1>=d)break;b[c++>>>0]=192|f>>6}else{if(65535>=f){if(c+2>=d)break;b[c++>>>0]=224|f>>12}else{if(c+3>=d)break;b[c++>>>0]=240|f>>18;b[c++>>>0]=128|f>>12&63}b[c++>>>0]=128|f>>6&63}b[c++>>>0]=128|f&63}}b[c>>>0]=0}}\nfunction oa(a){for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);55296<=d&&57343>=d&&(d=65536+((d&1023)<<10)|a.charCodeAt(++c)&1023);127>=d?++b:b=2047>=d?b+2:65535>=d?b+3:b+4}return b}var pa=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf-16le\"):void 0;function qa(a,b){var c=a>>1;for(var d=c+b/2;!(c>=d)&&B[c>>>0];)++c;c<<=1;if(32<c-a&&pa)return pa.decode(A.subarray(a>>>0,c>>>0));c=\"\";for(d=0;!(d>=b/2);++d){var e=C[a+2*d>>1>>>0];if(0==e)break;c+=String.fromCharCode(e)}return c}\nfunction ra(a,b,c){void 0===c&&(c=2147483647);if(2>c)return 0;c-=2;var d=b;c=c<2*a.length?c/2:a.length;for(var e=0;e<c;++e)C[b>>1>>>0]=a.charCodeAt(e),b+=2;C[b>>1>>>0]=0;return b-d}function sa(a){return 2*a.length}function ta(a,b){for(var c=0,d=\"\";!(c>=b/4);){var e=D[a+4*c>>2>>>0];if(0==e)break;++c;65536<=e?(e-=65536,d+=String.fromCharCode(55296|e>>10,56320|e&1023)):d+=String.fromCharCode(e)}return d}\nfunction ua(a,b,c){b>>>=0;void 0===c&&(c=2147483647);if(4>c)return 0;var d=b;c=d+c-4;for(var e=0;e<a.length;++e){var f=a.charCodeAt(e);if(55296<=f&&57343>=f){var l=a.charCodeAt(++e);f=65536+((f&1023)<<10)|l&1023}D[b>>2>>>0]=f;b+=4;if(b+4>c)break}D[b>>2>>>0]=0;return b-d}function va(a){for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);55296<=d&&57343>=d&&++c;b+=4}return b}var wa,E,A,C,B,D,F,xa,ya;\nfunction za(){var a=ja.buffer;wa=a;h.HEAP8=E=new Int8Array(a);h.HEAP16=C=new Int16Array(a);h.HEAP32=D=new Int32Array(a);h.HEAPU8=A=new Uint8Array(a);h.HEAPU16=B=new Uint16Array(a);h.HEAPU32=F=new Uint32Array(a);h.HEAPF32=xa=new Float32Array(a);h.HEAPF64=ya=new Float64Array(a)}var Aa,Ba=[],Ca=[],Da=[],Ea=[];function Fa(){var a=h.preRun.shift();Ba.unshift(a)}var G=0,Ga=null,I=null;h.preloadedImages={};h.preloadedAudios={};\nfunction z(a){if(h.onAbort)h.onAbort(a);a=\"Aborted(\"+a+\")\";w(a);ka=!0;a=new WebAssembly.RuntimeError(a+\". Build with -s ASSERTIONS=1 for more info.\");ba(a);throw a;}var Ha=\"data:application/octet-stream;base64,\",J;J=\"data:application/octet-stream;base64,\";if(!J.startsWith(Ha)){var Ia=J;J=h.locateFile?h.locateFile(Ia,t):t+Ia}function Ja(){var a=J;try{if(a==J&&x)return new Uint8Array(x);var b=ia(a);if(b)return b;if(ha)return ha(a);throw\"both async and sync fetching of the wasm failed\";}catch(c){z(c)}}\nfunction Ka(){return x||\"function\"!=typeof fetch?Promise.resolve().then(function(){return Ja()}):fetch(J,{credentials:\"same-origin\"}).then(function(a){if(!a.ok)throw\"failed to load wasm binary file at '\"+J+\"'\";return a.arrayBuffer()}).catch(function(){return Ja()})}function La(a){for(;0<a.length;){var b=a.shift();if(\"function\"==typeof b)b(h);else{var c=b.$a;\"number\"==typeof c?void 0===b.za?Ma(c)():Ma(c)(b.za):c(void 0===b.za?null:b.za)}}}var Na=[];\nfunction Ma(a){var b=Na[a];b||(a>=Na.length&&(Na.length=a+1),Na[a]=b=Aa.get(a));return b}function Oa(a){this.da=a-16;this.Ma=function(b){D[this.da+4>>2>>>0]=b};this.Ia=function(b){D[this.da+8>>2>>>0]=b};this.Ka=function(){D[this.da>>2>>>0]=0};this.Ga=function(){E[this.da+12>>0>>>0]=0};this.La=function(){E[this.da+13>>0>>>0]=0};this.Fa=function(b,c){this.Ma(b);this.Ia(c);this.Ka();this.Ga();this.La()}}var Pa=0;\nfunction Qa(a){switch(a){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(\"Unknown type size: \"+a);}}var Ra=void 0;function K(a){for(var b=\"\";A[a>>>0];)b+=Ra[A[a++>>>0]];return b}var L={},M={},Sa={};function Ta(a){if(void 0===a)return\"_unknown\";a=a.replace(/[^a-zA-Z0-9_]/g,\"$\");var b=a.charCodeAt(0);return 48<=b&&57>=b?\"_\"+a:a}\nfunction Ua(a,b){a=Ta(a);return(new Function(\"body\",\"return function \"+a+'() {\\n    \"use strict\";    return body.apply(this, arguments);\\n};\\n'))(b)}function Va(a){var b=Error,c=Ua(a,function(d){this.name=a;this.message=d;d=Error(d).stack;void 0!==d&&(this.stack=this.toString()+\"\\n\"+d.replace(/^Error(:[^\\n]*)?\\n/,\"\"))});c.prototype=Object.create(b.prototype);c.prototype.constructor=c;c.prototype.toString=function(){return void 0===this.message?this.name:this.name+\": \"+this.message};return c}\nvar O=void 0;function P(a){throw new O(a);}var Wa=void 0;function Xa(a){throw new Wa(a);}function Q(a,b,c){function d(k){k=c(k);k.length!==a.length&&Xa(\"Mismatched type converter count\");for(var m=0;m<a.length;++m)R(a[m],k[m])}a.forEach(function(k){Sa[k]=b});var e=Array(b.length),f=[],l=0;b.forEach(function(k,m){M.hasOwnProperty(k)?e[m]=M[k]:(f.push(k),L.hasOwnProperty(k)||(L[k]=[]),L[k].push(function(){e[m]=M[k];++l;l===f.length&&d(e)}))});0===f.length&&d(e)}\nfunction R(a,b,c={}){if(!(\"argPackAdvance\"in b))throw new TypeError(\"registerType registeredInstance requires argPackAdvance\");var d=b.name;a||P('type \"'+d+'\" must have a positive integer typeid pointer');if(M.hasOwnProperty(a)){if(c.Pa)return;P(\"Cannot register type '\"+d+\"' twice\")}M[a]=b;delete Sa[a];L.hasOwnProperty(a)&&(b=L[a],delete L[a],b.forEach(function(e){e()}))}function Ya(a){P(a.ba.ea.ca.name+\" instance already deleted\")}var Za=!1;function $a(){}\nfunction ab(a){--a.count.value;0===a.count.value&&(a.ga?a.ia.na(a.ga):a.ea.ca.na(a.da))}function bb(a,b,c){if(b===c)return a;if(void 0===c.ja)return null;a=bb(a,b,c.ja);return null===a?null:c.Ja(a)}var cb={},db=[];function eb(){for(;db.length;){var a=db.pop();a.ba.pa=!1;a[\"delete\"]()}}var fb=void 0,gb={};function hb(a,b){for(void 0===b&&P(\"ptr should not be undefined\");a.ja;)b=a.ta(b),a=a.ja;return gb[b]}\nfunction ib(a,b){b.ea&&b.da||Xa(\"makeClassHandle requires ptr and ptrType\");!!b.ia!==!!b.ga&&Xa(\"Both smartPtrType and smartPtr must be specified\");b.count={value:1};return jb(Object.create(a,{ba:{value:b}}))}function jb(a){if(\"undefined\"===typeof FinalizationRegistry)return jb=b=>b,a;Za=new FinalizationRegistry(b=>{ab(b.ba)});jb=b=>{var c=b.ba;c.ga&&Za.register(b,{ba:c},b);return b};$a=b=>{Za.unregister(b)};return jb(a)}function S(){}\nfunction kb(a,b,c){if(void 0===a[b].fa){var d=a[b];a[b]=function(){a[b].fa.hasOwnProperty(arguments.length)||P(\"Function '\"+c+\"' called with an invalid number of arguments (\"+arguments.length+\") - expects one of (\"+a[b].fa+\")!\");return a[b].fa[arguments.length].apply(this,arguments)};a[b].fa=[];a[b].fa[d.oa]=d}}\nfunction lb(a,b,c){h.hasOwnProperty(a)?((void 0===c||void 0!==h[a].fa&&void 0!==h[a].fa[c])&&P(\"Cannot register public name '\"+a+\"' twice\"),kb(h,a,a),h.hasOwnProperty(c)&&P(\"Cannot register multiple overloads of a function with the same number of arguments (\"+c+\")!\"),h[a].fa[c]=b):(h[a]=b,void 0!==c&&(h[a].ab=c))}function mb(a,b,c,d,e,f,l,k){this.name=a;this.constructor=b;this.la=c;this.na=d;this.ja=e;this.Na=f;this.ta=l;this.Ja=k;this.Sa=[]}\nfunction nb(a,b,c){for(;b!==c;)b.ta||P(\"Expected null or instance of \"+c.name+\", got an instance of \"+b.name),a=b.ta(a),b=b.ja;return a}function ob(a,b){if(null===b)return this.Aa&&P(\"null is not a valid \"+this.name),0;b.ba||P('Cannot pass \"'+pb(b)+'\" as a '+this.name);b.ba.da||P(\"Cannot pass deleted object as a pointer of type \"+this.name);return nb(b.ba.da,b.ba.ea.ca,this.ca)}\nfunction qb(a,b){if(null===b){this.Aa&&P(\"null is not a valid \"+this.name);if(this.va){var c=this.Ta();null!==a&&a.push(this.na,c);return c}return 0}b.ba||P('Cannot pass \"'+pb(b)+'\" as a '+this.name);b.ba.da||P(\"Cannot pass deleted object as a pointer of type \"+this.name);!this.ua&&b.ba.ea.ua&&P(\"Cannot convert argument of type \"+(b.ba.ia?b.ba.ia.name:b.ba.ea.name)+\" to parameter type \"+this.name);c=nb(b.ba.da,b.ba.ea.ca,this.ca);if(this.va)switch(void 0===b.ba.ga&&P(\"Passing raw pointer to smart pointer is illegal\"),\nthis.Va){case 0:b.ba.ia===this?c=b.ba.ga:P(\"Cannot convert argument of type \"+(b.ba.ia?b.ba.ia.name:b.ba.ea.name)+\" to parameter type \"+this.name);break;case 1:c=b.ba.ga;break;case 2:if(b.ba.ia===this)c=b.ba.ga;else{var d=b.clone();c=this.Ua(c,T(function(){d[\"delete\"]()}));null!==a&&a.push(this.na,c)}break;default:P(\"Unsupporting sharing policy\")}return c}\nfunction rb(a,b){if(null===b)return this.Aa&&P(\"null is not a valid \"+this.name),0;b.ba||P('Cannot pass \"'+pb(b)+'\" as a '+this.name);b.ba.da||P(\"Cannot pass deleted object as a pointer of type \"+this.name);b.ba.ea.ua&&P(\"Cannot convert argument of type \"+b.ba.ea.name+\" to parameter type \"+this.name);return nb(b.ba.da,b.ba.ea.ca,this.ca)}function sb(a){return this.fromWireType(F[a>>>2])}\nfunction U(a,b,c,d){this.name=a;this.ca=b;this.Aa=c;this.ua=d;this.va=!1;this.na=this.Ua=this.Ta=this.Ea=this.Va=this.Ra=void 0;void 0!==b.ja?this.toWireType=qb:(this.toWireType=d?ob:rb,this.ka=null)}function tb(a,b,c){h.hasOwnProperty(a)||Xa(\"Replacing nonexistant public symbol\");void 0!==h[a].fa&&void 0!==c?h[a].fa[c]=b:(h[a]=b,h[a].oa=c)}\nfunction ub(a,b){var c=[];return function(){c.length=0;Object.assign(c,arguments);if(a.includes(\"j\")){var d=h[\"dynCall_\"+a];d=c&&c.length?d.apply(null,[b].concat(c)):d.call(null,b)}else d=Ma(b).apply(null,c);return d}}function V(a,b){a=K(a);var c=a.includes(\"j\")?ub(a,b):Ma(b);\"function\"!=typeof c&&P(\"unknown function pointer with signature \"+a+\": \"+b);return c}var vb=void 0;function wb(a){a=xb(a);var b=K(a);W(a);return b}\nfunction X(a,b){function c(f){e[f]||M[f]||(Sa[f]?Sa[f].forEach(c):(d.push(f),e[f]=!0))}var d=[],e={};b.forEach(c);throw new vb(a+\": \"+d.map(wb).join([\", \"]));}function yb(a){var b=Function;if(!(b instanceof Function))throw new TypeError(\"new_ called with constructor type \"+typeof b+\" which is not a function\");var c=Ua(b.name||\"unknownFunctionName\",function(){});c.prototype=b.prototype;c=new c;a=b.apply(c,a);return a instanceof Object?a:c}function zb(a){for(;a.length;){var b=a.pop();a.pop()(b)}}\nfunction Ab(a,b,c,d,e){var f=b.length;2>f&&P(\"argTypes array size mismatch! Must at least get return value and 'this' types!\");var l=null!==b[1]&&null!==c,k=!1;for(c=1;c<b.length;++c)if(null!==b[c]&&void 0===b[c].ka){k=!0;break}var m=\"void\"!==b[0].name,p=\"\",n=\"\";for(c=0;c<f-2;++c)p+=(0!==c?\", \":\"\")+\"arg\"+c,n+=(0!==c?\", \":\"\")+\"arg\"+c+\"Wired\";a=\"return function \"+Ta(a)+\"(\"+p+\") {\\nif (arguments.length !== \"+(f-2)+\") {\\nthrowBindingError('function \"+a+\" called with ' + arguments.length + ' arguments, expected \"+\n(f-2)+\" args!');\\n}\\n\";k&&(a+=\"var destructors = [];\\n\");var r=k?\"destructors\":\"null\";p=\"throwBindingError invoker fn runDestructors retType classParam\".split(\" \");d=[P,d,e,zb,b[0],b[1]];l&&(a+=\"var thisWired = classParam.toWireType(\"+r+\", this);\\n\");for(c=0;c<f-2;++c)a+=\"var arg\"+c+\"Wired = argType\"+c+\".toWireType(\"+r+\", arg\"+c+\"); // \"+b[c+2].name+\"\\n\",p.push(\"argType\"+c),d.push(b[c+2]);l&&(n=\"thisWired\"+(0<n.length?\", \":\"\")+n);a+=(m?\"var rv = \":\"\")+\"invoker(fn\"+(0<n.length?\", \":\"\")+n+\");\\n\";if(k)a+=\n\"runDestructors(destructors);\\n\";else for(c=l?1:2;c<b.length;++c)f=1===c?\"thisWired\":\"arg\"+(c-2)+\"Wired\",null!==b[c].ka&&(a+=f+\"_dtor(\"+f+\"); // \"+b[c].name+\"\\n\",p.push(f+\"_dtor\"),d.push(b[c].ka));m&&(a+=\"var ret = retType.fromWireType(rv);\\nreturn ret;\\n\");p.push(a+\"}\\n\");return yb(p).apply(null,d)}function Bb(a,b){for(var c=[],d=0;d<a;d++)c.push(D[(b>>2)+d>>>0]);return c}\nfunction Cb(a,b,c){a instanceof Object||P(c+' with invalid \"this\": '+a);a instanceof b.ca.constructor||P(c+' incompatible with \"this\" of type '+a.constructor.name);a.ba.da||P(\"cannot call emscripten binding method \"+c+\" on deleted object\");return nb(a.ba.da,a.ba.ea.ca,b.ca)}var Db=[],Y=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function Eb(a){4<a&&0===--Y[a].Ba&&(Y[a]=void 0,Db.push(a))}function Z(a){a||P(\"Cannot use deleted val. handle = \"+a);return Y[a].value}\nfunction T(a){switch(a){case void 0:return 1;case null:return 2;case !0:return 3;case !1:return 4;default:var b=Db.length?Db.pop():Y.length;Y[b]={Ba:1,value:a};return b}}function Fb(a,b,c){switch(b){case 0:return function(d){return this.fromWireType((c?E:A)[d>>>0])};case 1:return function(d){return this.fromWireType((c?C:B)[d>>>1])};case 2:return function(d){return this.fromWireType((c?D:F)[d>>>2])};default:throw new TypeError(\"Unknown integer type: \"+a);}}\nfunction Hb(a,b){var c=M[a];void 0===c&&P(b+\" has unknown type \"+wb(a));return c}function pb(a){if(null===a)return\"null\";var b=typeof a;return\"object\"===b||\"array\"===b||\"function\"===b?a.toString():\"\"+a}function Ib(a,b){switch(b){case 2:return function(c){return this.fromWireType(xa[c>>>2])};case 3:return function(c){return this.fromWireType(ya[c>>>3])};default:throw new TypeError(\"Unknown float type: \"+a);}}\nfunction Jb(a,b,c){switch(b){case 0:return c?function(d){return E[d>>>0]}:function(d){return A[d>>>0]};case 1:return c?function(d){return C[d>>>1]}:function(d){return B[d>>>1]};case 2:return c?function(d){return D[d>>>2]}:function(d){return F[d>>>2]};default:throw new TypeError(\"Unknown integer type: \"+a);}}var Kb={};function Lb(a){var b=Kb[a];return void 0===b?K(a):b}var Mb=[];function Nb(a){var b=Mb.length;Mb.push(a);return b}\nfunction Ob(a,b){for(var c=Array(a),d=0;d<a;++d)c[d]=Hb(D[(b>>2)+d>>>0],\"parameter \"+d);return c}var Pb=[],Qb={};function Rb(){if(!Sb){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:da||\"./this.program\"},b;for(b in Qb)void 0===Qb[b]?delete a[b]:a[b]=Qb[b];var c=[];for(b in a)c.push(b+\"=\"+a[b]);Sb=c}return Sb}var Sb;\nfunction Tb(){if(\"object\"==typeof crypto&&\"function\"==typeof crypto.getRandomValues){var a=new Uint8Array(1);return function(){crypto.getRandomValues(a);return a[0]}}return function(){z(\"randomDevice\")}}function Ub(a,b){Ub.Da||(Ub.Da=Tb());for(var c=0;c<b;c++)E[a+c>>0>>>0]=Ub.Da();return 0}function Vb(a){return 0===a%4&&(0!==a%100||0===a%400)}function Wb(a,b){for(var c=0,d=0;d<=b;c+=a[d++]);return c}var Xb=[31,29,31,30,31,30,31,31,30,31,30,31],Yb=[31,28,31,30,31,30,31,31,30,31,30,31];\nfunction Zb(a,b){for(a=new Date(a.getTime());0<b;){var c=a.getMonth(),d=(Vb(a.getFullYear())?Xb:Yb)[c];if(b>d-a.getDate())b-=d-a.getDate()+1,a.setDate(1),11>c?a.setMonth(c+1):(a.setMonth(0),a.setFullYear(a.getFullYear()+1));else{a.setDate(a.getDate()+b);break}}return a}\nfunction $b(a,b,c,d){function e(g,q,v){for(g=\"number\"==typeof g?g.toString():g||\"\";g.length<q;)g=v[0]+g;return g}function f(g,q){return e(g,q,\"0\")}function l(g,q){function v(H){return 0>H?-1:0<H?1:0}var y;0===(y=v(g.getFullYear()-q.getFullYear()))&&0===(y=v(g.getMonth()-q.getMonth()))&&(y=v(g.getDate()-q.getDate()));return y}function k(g){switch(g.getDay()){case 0:return new Date(g.getFullYear()-1,11,29);case 1:return g;case 2:return new Date(g.getFullYear(),0,3);case 3:return new Date(g.getFullYear(),\n0,2);case 4:return new Date(g.getFullYear(),0,1);case 5:return new Date(g.getFullYear()-1,11,31);case 6:return new Date(g.getFullYear()-1,11,30)}}function m(g){g=Zb(new Date(g.ha+1900,0,1),g.ya);var q=new Date(g.getFullYear()+1,0,4),v=k(new Date(g.getFullYear(),0,4));q=k(q);return 0>=l(v,g)?0>=l(q,g)?g.getFullYear()+1:g.getFullYear():g.getFullYear()-1}var p=D[d+40>>2>>>0];d={Ya:D[d>>2>>>0],Xa:D[d+4>>2>>>0],wa:D[d+8>>2>>>0],sa:D[d+12>>2>>>0],qa:D[d+16>>2>>>0],ha:D[d+20>>2>>>0],xa:D[d+24>>2>>>0],ya:D[d+\n28>>2>>>0],bb:D[d+32>>2>>>0],Wa:D[d+36>>2>>>0],Za:p?ma(p):\"\"};c=ma(c);p={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var n in p)c=c.replace(new RegExp(n,\"g\"),p[n]);var r=\n\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),u=\"January February March April May June July August September October November December\".split(\" \");p={\"%a\":function(g){return r[g.xa].substring(0,3)},\"%A\":function(g){return r[g.xa]},\"%b\":function(g){return u[g.qa].substring(0,3)},\"%B\":function(g){return u[g.qa]},\"%C\":function(g){return f((g.ha+1900)/100|0,2)},\"%d\":function(g){return f(g.sa,2)},\"%e\":function(g){return e(g.sa,2,\" \")},\"%g\":function(g){return m(g).toString().substring(2)},\n\"%G\":function(g){return m(g)},\"%H\":function(g){return f(g.wa,2)},\"%I\":function(g){g=g.wa;0==g?g=12:12<g&&(g-=12);return f(g,2)},\"%j\":function(g){return f(g.sa+Wb(Vb(g.ha+1900)?Xb:Yb,g.qa-1),3)},\"%m\":function(g){return f(g.qa+1,2)},\"%M\":function(g){return f(g.Xa,2)},\"%n\":function(){return\"\\n\"},\"%p\":function(g){return 0<=g.wa&&12>g.wa?\"AM\":\"PM\"},\"%S\":function(g){return f(g.Ya,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(g){return g.xa||7},\"%U\":function(g){var q=new Date(g.ha+1900,0,1),v=0===q.getDay()?\nq:Zb(q,7-q.getDay());g=new Date(g.ha+1900,g.qa,g.sa);return 0>l(v,g)?f(Math.ceil((31-v.getDate()+(Wb(Vb(g.getFullYear())?Xb:Yb,g.getMonth()-1)-31)+g.getDate())/7),2):0===l(v,q)?\"01\":\"00\"},\"%V\":function(g){var q=new Date(g.ha+1901,0,4),v=k(new Date(g.ha+1900,0,4));q=k(q);var y=Zb(new Date(g.ha+1900,0,1),g.ya);return 0>l(y,v)?\"53\":0>=l(q,y)?\"01\":f(Math.ceil((v.getFullYear()<g.ha+1900?g.ya+32-v.getDate():g.ya+1-v.getDate())/7),2)},\"%w\":function(g){return g.xa},\"%W\":function(g){var q=new Date(g.ha,0,\n1),v=1===q.getDay()?q:Zb(q,0===q.getDay()?1:7-q.getDay()+1);g=new Date(g.ha+1900,g.qa,g.sa);return 0>l(v,g)?f(Math.ceil((31-v.getDate()+(Wb(Vb(g.getFullYear())?Xb:Yb,g.getMonth()-1)-31)+g.getDate())/7),2):0===l(v,q)?\"01\":\"00\"},\"%y\":function(g){return(g.ha+1900).toString().substring(2)},\"%Y\":function(g){return g.ha+1900},\"%z\":function(g){g=g.Wa;var q=0<=g;g=Math.abs(g)/60;return(q?\"+\":\"-\")+String(\"0000\"+(g/60*100+g%60)).slice(-4)},\"%Z\":function(g){return g.Za},\"%%\":function(){return\"%\"}};c=c.replace(/%%/g,\n\"\\x00\\x00\");for(n in p)c.includes(n)&&(c=c.replace(new RegExp(n,\"g\"),p[n](d)));c=c.replace(/\\0\\0/g,\"%\");n=ac(c);if(n.length>b)return 0;E.set(n,a>>>0);return n.length-1}for(var bc=Array(256),cc=0;256>cc;++cc)bc[cc]=String.fromCharCode(cc);Ra=bc;O=h.BindingError=Va(\"BindingError\");Wa=h.InternalError=Va(\"InternalError\");\nS.prototype.isAliasOf=function(a){if(!(this instanceof S&&a instanceof S))return!1;var b=this.ba.ea.ca,c=this.ba.da,d=a.ba.ea.ca;for(a=a.ba.da;b.ja;)c=b.ta(c),b=b.ja;for(;d.ja;)a=d.ta(a),d=d.ja;return b===d&&c===a};\nS.prototype.clone=function(){this.ba.da||Ya(this);if(this.ba.ra)return this.ba.count.value+=1,this;var a=jb,b=Object,c=b.create,d=Object.getPrototypeOf(this),e=this.ba;a=a(c.call(b,d,{ba:{value:{count:e.count,pa:e.pa,ra:e.ra,da:e.da,ea:e.ea,ga:e.ga,ia:e.ia}}}));a.ba.count.value+=1;a.ba.pa=!1;return a};S.prototype[\"delete\"]=function(){this.ba.da||Ya(this);this.ba.pa&&!this.ba.ra&&P(\"Object already scheduled for deletion\");$a(this);ab(this.ba);this.ba.ra||(this.ba.ga=void 0,this.ba.da=void 0)};\nS.prototype.isDeleted=function(){return!this.ba.da};S.prototype.deleteLater=function(){this.ba.da||Ya(this);this.ba.pa&&!this.ba.ra&&P(\"Object already scheduled for deletion\");db.push(this);1===db.length&&fb&&fb(eb);this.ba.pa=!0;return this};h.getInheritedInstanceCount=function(){return Object.keys(gb).length};h.getLiveInheritedInstances=function(){var a=[],b;for(b in gb)gb.hasOwnProperty(b)&&a.push(gb[b]);return a};h.flushPendingDeletes=eb;h.setDelayFunction=function(a){fb=a;db.length&&fb&&fb(eb)};\nU.prototype.Oa=function(a){this.Ea&&(a=this.Ea(a));return a};U.prototype.Ca=function(a){this.na&&this.na(a)};U.prototype.argPackAdvance=8;U.prototype.readValueFromPointer=sb;U.prototype.deleteObject=function(a){if(null!==a)a[\"delete\"]()};\nU.prototype.fromWireType=function(a){function b(){return this.va?ib(this.ca.la,{ea:this.Ra,da:c,ia:this,ga:a}):ib(this.ca.la,{ea:this,da:a})}var c=this.Oa(a);if(!c)return this.Ca(a),null;var d=hb(this.ca,c);if(void 0!==d){if(0===d.ba.count.value)return d.ba.da=c,d.ba.ga=a,d.clone();d=d.clone();this.Ca(a);return d}d=this.ca.Na(c);d=cb[d];if(!d)return b.call(this);d=this.ua?d.Ha:d.pointerType;var e=bb(c,this.ca,d.ca);return null===e?b.call(this):this.va?ib(d.ca.la,{ea:d,da:e,ia:this,ga:a}):ib(d.ca.la,\n{ea:d,da:e})};vb=h.UnboundTypeError=Va(\"UnboundTypeError\");h.count_emval_handles=function(){for(var a=0,b=5;b<Y.length;++b)void 0!==Y[b]&&++a;return a};h.get_first_emval=function(){for(var a=5;a<Y.length;++a)if(void 0!==Y[a])return Y[a];return null};function ac(a){var b=Array(oa(a)+1);na(a,b,0,b.length);return b}\nvar dc=\"function\"==typeof atob?atob:function(a){var b=\"\",c=0;a=a.replace(/[^A-Za-z0-9\\+\\/=]/g,\"\");do{var d=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\".indexOf(a.charAt(c++));var e=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\".indexOf(a.charAt(c++));var f=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\".indexOf(a.charAt(c++));var l=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\".indexOf(a.charAt(c++));d=d<<2|e>>4;\ne=(e&15)<<4|f>>2;var k=(f&3)<<6|l;b+=String.fromCharCode(d);64!==f&&(b+=String.fromCharCode(e));64!==l&&(b+=String.fromCharCode(k))}while(c<a.length);return b};function ia(a){if(a.startsWith(Ha)){try{var b=dc(a.slice(Ha.length)),c=new Uint8Array(b.length);for(a=0;a<b.length;++a)c[a]=b.charCodeAt(a)}catch(d){throw Error(\"Converting base64 string to bytes failed.\");}return c}}\nvar fc={a:function(a){return ec(a+16)+16},b:function(a,b,c){(new Oa(a)).Fa(b,c);Pa++;throw a;},E:function(){},J:function(a,b,c,d,e){var f=Qa(c);b=K(b);R(a,{name:b,fromWireType:function(l){return!!l},toWireType:function(l,k){return k?d:e},argPackAdvance:8,readValueFromPointer:function(l){if(1===c)var k=E;else if(2===c)k=C;else if(4===c)k=D;else throw new TypeError(\"Unknown boolean type size: \"+b);return this.fromWireType(k[l>>>f])},ka:null})},e:function(a,b,c,d,e,f,l,k,m,p,n,r,u){n=K(n);f=V(e,f);k&&\n(k=V(l,k));p&&(p=V(m,p));u=V(r,u);var g=Ta(n);lb(g,function(){X(\"Cannot construct \"+n+\" due to unbound types\",[d])});Q([a,b,c],d?[d]:[],function(q){q=q[0];if(d){var v=q.ca;var y=v.la}else y=S.prototype;q=Ua(g,function(){if(Object.getPrototypeOf(this)!==H)throw new O(\"Use 'new' to construct \"+n);if(void 0===N.ma)throw new O(n+\" has no accessible constructor\");var Gb=N.ma[arguments.length];if(void 0===Gb)throw new O(\"Tried to invoke ctor of \"+n+\" with invalid number of parameters (\"+arguments.length+\n\") - expected (\"+Object.keys(N.ma).toString()+\") parameters instead!\");return Gb.apply(this,arguments)});var H=Object.create(y,{constructor:{value:q}});q.prototype=H;var N=new mb(n,q,H,u,v,f,k,p);v=new U(n,N,!0,!1);y=new U(n+\"*\",N,!1,!1);var ea=new U(n+\" const*\",N,!1,!0);cb[a]={pointerType:y,Ha:ea};tb(g,q);return[v,y,ea]})},t:function(a,b,c,d,e,f,l){var k=Bb(c,d);b=K(b);f=V(e,f);Q([],[a],function(m){function p(){X(\"Cannot call \"+n+\" due to unbound types\",k)}m=m[0];var n=m.name+\".\"+b;b.startsWith(\"@@\")&&\n(b=Symbol[b.substring(2)]);var r=m.ca.constructor;void 0===r[b]?(p.oa=c-1,r[b]=p):(kb(r,b,n),r[b].fa[c-1]=p);Q([],k,function(u){u=Ab(n,[u[0],null].concat(u.slice(1)),null,f,l);void 0===r[b].fa?(u.oa=c-1,r[b]=u):r[b].fa[c-1]=u;return[]});return[]})},z:function(a,b,c,d,e,f,l,k){b=K(b);f=V(e,f);Q([],[a],function(m){m=m[0];var p=m.name+\".\"+b,n={get:function(){X(\"Cannot access \"+p+\" due to unbound types\",[c])},enumerable:!0,configurable:!0};n.set=k?()=>{X(\"Cannot access \"+p+\" due to unbound types\",[c])}:\n()=>{P(p+\" is a read-only property\")};Object.defineProperty(m.ca.constructor,b,n);Q([],[c],function(r){r=r[0];var u={get:function(){return r.fromWireType(f(d))},enumerable:!0};k&&(k=V(l,k),u.set=g=>{var q=[];k(d,r.toWireType(q,g));zb(q)});Object.defineProperty(m.ca.constructor,b,u);return[]});return[]})},f:function(a,b,c,d,e,f){0<b||z(void 0);var l=Bb(b,c);e=V(d,e);Q([],[a],function(k){k=k[0];var m=\"constructor \"+k.name;void 0===k.ca.ma&&(k.ca.ma=[]);if(void 0!==k.ca.ma[b-1])throw new O(\"Cannot register multiple constructors with identical number of parameters (\"+\n(b-1)+\") for class '\"+k.name+\"'! Overload resolution is currently only performed using the parameter count, not actual type info!\");k.ca.ma[b-1]=()=>{X(\"Cannot construct \"+k.name+\" due to unbound types\",l)};Q([],l,function(p){p.splice(1,0,null);k.ca.ma[b-1]=Ab(m,p,null,e,f);return[]});return[]})},c:function(a,b,c,d,e,f,l,k){var m=Bb(c,d);b=K(b);f=V(e,f);Q([],[a],function(p){function n(){X(\"Cannot call \"+r+\" due to unbound types\",m)}p=p[0];var r=p.name+\".\"+b;b.startsWith(\"@@\")&&(b=Symbol[b.substring(2)]);\nk&&p.ca.Sa.push(b);var u=p.ca.la,g=u[b];void 0===g||void 0===g.fa&&g.className!==p.name&&g.oa===c-2?(n.oa=c-2,n.className=p.name,u[b]=n):(kb(u,b,r),u[b].fa[c-2]=n);Q([],m,function(q){q=Ab(r,q,p,f,l);void 0===u[b].fa?(q.oa=c-2,u[b]=q):u[b].fa[c-2]=q;return[]});return[]})},u:function(a,b,c,d,e,f,l,k,m,p){b=K(b);e=V(d,e);Q([],[a],function(n){n=n[0];var r=n.name+\".\"+b,u={get:function(){X(\"Cannot access \"+r+\" due to unbound types\",[c,l])},enumerable:!0,configurable:!0};u.set=m?()=>{X(\"Cannot access \"+\nr+\" due to unbound types\",[c,l])}:()=>{P(r+\" is a read-only property\")};Object.defineProperty(n.ca.la,b,u);Q([],m?[c,l]:[c],function(g){var q=g[0],v={get:function(){var H=Cb(this,n,r+\" getter\");return q.fromWireType(e(f,H))},enumerable:!0};if(m){m=V(k,m);var y=g[1];v.set=function(H){var N=Cb(this,n,r+\" setter\"),ea=[];m(p,N,y.toWireType(ea,H));zb(ea)}}Object.defineProperty(n.ca.la,b,v);return[]});return[]})},D:function(a,b){b=K(b);R(a,{name:b,fromWireType:function(c){var d=Z(c);Eb(c);return d},toWireType:function(c,\nd){return T(d)},argPackAdvance:8,readValueFromPointer:sb,ka:null})},w:function(a,b,c,d){function e(){}c=Qa(c);b=K(b);e.values={};R(a,{name:b,constructor:e,fromWireType:function(f){return this.constructor.values[f]},toWireType:function(f,l){return l.value},argPackAdvance:8,readValueFromPointer:Fb(b,c,d),ka:null});lb(b,e)},q:function(a,b,c){var d=Hb(a,\"enum\");b=K(b);a=d.constructor;d=Object.create(d.constructor.prototype,{value:{value:c},constructor:{value:Ua(d.name+\"_\"+b,function(){})}});a.values[c]=\nd;a[b]=d},y:function(a,b,c){c=Qa(c);b=K(b);R(a,{name:b,fromWireType:function(d){return d},toWireType:function(d,e){return e},argPackAdvance:8,readValueFromPointer:Ib(b,c),ka:null})},p:function(a,b,c,d,e,f){var l=Bb(b,c);a=K(a);e=V(d,e);lb(a,function(){X(\"Cannot call \"+a+\" due to unbound types\",l)},b-1);Q([],l,function(k){tb(a,Ab(a,[k[0],null].concat(k.slice(1)),null,e,f),b-1);return[]})},s:function(a,b,c,d,e){b=K(b);-1===e&&(e=4294967295);e=Qa(c);var f=k=>k;if(0===d){var l=32-8*c;f=k=>k<<l>>>l}c=\nb.includes(\"unsigned\")?function(k,m){return m>>>0}:function(k,m){return m};R(a,{name:b,fromWireType:f,toWireType:c,argPackAdvance:8,readValueFromPointer:Jb(b,e,0!==d),ka:null})},o:function(a,b,c){function d(f){f>>=2;var l=F;return new e(wa,l[f+1>>>0],l[f>>>0])}var e=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][b];c=K(c);R(a,{name:c,fromWireType:d,argPackAdvance:8,readValueFromPointer:d},{Pa:!0})},A:function(a,b){b=K(b);var c=\"std::string\"===b;R(a,\n{name:b,fromWireType:function(d){var e=F[d>>>2];if(c)for(var f=d+4,l=0;l<=e;++l){var k=d+4+l;if(l==e||0==A[k>>>0]){f=ma(f,k-f);if(void 0===m)var m=f;else m+=String.fromCharCode(0),m+=f;f=k+1}}else{m=Array(e);for(l=0;l<e;++l)m[l]=String.fromCharCode(A[d+4+l>>>0]);m=m.join(\"\")}W(d);return m},toWireType:function(d,e){e instanceof ArrayBuffer&&(e=new Uint8Array(e));var f=\"string\"==typeof e;f||e instanceof Uint8Array||e instanceof Uint8ClampedArray||e instanceof Int8Array||P(\"Cannot pass non-string to std::string\");\nvar l=(c&&f?()=>oa(e):()=>e.length)(),k=ec(4+l+1);k>>>=0;F[k>>>2]=l;if(c&&f)na(e,A,k+4,l+1);else if(f)for(f=0;f<l;++f){var m=e.charCodeAt(f);255<m&&(W(k),P(\"String has UTF-16 code units that do not fit in 8 bits\"));A[k+4+f>>>0]=m}else for(f=0;f<l;++f)A[k+4+f>>>0]=e[f];null!==d&&d.push(W,k);return k},argPackAdvance:8,readValueFromPointer:sb,ka:function(d){W(d)}})},x:function(a,b,c){c=K(c);if(2===b){var d=qa;var e=ra;var f=sa;var l=()=>B;var k=1}else 4===b&&(d=ta,e=ua,f=va,l=()=>F,k=2);R(a,{name:c,\nfromWireType:function(m){for(var p=F[m>>>2],n=l(),r,u=m+4,g=0;g<=p;++g){var q=m+4+g*b;if(g==p||0==n[q>>>k])u=d(u,q-u),void 0===r?r=u:(r+=String.fromCharCode(0),r+=u),u=q+b}W(m);return r},toWireType:function(m,p){\"string\"!=typeof p&&P(\"Cannot pass non-string to C++ string type \"+c);var n=f(p),r=ec(4+n+b);r>>>=0;F[r>>>2]=n>>k;e(p,r+4,n+b);null!==m&&m.push(W,r);return r},argPackAdvance:8,readValueFromPointer:sb,ka:function(m){W(m)}})},K:function(a,b){b=K(b);R(a,{Qa:!0,name:b,argPackAdvance:0,fromWireType:function(){},\ntoWireType:function(){}})},i:function(a,b,c){a=Z(a);b=Hb(b,\"emval::as\");var d=[],e=T(d);D[c>>>2]=e;return b.toWireType(d,a)},l:function(a,b,c,d){a=Mb[a];b=Z(b);c=Lb(c);a(b,c,null,d)},d:Eb,k:function(a,b){var c=Ob(a,b),d=c[0];b=d.name+\"_$\"+c.slice(1).map(function(n){return n.name}).join(\"_\")+\"$\";var e=Pb[b];if(void 0!==e)return e;e=[\"retType\"];for(var f=[d],l=\"\",k=0;k<a-1;++k)l+=(0!==k?\", \":\"\")+\"arg\"+k,e.push(\"argType\"+k),f.push(c[1+k]);var m=\"return function \"+Ta(\"methodCaller_\"+b)+\"(handle, name, destructors, args) {\\n\",\np=0;for(k=0;k<a-1;++k)m+=\"    var arg\"+k+\" = argType\"+k+\".readValueFromPointer(args\"+(p?\"+\"+p:\"\")+\");\\n\",p+=c[k+1].argPackAdvance;m+=\"    var rv = handle[name](\"+l+\");\\n\";for(k=0;k<a-1;++k)c[k+1].deleteObject&&(m+=\"    argType\"+k+\".deleteObject(arg\"+k+\");\\n\");d.Qa||(m+=\"    return retType.toWireType(destructors, rv);\\n\");e.push(m+\"};\\n\");a=yb(e).apply(null,f);e=Nb(a);return Pb[b]=e},j:function(a,b){a=Z(a);b=Z(b);return T(a[b])},m:function(a){4<a&&(Y[a].Ba+=1)},r:function(){return T([])},n:function(a){return T(Lb(a))},\nh:function(a){var b=Z(a);zb(b);Eb(a)},g:function(a,b){a=Hb(a,\"_emval_take_value\");a=a.readValueFromPointer(b);return T(a)},B:function(){z(\"\")},C:function(a,b,c){A.copyWithin(a>>>0,b>>>0,b+c>>>0)},v:function(a){var b=A.length;a>>>=0;if(4294901760<a)return!1;for(var c=1;4>=c;c*=2){var d=b*(1+.2/c);d=Math.min(d,a+100663296);var e=Math;d=Math.max(a,d);e=e.min.call(e,4294901760,d+(65536-d%65536)%65536);a:{try{ja.grow(e-wa.byteLength+65535>>>16);za();var f=1;break a}catch(l){}f=void 0}if(f)return!0}return!1},\nH:function(a,b){var c=0;Rb().forEach(function(d,e){var f=b+c;e=D[a+4*e>>2>>>0]=f;for(f=0;f<d.length;++f)E[e++>>0>>>0]=d.charCodeAt(f);E[e>>0>>>0]=0;c+=d.length+1});return 0},I:function(a,b){var c=Rb();D[a>>2>>>0]=c.length;var d=0;c.forEach(function(e){d+=e.length+1});D[b>>2>>>0]=d;return 0},F:Ub,G:function(a,b,c,d){return $b(a,b,c,d)}};\n(function(){function a(e){h.asm=e.exports;ja=h.asm.L;za();Aa=h.asm.R;Ca.unshift(h.asm.M);G--;h.monitorRunDependencies&&h.monitorRunDependencies(G);0==G&&(null!==Ga&&(clearInterval(Ga),Ga=null),I&&(e=I,I=null,e()))}function b(e){a(e.instance)}function c(e){return Ka().then(function(f){return WebAssembly.instantiate(f,d)}).then(function(f){return f}).then(e,function(f){w(\"failed to asynchronously prepare wasm: \"+f);z(f)})}var d={a:fc};G++;h.monitorRunDependencies&&h.monitorRunDependencies(G);if(h.instantiateWasm)try{return h.instantiateWasm(d,\na)}catch(e){return w(\"Module.instantiateWasm callback failed with error: \"+e),!1}(function(){return x||\"function\"!=typeof WebAssembly.instantiateStreaming||J.startsWith(Ha)||\"function\"!=typeof fetch?c(b):fetch(J,{credentials:\"same-origin\"}).then(function(e){return WebAssembly.instantiateStreaming(e,d).then(b,function(f){w(\"wasm streaming compile failed: \"+f);w(\"falling back to ArrayBuffer instantiation\");return c(b)})})})().catch(ba);return{}})();\nh.___wasm_call_ctors=function(){return(h.___wasm_call_ctors=h.asm.M).apply(null,arguments)};h._main=function(){return(h._main=h.asm.N).apply(null,arguments)};var xb=h.___getTypeName=function(){return(xb=h.___getTypeName=h.asm.O).apply(null,arguments)};h.___embind_register_native_and_builtin_types=function(){return(h.___embind_register_native_and_builtin_types=h.asm.P).apply(null,arguments)};\nvar ec=h._malloc=function(){return(ec=h._malloc=h.asm.Q).apply(null,arguments)},W=h._free=function(){return(W=h._free=h.asm.S).apply(null,arguments)};h.dynCall_viij=function(){return(h.dynCall_viij=h.asm.T).apply(null,arguments)};h.dynCall_viiij=function(){return(h.dynCall_viiij=h.asm.U).apply(null,arguments)};h.dynCall_iiiij=function(){return(h.dynCall_iiiij=h.asm.V).apply(null,arguments)};h.dynCall_vij=function(){return(h.dynCall_vij=h.asm.W).apply(null,arguments)};\nh.dynCall_iij=function(){return(h.dynCall_iij=h.asm.X).apply(null,arguments)};h.dynCall_iiij=function(){return(h.dynCall_iiij=h.asm.Y).apply(null,arguments)};h.dynCall_iiiiij=function(){return(h.dynCall_iiiiij=h.asm.Z).apply(null,arguments)};h.dynCall_iiiiijj=function(){return(h.dynCall_iiiiijj=h.asm._).apply(null,arguments)};h.dynCall_iiiiiijj=function(){return(h.dynCall_iiiiiijj=h.asm.$).apply(null,arguments)};h.dynCall_viijii=function(){return(h.dynCall_viijii=h.asm.aa).apply(null,arguments)};\nvar gc;function hc(a){this.name=\"ExitStatus\";this.message=\"Program terminated with exit(\"+a+\")\";this.status=a}I=function ic(){gc||jc();gc||(I=ic)};\nfunction jc(){function a(){if(!gc&&(gc=!0,h.calledRun=!0,!ka)){La(Ca);La(Da);aa(h);if(h.onRuntimeInitialized)h.onRuntimeInitialized();if(kc){var b=h._main;try{var c=b(0,0);if(!noExitRuntime){if(h.onExit)h.onExit(c);ka=!0}fa(c,new hc(c))}catch(d){d instanceof hc||\"unwind\"==d||fa(1,d)}finally{}}if(h.postRun)for(\"function\"==typeof h.postRun&&(h.postRun=[h.postRun]);h.postRun.length;)b=h.postRun.shift(),Ea.unshift(b);La(Ea)}}if(!(0<G)){if(h.preRun)for(\"function\"==typeof h.preRun&&(h.preRun=[h.preRun]);h.preRun.length;)Fa();\nLa(Ba);0<G||(h.setStatus?(h.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){h.setStatus(\"\")},1);a()},1)):a())}}h.run=jc;if(h.preInit)for(\"function\"==typeof h.preInit&&(h.preInit=[h.preInit]);0<h.preInit.length;)h.preInit.pop()();var kc=!0;h.noInitialRun&&(kc=!1);jc();\n\n\n  return Module.ready\n}\n);\n})();\nexport default Module;","import {\n  BatchEncoderConstructorOptions,\n  BatchEncoderDependencies\n} from './batch-encoder'\nimport {\n  CipherTextConstructorOptions,\n  CipherTextDependencies\n} from './cipher-text'\nimport {\n  CKKSEncoderConstructorOptions,\n  CKKSEncoderDependencies\n} from './ckks-encoder'\nimport { CoeffModulus, CoeffModulusDependencies } from './coeff-modulus'\nimport { ComprModeType, ComprModeTypeDependencies } from './compr-mode-type'\nimport {\n  ContextDataConstructorOptions,\n  ContextDataDependencies\n} from './context-data'\nimport { ContextConstructorOptions, ContextDependencies } from './context'\nimport { DecryptorConstructorOptions, DecryptorDependencies } from './decryptor'\nimport {\n  EncryptionParameterQualifiersConstructorOptions,\n  EncryptionParameterQualifiersDependencies\n} from './encryption-parameter-qualifiers'\nimport {\n  EncryptionParametersConstructorOptions,\n  EncryptionParametersDependencies\n} from './encryption-parameters'\nimport { EncryptorConstructorOptions, EncryptorDependencies } from './encryptor'\nimport { EvaluatorConstructorOptions, EvaluatorDependencies } from './evaluator'\nimport { Exception, ExceptionDependencies } from './exception'\nimport {\n  GaloisKeysConstructorOptions,\n  GaloisKeysDependencies\n} from './galois-keys'\nimport {\n  MemoryPoolHandle,\n  MemoryPoolHandleDependencies\n} from './memory-pool-handle'\nimport { ModulusConstructorOptions, ModulusDependencies } from './modulus'\nimport {\n  ParmsIdTypeConstructorOptions,\n  ParmsIdTypeDependencies\n} from './parms-id-type'\nimport {\n  PlainTextConstructorOptions,\n  PlainTextDependencies\n} from './plain-text'\nimport { PlainModulus, PlainModulusDependencies } from './plain-modulus'\nimport {\n  PublicKeyConstructorOptions,\n  PublicKeyDependencies\n} from './public-key'\nimport {\n  RelinKeysConstructorOptions,\n  RelinKeysDependencies\n} from './relin-keys'\nimport { SchemeType, SchemeTypeDependencies } from './scheme-type'\nimport {\n  SecretKeyConstructorOptions,\n  SecretKeyDependencies\n} from './secret-key'\nimport { SecurityLevel, SecurityLevelDependencies } from './security-level'\nimport {\n  SerializableConstructorOptions,\n  SerializableDependencies\n} from './serializable'\nimport { VectorConstructorOptions, VectorDependencies } from './vector'\nimport {\n  KeyGeneratorConstructorOptions,\n  KeyGeneratorDependencies\n} from './key-generator'\nimport { version } from '../../package.json'\n\nexport type Instance = any\nexport type Loader = any\nexport type Library = any\nexport type Dependencies = any\nexport type LoaderOptions = {\n  readonly loader: Loader\n}\n\nexport type SEALLibrary = {\n  readonly BatchEncoder: BatchEncoderConstructorOptions\n  readonly CipherText: CipherTextConstructorOptions\n  readonly CKKSEncoder: CKKSEncoderConstructorOptions\n  readonly CoeffModulus: CoeffModulus\n  readonly ComprModeType: ComprModeType\n  readonly ContextData: ContextDataConstructorOptions\n  readonly Context: ContextConstructorOptions\n  readonly Decryptor: DecryptorConstructorOptions\n  readonly EncryptionParameterQualifiers: EncryptionParameterQualifiersConstructorOptions\n  readonly EncryptionParameters: EncryptionParametersConstructorOptions\n  readonly Encryptor: EncryptorConstructorOptions\n  readonly Evaluator: EvaluatorConstructorOptions\n  readonly Exception: Exception\n  readonly GaloisKeys: GaloisKeysConstructorOptions\n  readonly KeyGenerator: KeyGeneratorConstructorOptions\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly Modulus: ModulusConstructorOptions\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly PlainText: PlainTextConstructorOptions\n  readonly PlainModulus: PlainModulus\n  readonly PublicKey: PublicKeyConstructorOptions\n  readonly RelinKeys: RelinKeysConstructorOptions\n  readonly SchemeType: SchemeType\n  readonly SecretKey: SecretKeyConstructorOptions\n  readonly SecurityLevel: SecurityLevel\n  readonly Serializable: SerializableConstructorOptions\n  readonly Vector: VectorConstructorOptions\n  readonly Version: string\n}\ntype SEALConstructorOptions = {\n  readonly BatchEncoder: BatchEncoderDependencies\n  readonly CipherText: CipherTextDependencies\n  readonly CKKSEncoder: CKKSEncoderDependencies\n  readonly CoeffModulus: CoeffModulusDependencies\n  readonly ComprModeType: ComprModeTypeDependencies\n  readonly ContextData: ContextDataDependencies\n  readonly Context: ContextDependencies\n  readonly Decryptor: DecryptorDependencies\n  readonly EncryptionParameterQualifiers: EncryptionParameterQualifiersDependencies\n  readonly EncryptionParameters: EncryptionParametersDependencies\n  readonly Encryptor: EncryptorDependencies\n  readonly Evaluator: EvaluatorDependencies\n  readonly Exception: ExceptionDependencies\n  readonly GaloisKeys: GaloisKeysDependencies\n  readonly KeyGenerator: KeyGeneratorDependencies\n  readonly MemoryPoolHandle: MemoryPoolHandleDependencies\n  readonly Modulus: ModulusDependencies\n  readonly ParmsIdType: ParmsIdTypeDependencies\n  readonly PlainText: PlainTextDependencies\n  readonly PlainModulus: PlainModulusDependencies\n  readonly PublicKey: PublicKeyDependencies\n  readonly RelinKeys: RelinKeysDependencies\n  readonly SchemeType: SchemeTypeDependencies\n  readonly SecretKey: SecretKeyDependencies\n  readonly SecurityLevel: SecurityLevelDependencies\n  readonly Serializable: SerializableDependencies\n  readonly Vector: VectorDependencies\n}\n\n/**\n * @implements SEAL\n */\nexport const SEALConstructor = ({\n  BatchEncoder,\n  CipherText,\n  CKKSEncoder,\n  CoeffModulus,\n  ComprModeType,\n  ContextData,\n  Context,\n  Decryptor,\n  EncryptionParameterQualifiers,\n  EncryptionParameters,\n  Encryptor,\n  Evaluator,\n  Exception,\n  GaloisKeys,\n  KeyGenerator,\n  MemoryPoolHandle,\n  Modulus,\n  ParmsIdType,\n  PlainText,\n  PlainModulus,\n  PublicKey,\n  RelinKeys,\n  SchemeType,\n  SecretKey,\n  SecurityLevel,\n  Serializable,\n  Vector\n}: SEALConstructorOptions): SEALLibrary => {\n  // Unfortunately, this library has nested depenencies\n  // so we need to load them in order.\n\n  // Define our singletons\n  const exception = Exception()()\n  const comprModeType = ComprModeType()()\n  const memoryPoolHandle = MemoryPoolHandle()()\n  const securityLevel = SecurityLevel()()\n  const schemeType = SchemeType()()\n\n  // Define our constructors (ORDER MATTERS)\n  const vector = Vector({ Exception: exception })\n  const coeffModulus = CoeffModulus({\n    Exception: exception,\n    SecurityLevel: securityLevel,\n    Vector: vector\n  })()\n  const modulus = Modulus({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const plainModulus = PlainModulus({\n    Exception: exception,\n    Modulus: modulus,\n    Vector: vector\n  })()\n  const serializable = Serializable({\n    Exception: exception,\n    Vector: vector,\n    ComprModeType: comprModeType\n  })\n  const parmsIdType = ParmsIdType({ Exception: exception })\n  const plainText = PlainText({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    ParmsIdType: parmsIdType,\n    MemoryPoolHandle: memoryPoolHandle,\n    Vector: vector\n  })\n  const cipherText = CipherText({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    ParmsIdType: parmsIdType,\n    MemoryPoolHandle: memoryPoolHandle,\n    Vector: vector\n  })\n  const batchEncoder = BatchEncoder({\n    Exception: exception,\n    MemoryPoolHandle: memoryPoolHandle,\n    PlainText: plainText,\n    Vector: vector\n  })\n  const ckksEncoder = CKKSEncoder({\n    Exception: exception,\n    MemoryPoolHandle: memoryPoolHandle,\n    PlainText: plainText,\n    Vector: vector\n  })\n  const encryptionParameterQualifiers = EncryptionParameterQualifiers()\n  const encryptionParameters = EncryptionParameters({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Modulus: modulus,\n    SchemeType: schemeType,\n    ParmsIdType: parmsIdType,\n    Vector: vector\n  })\n  const contextData = ContextData({\n    Exception: exception,\n    EncryptionParameters: encryptionParameters,\n    ParmsIdType: parmsIdType,\n    EncryptionParameterQualifiers: encryptionParameterQualifiers\n  })\n  const context = Context({\n    ParmsIdType: parmsIdType,\n    ContextData: contextData,\n    SecurityLevel: securityLevel\n  })\n  const decryptor = Decryptor({\n    Exception: exception,\n    PlainText: plainText\n  })\n  const encryptor = Encryptor({\n    Exception: exception,\n    MemoryPoolHandle: memoryPoolHandle,\n    CipherText: cipherText,\n    Serializable: serializable\n  })\n  const evaluator = Evaluator({\n    Exception: exception,\n    MemoryPoolHandle: memoryPoolHandle,\n    CipherText: cipherText,\n    PlainText: plainText\n  })\n  const publicKey = PublicKey({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const secretKey = SecretKey({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const relinKeys = RelinKeys({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const galoisKeys = GaloisKeys({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const keyGenerator = KeyGenerator({\n    Exception: exception,\n    PublicKey: publicKey,\n    SecretKey: secretKey,\n    RelinKeys: relinKeys,\n    GaloisKeys: galoisKeys,\n    Serializable: serializable\n  })\n\n  /**\n   * @interface SEAL\n   */\n  return {\n    BatchEncoder: batchEncoder,\n    CipherText: cipherText,\n    CKKSEncoder: ckksEncoder,\n    CoeffModulus: coeffModulus, // Singleton\n    ComprModeType: comprModeType, // Singleton\n    ContextData: contextData,\n    Context: context,\n    Decryptor: decryptor,\n    EncryptionParameterQualifiers: encryptionParameterQualifiers,\n    EncryptionParameters: encryptionParameters,\n    Encryptor: encryptor,\n    Evaluator: evaluator,\n    Exception: exception, // Singleton\n    GaloisKeys: galoisKeys,\n    KeyGenerator: keyGenerator,\n    MemoryPoolHandle: memoryPoolHandle, // Singleton\n    Modulus: modulus,\n    ParmsIdType: parmsIdType,\n    PlainText: plainText,\n    PlainModulus: plainModulus, // Singleton\n    PublicKey: publicKey,\n    RelinKeys: relinKeys,\n    SchemeType: schemeType,\n    SecretKey: secretKey,\n    SecurityLevel: securityLevel, // Singleton\n    Serializable: serializable,\n    Vector: vector,\n    Version: version\n  }\n}\n","export const INSTANCE_DELETED = 'Instance was deleted'\nexport const UNSUPPORTED_VECTOR_TYPE = 'Unsupported vector type'\nexport const UNSUPPORTED_BITSIZES_TYPE =\n  'Unsupported argument type! `bitSizes` must be an Int32Array'\nexport const UNSUPPORTED_BATCH_ENCODE_ARRAY_TYPE =\n  'Unsupported array type! `array` must be of type Int32Array, Uint32Array, BigInt64Array, or BigUint64Array.'\nexport const UNSUPPORTED_CKKS_ENCODE_ARRAY_TYPE =\n  'Unsupported array type! `array` must be of type Float64Array.'\nexport const INVALID_PLAIN_CONSRUCTOR_OPTIONS =\n  'Must specify a (coeffCount), (coeffCount, capacity)'\nexport const INVALID_CIPHER_CONSTRUCTOR_OPTIONS =\n  'Must specify a (context), (context, parmsId), or (context, parmsId, sizeCapacity)'\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { PlainText, PlainTextConstructorOptions } from './plain-text'\nimport { Context } from './context'\nimport { UNSUPPORTED_BATCH_ENCODE_ARRAY_TYPE } from './constants'\n\nexport type BatchEncoderDependencyOptions = {\n  readonly Exception: Exception\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly PlainText: PlainTextConstructorOptions\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type BatchEncoderDependencies = {\n  ({\n    Exception,\n    MemoryPoolHandle,\n    PlainText,\n    Vector\n  }: BatchEncoderDependencyOptions): BatchEncoderConstructorOptions\n}\n\nexport type BatchEncoderConstructorOptions = {\n  (context: Context): BatchEncoder\n}\n\nexport type BatchEncoderTypes =\n  | Int32Array\n  | Uint32Array\n  | BigInt64Array\n  | BigUint64Array\n\nexport type BatchEncoder = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly encode: (\n    array: BatchEncoderTypes,\n    plainText?: PlainText\n  ) => PlainText | void\n  readonly decode: (\n    plainText: PlainText,\n    signed?: boolean,\n    pool?: MemoryPoolHandle\n  ) => Int32Array | Uint32Array\n  readonly decodeBigInt: (\n    plainText: PlainText,\n    signed?: boolean,\n    pool?: MemoryPoolHandle\n  ) => BigInt64Array | BigUint64Array\n  readonly slotCount: number\n}\n\nconst BatchEncoderConstructor =\n  (library: Library): BatchEncoderDependencies =>\n    ({\n      Exception,\n      MemoryPoolHandle,\n      PlainText,\n      Vector\n    }: BatchEncoderDependencyOptions): BatchEncoderConstructorOptions =>\n      (context): BatchEncoder => {\n        const Constructor = library.BatchEncoder\n        let _instance: Instance\n        try {\n          _instance = new Constructor(context.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n        /**\n         * @implements BatchEncoder\n         */\n\n        /**\n         * @interface BatchEncoder\n         */\n        return {\n          /**\n           * Get the underlying WASM instance\n           *\n           * @private\n           * @readonly\n           * @name BatchEncoder#instance\n           * @type {Instance}\n           */\n          get instance() {\n            return _instance\n          },\n\n          /**\n           * Inject this object with a raw WASM instance. No type checking is performed.\n           *\n           * @private\n           * @function\n           * @name BatchEncoder#unsafeInject\n           * @param {Instance} instance WASM instance\n           */\n          unsafeInject(instance: Instance) {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n            _instance = instance\n          },\n\n          /**\n           * Delete the underlying WASM instance.\n           *\n           * Should be called before dereferencing this object to prevent the\n           * WASM heap from growing indefinitely.\n           * @function\n           * @name BatchEncoder#delete\n           */\n          delete() {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n          },\n\n          /**\n           * Creates a PlainText from a given matrix. This function \"batches\" a given matrix\n           * of either signed or unsigned integers modulo the PlainText modulus into a PlainText element, and stores\n           * the result in the destination parameter. The input array must have size at most equal\n           * to the degree of the polynomial modulus. The first half of the elements represent the\n           * first row of the matrix, and the second half represent the second row. The numbers\n           * in the matrix can be at most equal to the PlainText modulus for it to represent\n           * a valid PlainText.\n           *\n           * If the destination PlainText overlaps the input values in memory, the behavior of\n           * this function is undefined.\n           *\n           * @function\n           * @name BatchEncoder#encode\n           * @param {Int32Array|Uint32Array|BigInt64Array|BigUint64Array} array Data to encode\n           * @param {PlainText} [plainText=null] Destination to store the encoded result\n           * @returns {PlainText|void} A new PlainText holding the encoded data or void if one was provided\n           * @example\n           * import SEAL from 'node-seal'\n           * const seal = await SEAL()\n           * ...\n           * const batchEncoder = seal.BatchEncoder(context)\n           *\n           * const plainText = batchEncoder.encode(Int32Array.from([1, -2, 3]))\n           */\n          encode(\n            array: Int32Array | Uint32Array | BigInt64Array | BigUint64Array,\n            plainText?: PlainText\n          ): PlainText | void {\n            try {\n              if (array.constructor === Int32Array) {\n                if (plainText) {\n                  _instance.encode(array, plainText.instance, 'INT32')\n                  return\n                }\n                const plain = PlainText()\n                _instance.encode(array, plain.instance, 'INT32')\n                return plain\n              }\n\n              if (array.constructor === Uint32Array) {\n                if (plainText) {\n                  _instance.encode(array, plainText.instance, 'UINT32')\n                  return\n                }\n                const plain = PlainText()\n                _instance.encode(array, plain.instance, 'UINT32')\n                return plain\n              }\n\n              if (array.constructor === BigInt64Array) {\n                // When embind supports BigInt64Arrays we can remove this hack\n                const stringArray = array.toString().split(',')\n                if (plainText) {\n                  _instance.encode(stringArray, plainText.instance, 'INT64')\n                  return\n                }\n                const plain = PlainText()\n                _instance.encode(stringArray, plain.instance, 'INT64')\n                return plain\n              }\n\n              if (array.constructor === BigUint64Array) {\n                // When embind supports BigInt64Arrays we can remove this hack\n                const stringArray = array.toString().split(',')\n                if (plainText) {\n                  _instance.encode(stringArray, plainText.instance, 'UINT64')\n                  return\n                }\n                const plain = PlainText()\n                _instance.encode(stringArray, plain.instance, 'UINT64')\n                return plain\n              }\n\n              throw new Error(UNSUPPORTED_BATCH_ENCODE_ARRAY_TYPE)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Inverse of encode. This function \"unbatches\" a given PlainText into a matrix\n           * of signed or unsigned integers modulo the PlainText modulus, and stores the result in the destination\n           * parameter. The input PlainText must have degrees less than the polynomial modulus,\n           * and coefficients less than the PlainText modulus, i.e. it must be a valid PlainText\n           * for the encryption parameters. Dynamic memory allocations in the process are\n           * allocated from the memory pool pointed to by the given MemoryPoolHandle.\n           *\n           * @function\n           * @name BatchEncoder#decode\n           * @param {PlainText} plainText Data to decode\n           * @param {boolean} [signed=true] By default, decode as an Int32Array. If false, decode as an Uint32Array\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}]\n           * @returns {Int32Array|Uint32Array} TypedArray containing the decoded data\n           * @example\n           * import SEAL from 'node-seal'\n           * const seal = await SEAL()\n           * ...\n           * const batchEncoder = seal.BatchEncoder(context)\n           *\n           * const plainText = batchEncoder.encode(Int32Array.from([1, -2, 3]))\n           * const plainTextU = batchEncoder.encode(Uint32Array.from([1, 2, 3]))\n           *\n           * const result = batchEncoder.decode(plainText)\n           * const resultU = batchEncoder.decode(plainTextU, false) // To decode as an Uint32Array\n           */\n          decode(\n            plainText: PlainText,\n            signed = true,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): Int32Array | Uint32Array {\n            try {\n              if (signed) {\n                const tempVect = Vector()\n                const instance = _instance.decodeInt32(plainText.instance, pool)\n                tempVect.unsafeInject(instance)\n                tempVect.setType('Int32Array')\n                const tempArr = tempVect.toArray() as Int32Array\n                tempVect.delete()\n                return tempArr\n              }\n              const tempVect = Vector()\n              const instance = _instance.decodeUint32(plainText.instance, pool)\n              tempVect.unsafeInject(instance)\n              tempVect.setType('Uint32Array')\n              const tempArr = tempVect.toArray() as Uint32Array\n              tempVect.delete()\n              return tempArr\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Performs the same function as the 32-bit decode, but supports true\n           * 64-bit values encapsulated by a BigInt.\n           *\n           * There's no official support for sending a BigInt64Array/BigUint64Array\n           * from C++ to JS, therefore this function uses string conversion to\n           * marshal data which is noticably slower. Use this function if you\n           * absolutely need to marshal values larger than 32 bits.\n           *\n           * @see {@link BatchEncoder#decode} for more information about decode.\n           * @function\n           * @name BatchEncoder#decodeBigInt\n           * @param {PlainText} plainText Data to decode\n           * @param {boolean} [signed=true] By default, decode as an BigInt64Array. If false, decode as an BigUint64Array\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}]\n           * @returns {BigInt64Array|BigUint64Array} TypedArray containing the decoded data\n           * @example\n           * import SEAL from 'node-seal'\n           * const seal = await SEAL()\n           * ...\n           * const batchEncoder = seal.BatchEncoder(context)\n           *\n           * const plainText = batchEncoder.encode(BigInt64Array.from([1n, -2n, 3n]))\n           * const plainTextU = batchEncoder.encode(BigUint64Array.from([1n, 2n, 3n]))\n           *\n           * const result = batchEncoder.decodeBigInt(plainText)\n           * const resultU = batchEncoder.decodeBigInt(plainTextU, false) // To decode as an BigUint64Array\n           */\n          decodeBigInt(\n            plainText: PlainText,\n            signed = true,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): BigInt64Array | BigUint64Array {\n            try {\n              if (signed) {\n                const instance = _instance.decodeBigInt(\n                  plainText.instance,\n                  true,\n                  pool\n                )\n                return BigInt64Array.from(instance)\n              }\n              const instance = _instance.decodeBigInt(\n                plainText.instance,\n                false,\n                pool\n              )\n              return BigUint64Array.from(instance)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * The total number of batching slots available to hold data\n           *\n           * @readonly\n           * @name BatchEncoder#slotCount\n           * @type {number}\n           */\n          get slotCount() {\n            return _instance.slotCount()\n          }\n        }\n      }\n\nexport const BatchEncoderInit = ({\n  loader\n}: LoaderOptions): BatchEncoderDependencies => {\n  const library: Library = loader.library\n  return BatchEncoderConstructor(library)\n}\n","import { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\nimport { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\nimport { VectorConstructorOptions } from './vector'\nimport { INVALID_CIPHER_CONSTRUCTOR_OPTIONS } from './constants'\nexport type CipherTextDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type CipherTextDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    ParmsIdType,\n    MemoryPoolHandle,\n    Vector\n  }: CipherTextDependencyOptions): CipherTextConstructorOptions\n}\n\nexport type CipherTextConstructorOptions = {\n  ({\n    context,\n    parmsId,\n    sizeCapacity,\n    pool\n  }?: {\n    context?: Context\n    parmsId?: ParmsIdType\n    sizeCapacity?: number\n    pool?: MemoryPoolHandle\n  }): CipherText\n}\n\nexport type CipherText = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly reserve: (context: Context, capacity: number) => void\n  readonly resize: (size: number) => void\n  readonly release: () => void\n  readonly coeffModulusSize: number\n  readonly polyModulusDegree: number\n  readonly size: number\n  readonly sizeCapacity: number\n  readonly isTransparent: boolean\n  readonly isNttForm: boolean\n  readonly parmsId: ParmsIdType\n  readonly scale: number\n  readonly setScale: (scale: number) => void\n  readonly pool: MemoryPoolHandle\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (cipher: CipherText) => void\n  readonly clone: () => CipherText\n  readonly move: (cipher: CipherText) => void\n}\n\nconst CipherTextConstructor =\n  (library: Library): CipherTextDependencies =>\n    ({\n      Exception,\n      ComprModeType,\n      ParmsIdType,\n      MemoryPoolHandle,\n      Vector\n    }: CipherTextDependencyOptions): CipherTextConstructorOptions =>\n      ({\n        context,\n        parmsId,\n        sizeCapacity,\n        pool = MemoryPoolHandle.global\n      } = {}): CipherText => {\n        // Static methods\n        const Constructor = library.Ciphertext\n\n        let _instance = construct({\n          context,\n          parmsId,\n          sizeCapacity,\n          pool\n        })\n\n        function construct({\n          context,\n          parmsId,\n          sizeCapacity,\n          pool = MemoryPoolHandle.global\n        }: {\n          context?: Context\n          parmsId?: ParmsIdType\n          sizeCapacity?: number\n          pool?: MemoryPoolHandle\n        }) {\n          try {\n            if (!context && !parmsId && sizeCapacity === undefined) {\n              return new Constructor(pool)\n            } else if (context && !parmsId && sizeCapacity === undefined) {\n              return new Constructor(context.instance, pool)\n            } else if (context && parmsId && sizeCapacity === undefined) {\n              return new Constructor(context.instance, parmsId.instance, pool)\n            } else if (context && parmsId && sizeCapacity !== undefined) {\n              return new Constructor(\n                context.instance,\n                parmsId.instance,\n                sizeCapacity,\n                pool\n              )\n            } else {\n              throw new Error(INVALID_CIPHER_CONSTRUCTOR_OPTIONS)\n            }\n          } catch (e) {\n            throw Exception.safe(e as SealError)\n          }\n        }\n        /**\n         * @implements CipherText\n         */\n\n        /**\n         * @interface CipherText\n         */\n        return {\n          /**\n           * Get the underlying WASM instance\n           *\n           * @private\n           * @readonly\n           * @name CipherText#instance\n           * @type {Instance}\n           */\n          get instance() {\n            return _instance\n          },\n\n          /**\n           * Inject this object with a raw WASM instance. No type checking is performed.\n           *\n           * @private\n           * @function\n           * @name CipherText#unsafeInject\n           * @param {Instance} instance WASM instance\n           */\n          unsafeInject(instance: Instance) {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n            _instance = instance\n          },\n\n          /**\n           * Delete the underlying WASM instance.\n           *\n           * Should be called before dereferencing this object to prevent the\n           * WASM heap from growing indefinitely.\n           * @function\n           * @name CipherText#delete\n           */\n          delete() {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n          },\n\n          /**\n           * Allocates enough memory to accommodate the backing array of a ciphertext\n           * with given capacity. In addition to the capacity, the allocation size is\n           * determined by the current encryption parameters.\n           *\n           * @function\n           * @name CipherText#reserve\n           * @param {Context} context The SEAL Context\n           * @param {number} capacity The capacity to reserve\n           */\n          reserve(context: Context, capacity: number) {\n            try {\n              return _instance.reserve(context.instance, capacity)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Resizes the CipherText to given size, reallocating if the capacity\n           * of the CipherText is too small.\n           *\n           * This function is mainly intended for internal use and is called\n           * automatically by functions such as Evaluator.multiply and\n           * Evaluator.relinearize. A normal user should never have a reason\n           * to manually resize a CipherText.\n           *\n           * @function\n           * @name CipherText#resize\n           * @param {number} size The new size\n           */\n          resize(size: number) {\n            try {\n              return _instance.resize(size)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Resets the CipherText. This function releases any memory allocated\n           * by the CipherText, returning it to the memory pool. It also sets all\n           * encryption parameter specific size information to zero.\n           *\n           * @function\n           * @name CipherText#release\n           */\n          release() {\n            _instance.release()\n          },\n\n          /**\n           * The number of primes in the coefficient modulus of the\n           * associated encryption parameters. This directly affects the\n           * allocation size of the CipherText.\n           *\n           * @readonly\n           * @name CipherText#coeffModulusSize\n           * @type {number}\n           */\n          get coeffModulusSize() {\n            return _instance.coeffModulusSize()\n          },\n\n          /**\n           * The degree of the polynomial modulus of the associated\n           * encryption parameters. This directly affects the allocation size\n           * of the CipherText.\n           *\n           * @readonly\n           * @name CipherText#polyModulusDegree\n           * @type {number}\n           */\n          get polyModulusDegree() {\n            return _instance.polyModulusDegree()\n          },\n\n          /**\n           * The size of the CipherText.\n           *\n           * @readonly\n           * @name CipherText#size\n           * @type {number}\n           */\n          get size() {\n            return _instance.size()\n          },\n\n          /**\n           * The capacity of the allocation. This means the largest size\n           * of the CipherText that can be stored in the current allocation with\n           * the current encryption parameters.\n           *\n           * @readonly\n           * @name CipherText#sizeCapacity\n           * @type {number}\n           */\n          get sizeCapacity() {\n            return _instance.sizeCapacity()\n          },\n\n          /**\n           * Whether the current CipherText is transparent, i.e. does not require\n           * a secret key to decrypt. In typical security models such transparent\n           * CipherTexts would not be considered to be valid. Starting from the second\n           * polynomial in the current CipherText, this function returns true if all\n           * following coefficients are identically zero. Otherwise, returns false.\n           *\n           * @readonly\n           * @name CipherText#isTransparent\n           * @type {boolean}\n           */\n          get isTransparent() {\n            return _instance.isTransparent()\n          },\n\n          /**\n           * Whether the CipherText is in NTT form.\n           *\n           * @readonly\n           * @name CipherText#isNttForm\n           * @type {boolean}\n           */\n          get isNttForm() {\n            return _instance.isNttForm()\n          },\n\n          /**\n           * The reference to parmsId.\n           * @see {@link EncryptionParameters} for more information about parmsId.\n           *\n           * @readonly\n           * @name CipherText#parmsId\n           * @type {ParmsIdType}\n           */\n          get parmsId() {\n            const parms = ParmsIdType()\n            parms.inject(_instance.parmsId())\n            return parms\n          },\n\n          /**\n           * The reference to the scale. This is only needed when using the\n           * CKKS encryption scheme. The user should have little or no reason to ever\n           * change the scale by hand.\n           *\n           * @readonly\n           * @name CipherText#scale\n           * @type {number}\n           */\n          get scale() {\n            return _instance.scale()\n          },\n\n          /**\n           * Sets the CipherText scale. This is only needed when using the\n           * CKKS encryption scheme. The user should have little or no reason to ever\n           * change the scale by hand.\n           *\n           * @function\n           * @name CipherText#setScale\n           * @param {number} scale The scale to set\n           */\n          setScale(scale: number) {\n            _instance.setScale(scale)\n          },\n\n          /**\n           * The currently used MemoryPoolHandle.\n           *\n           * @readonly\n           * @name CipherText#pool\n           * @type {MemoryPoolHandle}\n           */\n          get pool() {\n            return _instance.pool()\n          },\n\n          /**\n           * Save the CipherText to a base64 string\n           *\n           * @function\n           * @name CipherText#save\n           * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n           * @returns {string} Base64 encoded string\n           */\n          save(compression: ComprModeType = ComprModeType.zstd): string {\n            return _instance.saveToString(compression)\n          },\n\n          /**\n           * Save the CipherText as a binary Uint8Array\n           *\n           * @function\n           * @name CipherText#saveArray\n           * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n           * @returns {Uint8Array} A byte array containing the CipherText in binary form\n           */\n          saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n            const tempVect = Vector()\n            const instance = _instance.saveToArray(compression)\n            tempVect.unsafeInject(instance)\n            tempVect.setType('Uint8Array')\n            const tempArr = tempVect.toArray() as Uint8Array\n            tempVect.delete()\n            return tempArr\n          },\n\n          /**\n           * Load a CipherText from a base64 string\n           *\n           * @function\n           * @name CipherText#load\n           * @param {Context} context Encryption context to enforce\n           * @param {string} encoded Base64 encoded string\n           */\n          load(context: Context, encoded: string) {\n            try {\n              _instance.loadFromString(context.instance, encoded)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Load a CipherText from an Uint8Array holding binary data\n           *\n           * @function\n           * @name CipherText#loadArray\n           * @param {Context} context Encryption context to enforce\n           * @param {Uint8Array} array TypedArray containing binary data\n           */\n          loadArray(context: Context, array: Uint8Array) {\n            try {\n              _instance.loadFromArray(context.instance, array)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Copy an existing CipherText and overwrite this instance\n           *\n           * @function\n           * @name CipherText#copy\n           * @param {CipherText} cipher CipherText to copy\n           * @example\n           * const cipherTextA = seal.CipherText()\n           * // ... after encoding some data ...\n           * const cipherTextB = seal.CipherText()\n           * cipherTextB.copy(cipherTextA)\n           * // cipherTextB holds a copy of cipherTextA\n           */\n          copy(cipher: CipherText) {\n            try {\n              _instance.copy(cipher.instance)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Clone and return a new instance of this CipherText\n           *\n           * @function\n           * @name CipherText#clone\n           * @returns {CipherText}\n           * @example\n           * const cipherTextA = seal.CipherText()\n           * // ... after encoding some data ...\n           * const cipherTextB = cipherTextA.clone()\n           * // cipherTextB holds a copy of cipherTextA\n           */\n          clone(): CipherText {\n            try {\n              const clonedInstance = _instance.clone()\n              const cipher = CipherTextConstructor(library)({\n                Exception,\n                ComprModeType,\n                ParmsIdType,\n                MemoryPoolHandle,\n                Vector\n              })()\n              cipher.unsafeInject(clonedInstance)\n              return cipher\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Move a CipherText into this one and delete the old reference\n           *\n           * @function\n           * @name CipherText#move\n           * @param {CipherText} cipher CipherText to move\n           * @example\n           * const cipherTextA = seal.CipherText()\n           * // ... after encoding some data ...\n           * const cipherTextB = seal.CipherText()\n           * cipherTextB.move(cipherTextA)\n           * // cipherTextB holds a the instance of cipherTextA.\n           * // cipherTextA no longer holds an instance\n           */\n          move(cipher: CipherText) {\n            try {\n              _instance.move(cipher.instance)\n              // TODO: find optimization\n              // This method results in a copy instead of a real move.\n              // Therefore, we need to delete the old instance.\n              cipher.delete()\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          }\n        }\n      }\n\nexport const CipherTextInit = ({\n  loader\n}: LoaderOptions): CipherTextDependencies => {\n  const library: Library = loader.library\n  return CipherTextConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { PlainText, PlainTextConstructorOptions } from './plain-text'\nimport { Context } from './context'\nimport { UNSUPPORTED_CKKS_ENCODE_ARRAY_TYPE } from './constants'\n\nexport type CKKSEncoderDependencyOptions = {\n  readonly Exception: Exception\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly PlainText: PlainTextConstructorOptions\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type CKKSEncoderDependencies = {\n  ({\n    Exception,\n    MemoryPoolHandle,\n    PlainText,\n    Vector\n  }: CKKSEncoderDependencyOptions): CKKSEncoderConstructorOptions\n}\n\nexport type CKKSEncoderConstructorOptions = {\n  (context: Context): CKKSEncoder\n}\n\nexport type CKKSEncoderTypes = Float64Array\n\nexport type CKKSEncoder = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly encode: (\n    array: CKKSEncoderTypes,\n    scale: number,\n    plainText?: PlainText,\n    pool?: MemoryPoolHandle\n  ) => PlainText | void\n  readonly decode: (\n    plainText: PlainText,\n    pool?: MemoryPoolHandle\n  ) => CKKSEncoderTypes\n  readonly slotCount: number\n}\n\nconst CKKSEncoderConstructor =\n  (library: Library): CKKSEncoderDependencies =>\n    ({\n      Exception,\n      MemoryPoolHandle,\n      PlainText,\n      Vector\n    }: CKKSEncoderDependencyOptions): CKKSEncoderConstructorOptions =>\n      (context): CKKSEncoder => {\n        const Constructor = library.CKKSEncoder\n        let _instance: Instance\n        try {\n          _instance = new Constructor(context.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n        /**\n         * @implements CKKSEncoder\n         */\n\n        /**\n         * @interface CKKSEncoder\n         */\n        return {\n          /**\n           * Get the underlying WASM instance\n           *\n           * @private\n           * @readonly\n           * @name CKKSEncoder#instance\n           * @type {Instance}\n           */\n          get instance() {\n            return _instance\n          },\n\n          /**\n           * Inject this object with a raw WASM instance. No type checking is performed.\n           *\n           * @private\n           * @function\n           * @name CKKSEncoder#unsafeInject\n           * @param {Instance} instance WASM instance\n           */\n          unsafeInject(instance: Instance) {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n            _instance = instance\n          },\n\n          /**\n           * Delete the underlying WASM instance.\n           *\n           * Should be called before dereferencing this object to prevent the\n           * WASM heap from growing indefinitely.\n           * @function\n           * @name CKKSEncoder#delete\n           */\n          delete() {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n          },\n\n          /**\n           * Encodes a vector of double-precision floating-point real numbers\n           * into a plaintext polynomial. Append zeros if vector size is less than N/2.\n           * Dynamic memory allocations in the process are allocated from the memory\n           * pool pointed to by the given MemoryPoolHandle.\n           *\n           * @function\n           * @name CKKSEncoder#encode\n           * @param {Float64Array} array Data to encode\n           * @param {number} scale Scaling parameter defining encoding precision\n           * @param {PlainText} [plainText] Destination to store the encoded result\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {PlainText|void} A new PlainText holding the encoded data or void if one was provided\n           * @example\n           * import SEAL from 'node-seal'\n           * const seal = await SEAL()\n           * ...\n           * const ckksEncoder = seal.CKKSEncoder(context)\n           *\n           * const plainText = ckksEncoder.encode(Float64Array.from([1.11, -2.222, 3.333]), Math.pow(2, 20))\n           */\n          encode(\n            array: Float64Array,\n            scale: number,\n            plainText?: PlainText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): PlainText | void {\n            try {\n              if (array.constructor === Float64Array) {\n                if (plainText) {\n                  _instance.encode(array, scale, plainText.instance, pool)\n                  return\n                }\n                const plain = PlainText()\n                _instance.encode(array, scale, plain.instance, pool)\n                return plain\n              } else {\n                throw new Error(UNSUPPORTED_CKKS_ENCODE_ARRAY_TYPE)\n              }\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Decodes a plaintext polynomial into double-precision floating-point\n           * real numbers. Dynamic memory allocations in the process are\n           * allocated from the memory pool pointed to by the given MemoryPoolHandle.\n           *\n           * @function\n           * @name CKKSEncoder#decode\n           * @param {PlainText} plainText Data to decode\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {Float64Array} TypedArray containing the decoded data\n           * @example\n           * import SEAL from 'node-seal'\n           * const seal = await SEAL()\n           * ...\n           * const ckksEncoder = seal.CKKSEncoder(context)\n           *\n           * const plainText = ckksEncoder.encode(Float64Array.from([1, 2, 3]))\n           *\n           * const result = ckksEncoder.decode(plainText)\n           */\n          decode(\n            plainText: PlainText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): Float64Array {\n            try {\n              const tempVect = Vector()\n              const instance = _instance.decodeDouble(plainText.instance, pool)\n              tempVect.unsafeInject(instance)\n              tempVect.setType('Float64Array')\n              const tempArr = tempVect.toArray() as Float64Array\n              tempVect.delete()\n              return tempArr\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * The total number of CKKS slots available to hold data\n           *\n           * @readonly\n           * @name CKKSEncoder#slotCount\n           * @type {number}\n           */\n          get slotCount() {\n            return _instance.slotCount()\n          }\n        }\n      }\n\nexport const CKKSEncoderInit = ({\n  loader\n}: LoaderOptions): CKKSEncoderDependencies => {\n  const library: Library = loader.library\n  return CKKSEncoderConstructor(library)\n}\n","import { LoaderOptions, Library } from './seal'\nimport { Exception, SealError } from './exception'\nimport { SecurityLevel } from './security-level'\nimport { Vector, VectorConstructorOptions } from './vector'\nimport { UNSUPPORTED_BITSIZES_TYPE } from './constants'\n\nexport type CoeffModulusDependencyOptions = {\n  readonly Exception: Exception\n  readonly SecurityLevel: SecurityLevel\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type CoeffModulusDependencies = {\n  ({\n    Exception,\n    SecurityLevel,\n    Vector\n  }: CoeffModulusDependencyOptions): CoeffModulusConstructorOptions\n}\n\nexport type CoeffModulusConstructorOptions = {\n  (): CoeffModulus\n}\n\nexport type CoeffModulus = {\n  readonly MaxBitCount: (\n    polyModulusDegree: number,\n    securityLevel?: SecurityLevel\n  ) => number\n  readonly BFVDefault: (\n    polyModulusDegree: number,\n    securityLevel?: SecurityLevel\n  ) => Vector\n  readonly Create: (polyModulusDegree: number, bitSizes: Int32Array) => Vector\n}\n\nconst CoeffModulusConstructor =\n  (library: Library): CoeffModulusDependencies =>\n    ({\n      Exception,\n      SecurityLevel,\n      Vector\n    }: CoeffModulusDependencyOptions): CoeffModulusConstructorOptions =>\n      (): CoeffModulus => {\n        // Static methods\n        const _MaxBitCount = library.CoeffModulus.MaxBitCount\n        const _BFVDefault = library.CoeffModulus.BFVDefault\n        const _CreateFromArray = library.CoeffModulus.CreateFromArray\n\n        /**\n         * @implements CoeffModulus\n         */\n\n        /**\n         * @interface CoeffModulus\n         */\n        return {\n          /**\n           * Returns the Maximum Bit Count for the specified polyModulusDegree and securityLevel\n           *\n           * @function\n           * @name CoeffModulus.MaxBitCount\n           * @param {number} polyModulusDegree Degree of the polynomial modulus\n           * @param {SecurityLevel} [securityLevel={@link SecurityLevel.tc128}] Security Level\n           * @returns {number} Maximum bit count\n           */\n          MaxBitCount(\n            polyModulusDegree: number,\n            securityLevel: SecurityLevel = SecurityLevel.tc128\n          ): number {\n            return _MaxBitCount(polyModulusDegree, securityLevel)\n          },\n\n          /**\n           * Returns a default vector of primes for the BFV CoeffModulus parameter\n           *\n           * @function\n           * @name CoeffModulus.BFVDefault\n           * @param {number} polyModulusDegree Degree of the polynomial modulus\n           * @param {SecurityLevel} [securityLevel={@link SecurityLevel.tc128}] Security Level\n           * @returns {Vector} Vector containing Modulus primes\n           */\n          BFVDefault(\n            polyModulusDegree: number,\n            securityLevel: SecurityLevel = SecurityLevel.tc128\n          ): Vector {\n            try {\n              const vectorModulus = Vector()\n              const instance = _BFVDefault(polyModulusDegree, securityLevel)\n              vectorModulus.unsafeInject(instance)\n              vectorModulus.setType('Modulus')\n              return vectorModulus\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Creates a vector of primes for a given polyModulusDegree and bitSizes\n           *\n           * @function\n           * @name CoeffModulus.Create\n           * @param {number} polyModulusDegree Degree of the polynomial modulus\n           * @param {Int32Array} bitSizes Int32Array containing values representing\n           * bit-sizes of primes\n           * @returns {Vector} Vector containing Modulus primes\n           */\n          Create(polyModulusDegree: number, bitSizes: Int32Array): Vector {\n            try {\n              if (bitSizes.constructor !== Int32Array) {\n                throw new Error(UNSUPPORTED_BITSIZES_TYPE)\n              }\n              const vectorModulus = Vector()\n              const instance = _CreateFromArray(polyModulusDegree, bitSizes)\n              vectorModulus.unsafeInject(instance)\n              vectorModulus.setType('Modulus')\n              return vectorModulus\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          }\n        }\n      }\n\nexport const CoeffModulusInit = ({\n  loader\n}: LoaderOptions): CoeffModulusDependencies => {\n  const library: Library = loader.library\n  return CoeffModulusConstructor(library)\n}\n","import { LoaderOptions, Library } from './seal'\n\nexport type ComprModeTypeDependencies = {\n  (): ComprModeTypeConstructorOptions\n}\n\nexport type ComprModeTypeConstructorOptions = {\n  (): ComprModeType\n}\n\nexport type ComprModeType = {\n  readonly none: any\n  readonly zlib: any\n  readonly zstd: any\n}\n\nconst ComprModeTypeConstructor =\n  (library: Library): ComprModeTypeDependencies =>\n    (): ComprModeTypeConstructorOptions =>\n      (): ComprModeType => {\n        // Static methods\n        const _none = library.ComprModeType.none\n        const _zlib = library.ComprModeType.zlib\n        const _zstd = library.ComprModeType.zstd\n\n        /**\n         * @implements ComprModeType\n         */\n\n        /**\n         * @interface ComprModeType\n         */\n        return {\n          /**\n           * The `none` Compression Mode Type\n           *\n           * @readonly\n           * @name ComprModeType.none\n           * @type {ComprModeType.none}\n           */\n          get none() {\n            /**\n             * @typedef {ComprModeType.none} ComprModeType.none\n             */\n            return _none\n          },\n\n          /**\n           * The `zlib` Compression Mode Type\n           *\n           * @readonly\n           * @name ComprModeType.zlib\n           * @type {ComprModeType.zlib}\n           */\n          get zlib() {\n            /**\n             * @typedef {ComprModeType.zlib} ComprModeType.zlib\n             */\n            return _zlib\n          },\n\n          /**\n           * The `zstd` Compression Mode Type\n           *\n           * @readonly\n           * @name ComprModeType.zstd\n           * @type {ComprModeType.zstd}\n           */\n          get zstd() {\n            /**\n             * @typedef {ComprModeType.zstd} ComprModeType.zstd\n             */\n            return _zstd\n          }\n        }\n      }\n\nexport const ComprModeTypeInit = ({\n  loader\n}: LoaderOptions): ComprModeTypeDependencies => {\n  const library: Library = loader.library\n  return ComprModeTypeConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception } from './exception'\nimport {\n  EncryptionParameters,\n  EncryptionParametersConstructorOptions\n} from './encryption-parameters'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\nimport {\n  EncryptionParameterQualifiers,\n  EncryptionParameterQualifiersConstructorOptions\n} from './encryption-parameter-qualifiers'\n\nexport type ContextDataDependencyOptions = {\n  readonly Exception: Exception\n  readonly EncryptionParameters: EncryptionParametersConstructorOptions\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly EncryptionParameterQualifiers: EncryptionParameterQualifiersConstructorOptions\n}\n\nexport type ContextDataDependencies = {\n  ({\n    Exception,\n    EncryptionParameters,\n    ParmsIdType,\n    EncryptionParameterQualifiers\n  }: ContextDataDependencyOptions): ContextDataConstructorOptions\n}\n\nexport type ContextDataConstructorOptions = {\n  (): ContextData\n}\n\nexport type ContextData = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly parms: EncryptionParameters\n  readonly parmsId: ParmsIdType\n  readonly qualifiers: EncryptionParameterQualifiers\n  readonly totalCoeffModulusBitCount: number\n  readonly prevContextData: ContextData\n  readonly nextContextData: ContextData\n  readonly chainIndex: number\n}\n\nconst ContextDataConstructor =\n  (library: Library): ContextDataDependencies =>\n    ({\n      Exception,\n      EncryptionParameters,\n      ParmsIdType,\n      EncryptionParameterQualifiers\n    }: ContextDataDependencyOptions): ContextDataConstructorOptions =>\n      (): ContextData => {\n        let _instance: Instance\n        /**\n         * @implements ContextData\n         */\n\n        /**\n         * @interface ContextData\n         */\n        return {\n          /**\n           * Get the underlying WASM instance\n           *\n           * @private\n           * @readonly\n           * @name ContextData#instance\n           * @type {Instance}\n           */\n          get instance() {\n            return _instance\n          },\n\n          /**\n           * Inject this object with a raw WASM instance. No type checking is performed.\n           *\n           * @private\n           * @function\n           * @name ContextData#unsafeInject\n           * @param {Instance} instance WASM instance\n           */\n          unsafeInject(instance: Instance) {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n            _instance = instance\n          },\n\n          /**\n           * Delete the underlying WASM instance.\n           *\n           * Should be called before dereferencing this object to prevent the\n           * WASM heap from growing indefinitely.\n           * @function\n           * @name ContextData#delete\n           */\n          delete() {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n          },\n\n          /**\n           * Returns a const reference to the underlying encryption parameters.\n           *\n           * @readonly\n           * @name ContextData#parms\n           * @type {EncryptionParameters}\n           */\n          get parms() {\n            const instance = _instance.parms()\n            const encryptionParameters = EncryptionParameters()\n            encryptionParameters.unsafeInject(instance)\n            return encryptionParameters\n          },\n\n          /**\n           * Returns the parmsId of the current parameters.\n           *\n           * @readonly\n           * @name ContextData#parmsId\n           * @type {ParmsIdType}\n           */\n          get parmsId() {\n            const parms = ParmsIdType()\n            parms.inject(_instance.parmsId())\n            return parms\n          },\n\n          /**\n           * Returns a copy of EncryptionParameterQualifiers corresponding to the\n           * current encryption parameters. Note that to change the qualifiers it is\n           * necessary to create a new instance of SEALContext once appropriate changes\n           * to the encryption parameters have been made.\n           *\n           * @readonly\n           * @name ContextData#qualifiers\n           * @type {EncryptionParameterQualifiers}\n           */\n          get qualifiers() {\n            const encParmQualifiers = EncryptionParameterQualifiers()\n            encParmQualifiers.unsafeInject(_instance.qualifiers())\n            return encParmQualifiers\n          },\n\n          /**\n           * Returns the significant bit count of the total coefficient modulus.\n           *\n           * @readonly\n           * @name ContextData#totalCoeffModulusBitCount\n           * @type {number}\n           */\n          get totalCoeffModulusBitCount() {\n            return _instance.totalCoeffModulusBitCount()\n          },\n\n          /**\n           * Returns a shared_ptr to the context data corresponding to the previous parameters\n           * in the modulus switching chain. If the current data is the first one in the\n           * chain, then the result is nullptr.\n           *\n           * @readonly\n           * @name ContextData#prevContextData\n           * @type {ContextData}\n           */\n          get prevContextData() {\n            const cxtData = ContextDataConstructor(library)({\n              Exception,\n              EncryptionParameters,\n              ParmsIdType,\n              EncryptionParameterQualifiers\n            })()\n            cxtData.unsafeInject(_instance.prevContextData())\n            return cxtData\n          },\n\n          /**\n           * Returns a shared_ptr to the context data corresponding to the next parameters\n           * in the modulus switching chain. If the current data is the last one in the\n           * chain, then the result is nullptr.\n           *\n           * @readonly\n           * @name ContextData#nextContextData\n           * @type {ContextData}\n           */\n          get nextContextData() {\n            const cxtData = ContextDataConstructor(library)({\n              Exception,\n              EncryptionParameters,\n              ParmsIdType,\n              EncryptionParameterQualifiers\n            })()\n            cxtData.unsafeInject(_instance.nextContextData())\n            return cxtData\n          },\n\n          /**\n           * Returns the index of the parameter set in a chain. The initial parameters\n           * have index 0 and the index increases sequentially in the parameter chain.\n           *\n           * @readonly\n           * @name EncryptionParameterQualifiers#chainIndex\n           * @type {number}\n           */\n          get chainIndex() {\n            return _instance.chainIndex()\n          }\n        }\n      }\n\nexport const ContextDataInit = ({\n  loader\n}: LoaderOptions): ContextDataDependencies => {\n  const library: Library = loader.library\n  return ContextDataConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\nimport { ContextData, ContextDataConstructorOptions } from './context-data'\nimport { EncryptionParameters } from './encryption-parameters'\nimport { SecurityLevel } from './security-level'\n\nexport type ContextDependencyOptions = {\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly ContextData: ContextDataConstructorOptions\n  readonly SecurityLevel: SecurityLevel\n}\n\nexport type ContextDependencies = {\n  ({\n    ParmsIdType,\n    ContextData,\n    SecurityLevel\n  }: ContextDependencyOptions): ContextConstructorOptions\n}\n\nexport type ContextConstructorOptions = {\n  (\n    encryptionParams: EncryptionParameters,\n    expandModChain?: boolean,\n    securityLevel?: SecurityLevel\n  ): Context\n}\n\nexport type Context = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly toHuman: () => string\n  readonly getContextData: (parmsId: ParmsIdType) => ContextData\n  readonly keyContextData: ContextData\n  readonly firstContextData: ContextData\n  readonly lastContextData: ContextData\n  readonly parametersSet: () => boolean\n  readonly keyParmsId: ParmsIdType\n  readonly firstParmsId: ParmsIdType\n  readonly lastParmsId: ParmsIdType\n  readonly usingKeyswitching: boolean\n}\n\nconst ContextConstructor =\n  (library: Library): ContextDependencies =>\n    ({\n      ParmsIdType,\n      ContextData,\n      SecurityLevel\n    }: ContextDependencyOptions): ContextConstructorOptions =>\n      (\n        encryptionParams,\n        expandModChain = true,\n        securityLevel = SecurityLevel.tc128\n      ): Context => {\n        // Static methods\n        const Constructor = library.SEALContext\n\n        let _instance = new Constructor(\n          encryptionParams.instance,\n          expandModChain,\n          securityLevel\n        ) as Instance\n\n        /**\n         * @implements Context\n         */\n\n        /**\n         * @interface Context\n         */\n        return {\n          /**\n           * Get the underlying WASM instance\n           *\n           * @private\n           * @readonly\n           * @name Context#instance\n           * @type {Instance}\n           */\n          get instance() {\n            return _instance\n          },\n\n          /**\n           * Inject this object with a raw WASM instance. No type checking is performed.\n           *\n           * @private\n           * @function\n           * @name Context#unsafeInject\n           * @param {Instance} instance WASM instance\n           */\n          unsafeInject(instance: Instance) {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n            _instance = instance\n          },\n\n          /**\n           * Delete the underlying WASM instance.\n           *\n           * Should be called before dereferencing this object to prevent the\n           * WASM heap from growing indefinitely.\n           * @function\n           * @name Context#delete\n           */\n          delete() {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n          },\n\n          /**\n           * Returns the context parameters in a human readable string format.\n           *\n           * @private\n           * @function\n           * @name Context#toString\n           * @returns {string} Context details as a string\n           */\n          toHuman(): string {\n            return _instance.toHuman()\n          },\n\n          /**\n           * Returns the ContextData corresponding to encryption parameters with a given\n           * parmsId. If parameters with the given parmsId are not found then the\n           * function returns nullptr.\n           *\n           * @function\n           * @name Context#getContextData\n           * @param {ParmsIdType} parmsId Specific id to return ContextData for\n           * @returns {ContextData} ContextData corresponding to encryption parameters\n           */\n          getContextData(parmsId: ParmsIdType): ContextData {\n            const instance = _instance.getContextData(parmsId.instance)\n            const contextData = ContextData()\n            contextData.unsafeInject(instance)\n            return contextData\n          },\n\n          /**\n           * The ContextData corresponding to encryption parameters that are used for keys.\n           *\n           * @readonly\n           * @name Context#keyContextData\n           * @type {ContextData}\n           */\n          get keyContextData() {\n            const instance = _instance.keyContextData()\n            const contextData = ContextData()\n            contextData.unsafeInject(instance)\n            return contextData\n          },\n\n          /**\n           * The ContextData corresponding to the first encryption parameters that are used for data.\n           *\n           * @readonly\n           * @name Context#firstContextData\n           * @type {ContextData}\n           */\n          get firstContextData() {\n            const instance = _instance.firstContextData()\n            const contextData = ContextData()\n            contextData.unsafeInject(instance)\n            return contextData\n          },\n\n          /**\n           * Returns the ContextData corresponding to the last encryption parameters that are used for data.\n           *\n           * @readonly\n           * @name Context#lastContextData\n           * @type {ContextData}\n           */\n          get lastContextData() {\n            const instance = _instance.lastContextData()\n            const contextData = ContextData()\n            contextData.unsafeInject(instance)\n            return contextData\n          },\n\n          /**\n           * Whether the encryption parameters are set in a way that is considered valid by\n           * Microsoft SEAL, the variable parameters_set is set to true.\n           *\n           * @function\n           * @name Context#parametersSet\n           * @type {boolean}\n           */\n          parametersSet() {\n            return _instance.parametersSet()\n          },\n\n          /**\n           * Returns a ParmsIdType corresponding to the set of encryption parameters that are used for keys.\n           *\n           * @readonly\n           * @name Context#keyParmsId\n           * @type {ParmsIdType}\n           */\n          get keyParmsId() {\n            const instance = _instance.keyParmsId()\n            const parmsId = ParmsIdType()\n            parmsId.inject(instance)\n            return parmsId\n          },\n\n          /**\n           * Returns a ParmsIdType corresponding to the first encryption parameters that are used for data.\n           *\n           * @readonly\n           * @name Context#firstParmsId\n           * @type {ParmsIdType}\n           */\n          get firstParmsId() {\n            const instance = _instance.firstParmsId()\n            const parmsId = ParmsIdType()\n            parmsId.inject(instance)\n            return parmsId\n          },\n\n          /**\n           * The ParmsIdType corresponding to the last encryption parameters that are used for data.\n           *\n           * @readonly\n           * @name Context#lastParmsId\n           * @type {ParmsIdType}\n           */\n          get lastParmsId() {\n            const instance = _instance.lastParmsId()\n            const parmsId = ParmsIdType()\n            parmsId.inject(instance)\n            return parmsId\n          },\n\n          /**\n           * Whether the coefficient modulus supports keyswitching. In practice,\n           * support for keyswitching is required by Evaluator.relinearize,\n           * Evaluator.applyGalois, and all rotation and conjugation operations. For\n           * keyswitching to be available, the coefficient modulus parameter must consist\n           * of at least two prime number factors.\n           *\n           * @readonly\n           * @name Context#usingKeyswitching\n           * @type {boolean}\n           */\n          get usingKeyswitching() {\n            return _instance.usingKeyswitching()\n          }\n        }\n      }\n\nexport const ContextInit = ({ loader }: LoaderOptions): ContextDependencies => {\n  const library: Library = loader.library\n  return ContextConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { CipherText } from './cipher-text'\nimport { Context } from './context'\nimport { SecretKey } from './secret-key'\nimport { PlainText, PlainTextConstructorOptions } from './plain-text'\n\nexport type DecryptorDependencyOptions = {\n  readonly Exception: Exception\n  readonly PlainText: PlainTextConstructorOptions\n}\n\nexport type DecryptorDependencies = {\n  ({\n    Exception,\n    PlainText\n  }: DecryptorDependencyOptions): DecryptorConstructorOptions\n}\n\nexport type DecryptorConstructorOptions = {\n  (context: Context, secretKey: SecretKey): Decryptor\n}\n\nexport type Decryptor = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly decrypt: (\n    cipherText: CipherText,\n    plainText?: PlainText\n  ) => PlainText | void\n  readonly invariantNoiseBudget: (cipherText: CipherText) => number\n}\n\nconst DecryptorConstructor =\n  (library: Library): DecryptorDependencies =>\n    ({\n      Exception,\n      PlainText\n    }: DecryptorDependencyOptions): DecryptorConstructorOptions =>\n      (context, secretKey): Decryptor => {\n        const Constructor = library.Decryptor\n        let _instance: Instance\n        try {\n          _instance = new Constructor(context.instance, secretKey.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n        /**\n         * @implements Decryptor\n         */\n\n        /**\n         * @interface Decryptor\n         */\n        return {\n          /**\n           * Get the underlying WASM instance\n           *\n           * @private\n           * @readonly\n           * @name Decryptor#instance\n           * @type {Instance}\n           */\n          get instance() {\n            return _instance\n          },\n\n          /**\n           * Inject this object with a raw WASM instance. No type checking is performed.\n           *\n           * @private\n           * @function\n           * @name Decryptor#unsafeInject\n           * @param {Instance} instance WASM instance\n           */\n          unsafeInject(instance: Instance) {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n            _instance = instance\n          },\n\n          /**\n           * Delete the underlying WASM instance.\n           *\n           * Should be called before dereferencing this object to prevent the\n           * WASM heap from growing indefinitely.\n           * @function\n           * @name Decryptor#delete\n           */\n          delete() {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n          },\n\n          /**\n           * Decrypts a CipherText and stores the result in the destination parameter.\n           *\n           * @function\n           * @name Decryptor#decrypt\n           * @param {CipherText} cipherText CipherText to decrypt\n           * @param {PlainText} [plainText] PlainText destination to store the decrypted result\n           * @returns {PlainText|void} Returns undefined if a PlainText was specified. Otherwise returns a\n           * PlainText containng the decrypted result\n           */\n          decrypt(cipherText: CipherText, plainText?: PlainText): PlainText | void {\n            try {\n              if (plainText) {\n                _instance.decrypt(cipherText.instance, plainText.instance)\n                return\n              }\n              const plain = PlainText()\n              _instance.decrypt(cipherText.instance, plain.instance)\n              return plain\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Computes the invariant noise budget (in bits) of a CipherText. The invariant\n           * noise budget measures the amount of room there is for the noise to grow while\n           * ensuring correct decryptions. This function works only with the BFV scheme.\n           *\n           * @par Invariant Noise Budget\n           * The invariant noise polynomial of a CipherText is a rational coefficient\n           * polynomial, such that a CipherText decrypts correctly as long as the\n           * coefficients of the invariantnoise polynomial are of absolute value less\n           * than 1/2. Thus, we call the infinity-norm of the invariant noise polynomial\n           * the invariant noise, and for correct decryption requireit to be less than\n           * 1/2. If v denotes the invariant noise, we define the invariant noise budget\n           * as -log2(2v). Thus, the invariant noise budget starts from some initial\n           * value, which depends on the encryption parameters, and decreases when\n           * computations are performed. When the budget reaches zero, the CipherText\n           * becomes too noisy to decrypt correctly.\n           *\n           * @function\n           * @name Decryptor#invariantNoiseBudget\n           * @param {CipherText} cipherText CipherText to measure\n           * @returns {number} Invariant noise budget (in bits)\n           */\n          invariantNoiseBudget(cipherText: CipherText): number {\n            try {\n              return _instance.invariantNoiseBudget(cipherText.instance)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          }\n        }\n      }\n\nexport const DecryptorInit = ({\n  loader\n}: LoaderOptions): DecryptorDependencies => {\n  const library: Library = loader.library\n  return DecryptorConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Vector, VectorConstructorOptions } from './vector'\nimport { ComprModeType } from './compr-mode-type'\nimport { SchemeType } from './scheme-type'\nimport { Exception, SealError } from './exception'\nimport { Modulus, ModulusConstructorOptions } from './modulus'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\n\nexport type EncryptionParametersDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Modulus: ModulusConstructorOptions\n  readonly SchemeType: SchemeType\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type EncryptionParametersDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Modulus,\n    SchemeType,\n    Vector\n  }: EncryptionParametersDependencyOptions): EncryptionParametersConstructorOptions\n}\n\nexport type EncryptionParametersConstructorOptions = {\n  (schemeType?: SchemeType): EncryptionParameters\n}\n\nexport type EncryptionParameters = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly setPolyModulusDegree: (polyModulusDegree: number) => void\n  readonly setCoeffModulus: (coeffModulus: Vector) => void\n  readonly setPlainModulus: (plainModulus: Modulus) => void\n  readonly scheme: SchemeType\n  readonly polyModulusDegree: number\n  readonly coeffModulus: BigUint64Array\n  readonly plainModulus: Modulus\n  readonly parmsId: ParmsIdType\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (encoded: string) => void\n  readonly loadArray: (array: Uint8Array) => void\n}\n\nconst EncryptionParametersConstructor =\n  (library: Library): EncryptionParametersDependencies =>\n    ({\n      Exception,\n      ComprModeType,\n      Modulus,\n      SchemeType,\n      ParmsIdType,\n      Vector\n    }: EncryptionParametersDependencyOptions): EncryptionParametersConstructorOptions =>\n      (schemeType: SchemeType = SchemeType.none): EncryptionParameters => {\n        const Constructor = library.EncryptionParameters\n        let _instance = new Constructor(schemeType)\n\n        /**\n         * @implements EncryptionParameters\n         */\n\n        /**\n         * @interface EncryptionParameters\n         */\n        return {\n          /**\n           * Get the underlying WASM instance\n           *\n           * @private\n           * @readonly\n           * @name EncryptionParameters#instance\n           * @type {Instance}\n           */\n          get instance() {\n            return _instance\n          },\n\n          /**\n           * Inject this object with a raw WASM instance. No type checking is performed.\n           *\n           * @private\n           * @function\n           * @name EncryptionParameters#unsafeInject\n           * @param {Instance} instance WASM instance\n           */\n          unsafeInject(instance: Instance) {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n            _instance = instance\n          },\n\n          /**\n           * Delete the underlying WASM instance.\n           *\n           * Should be called before dereferencing this object to prevent the\n           * WASM heap from growing indefinitely.\n           * @function\n           * @name EncryptionParameters#delete\n           */\n          delete() {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n          },\n\n          /**\n           * Sets the degree of the polynomial modulus parameter to the specified value.\n           * The polynomial modulus directly affects the number of coefficients in\n           * PlainText polynomials, the size of CipherText elements, the computational\n           * performance of the scheme (bigger is worse), and the security level (bigger\n           * is better). In Microsoft SEAL the degree of the polynomial modulus must be a power\n           * of 2 (e.g.  1024, 2048, 4096, 8192, 16384, or 32768).\n           *\n           * @function\n           * @name EncryptionParameters#setPolyModulusDegree\n           * @param {number} polyModulusDegree The degree of the polynomial modulus\n           */\n          setPolyModulusDegree(polyModulusDegree: number) {\n            try {\n              _instance.setPolyModulusDegree(polyModulusDegree)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Sets the coefficient modulus parameter. The coefficient modulus consists\n           * of a list of distinct prime numbers, and is represented by a vector of\n           * Modulus objects. The coefficient modulus directly affects the size\n           * of CipherText elements, the amount of computation that the scheme can perform\n           * (bigger is better), and the security level (bigger is worse). In Microsoft SEAL each\n           * of the prime numbers in the coefficient modulus must be at most 60 bits,\n           * and must be congruent to 1 modulo 2*degree(poly_modulus).\n           *\n           * @function\n           * @name EncryptionParameters#setCoeffModulus\n           * @param {Vector} coeffModulus Vector of Modulus primes\n           */\n          setCoeffModulus(coeffModulus: Vector) {\n            try {\n              _instance.setCoeffModulus(coeffModulus.instance)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Sets the PlainText modulus parameter. The PlainText modulus is an integer\n           * modulus represented by the Modulus class. The PlainText modulus\n           * determines the largest coefficient that PlainText polynomials can represent.\n           * It also affects the amount of computation that the scheme can perform\n           * (bigger is worse). In Microsoft SEAL the PlainText modulus can be at most 60 bits\n           * long, but can otherwise be any integer. Note, however, that some features\n           * (e.g. batching) require the PlainText modulus to be of a particular form.\n           *\n           * @function\n           * @name EncryptionParameters#setPlainModulus\n           * @param {Modulus} plainModulus PlainText modulus parameter\n           */\n          setPlainModulus(plainModulus: Modulus) {\n            try {\n              _instance.setPlainModulus(plainModulus.instance)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * The encryption scheme type.\n           *\n           * @readonly\n           * @name EncryptionParameters#scheme\n           * @type {SchemeType.none|SchemeType.bfv|SchemeType.ckks}\n           */\n          get scheme() {\n            return _instance.scheme()\n          },\n\n          /**\n           * The degree of the polynomial modulus parameter.\n           *\n           * @readonly\n           * @name EncryptionParameters#polyModulusDegree\n           * @type {number}\n           */\n          get polyModulusDegree() {\n            return _instance.polyModulusDegree()\n          },\n\n          /**\n           * Returns the currently set coefficient modulus parameter.\n           *\n           * @readonly\n           * @name EncryptionParameters#coeffModulus\n           * @type {BigUint64Array}\n           */\n          get coeffModulus() {\n            const tempVect = Vector()\n            const instance = _instance.coeffModulus()\n            tempVect.unsafeInject(instance)\n            tempVect.setType('Modulus')\n            const tempArr = tempVect.toArray() as BigUint64Array\n            tempVect.delete()\n            return tempArr\n          },\n\n          /**\n           * Returns the currently set PlainText modulus parameter.\n           *\n           * @readonly\n           * @name EncryptionParameters#plainModulus\n           * @type {Modulus}\n           */\n          get plainModulus() {\n            const instance = _instance.plainModulus()\n            const smallModulus = Modulus(BigInt(0))\n            smallModulus.inject(instance)\n            return smallModulus\n          },\n\n          /**\n           * Returns the ParmsId of the current parameters.\n           *\n           * @readonly\n           * @name EncryptionParameters#parmsId\n           * @type {ParmsIdType}\n           */\n          get parmsId() {\n            const parms = ParmsIdType()\n            parms.inject(_instance.parmsId())\n            return parms\n          },\n\n          /**\n           * Save the Encryption Parameters to a base64 string\n           *\n           * @function\n           * @name EncryptionParameters#save\n           * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n           * @returns {string} base64 encoded string\n           */\n          save(compression: ComprModeType = ComprModeType.zstd): string {\n            return _instance.saveToString(compression)\n          },\n\n          /**\n           * Save the Encryption Parameters as a binary Uint8Array\n           *\n           * @function\n           * @name EncryptionParameters#saveArray\n           * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n           * @returns {Uint8Array} A byte array containing the CipherText in binary form\n           */\n          saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n            const tempVect = Vector()\n            const instance = _instance.saveToArray(compression)\n            tempVect.unsafeInject(instance)\n            tempVect.setType('Uint8Array')\n            const tempArr = tempVect.toArray() as Uint8Array\n            tempVect.delete()\n            return tempArr\n          },\n\n          /**\n           * Load the Encryption Parameters from a base64 string\n           *\n           * @function\n           * @name EncryptionParameters#load\n           * @param {string} encoded base64 encoded string\n           */\n          load(encoded: string) {\n            try {\n              _instance.loadFromString(encoded)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Load the Encryption Parameters from an Uint8Array holding binary data\n           *\n           * @function\n           * @name EncryptionParameters#loadArray\n           * @param {Uint8Array} array TypedArray containing binary data\n           */\n          loadArray(array: Uint8Array) {\n            try {\n              _instance.loadFromArray(array)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          }\n        }\n      }\n\nexport const EncryptionParametersInit = ({\n  loader\n}: LoaderOptions): EncryptionParametersDependencies => {\n  const library: Library = loader.library\n  return EncryptionParametersConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { CipherText, CipherTextConstructorOptions } from './cipher-text'\nimport { Context } from './context'\nimport { Serializable, SerializableConstructorOptions } from './serializable'\nimport { PublicKey } from './public-key'\nimport { SecretKey } from './secret-key'\nimport { PlainText } from './plain-text'\n\nexport type EncryptorDependencyOptions = {\n  readonly Exception: Exception\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly CipherText: CipherTextConstructorOptions\n  readonly Serializable: SerializableConstructorOptions\n}\n\nexport type EncryptorDependencies = {\n  ({\n    Exception,\n    MemoryPoolHandle,\n    CipherText,\n    Serializable\n  }: EncryptorDependencyOptions): EncryptorConstructorOptions\n}\n\nexport type EncryptorConstructorOptions = {\n  (context: Context, publicKey: PublicKey, secretKey?: SecretKey): Encryptor\n}\n\nexport type Encryptor = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly encrypt: (\n    plainText: PlainText,\n    cipherText?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly encryptSerializable: (\n    plainText: PlainText,\n    pool?: MemoryPoolHandle\n  ) => Serializable\n  readonly encryptSymmetric: (\n    plainText: PlainText,\n    cipherText?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly encryptSymmetricSerializable: (\n    plainText: PlainText,\n    pool?: MemoryPoolHandle\n  ) => Serializable\n  readonly encryptZero: (\n    cipherText?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly encryptZeroSerializable: (pool?: MemoryPoolHandle) => Serializable\n}\n\nconst EncryptorConstructor =\n  (library: Library): EncryptorDependencies =>\n    ({\n      Exception,\n      MemoryPoolHandle,\n      CipherText,\n      Serializable\n    }: EncryptorDependencyOptions): EncryptorConstructorOptions =>\n      (context, publicKey, secretKey): Encryptor => {\n        const Constructor = library.Encryptor\n        let _instance = constructInstance(context, publicKey, secretKey)\n\n        function constructInstance(\n          context: Context,\n          publicKey: PublicKey,\n          secretKey?: SecretKey\n        ) {\n          try {\n            if (secretKey) {\n              return new Constructor(\n                context.instance,\n                publicKey.instance,\n                secretKey.instance\n              )\n            }\n            return new Constructor(context.instance, publicKey.instance)\n          } catch (e) {\n            throw Exception.safe(e as SealError)\n          }\n        }\n        /**\n         * @implements Encryptor\n         */\n\n        /**\n         * @interface Encryptor\n         */\n        return {\n          /**\n           * Get the underlying WASM instance\n           *\n           * @private\n           * @readonly\n           * @name Encryptor#instance\n           * @type {Instance}\n           */\n          get instance() {\n            return _instance\n          },\n\n          /**\n           * Inject this object with a raw WASM instance. No type checking is performed.\n           *\n           * @private\n           * @function\n           * @name Encryptor#unsafeInject\n           * @param {Instance} instance WASM instance\n           */\n          unsafeInject(instance: Instance) {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n            _instance = instance\n          },\n\n          /**\n           * Delete the underlying WASM instance.\n           *\n           * Should be called before dereferencing this object to prevent the\n           * WASM heap from growing indefinitely.\n           * @function\n           * @name Encryptor#delete\n           */\n          delete() {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n          },\n\n          /**\n           * Encrypts a PlainText and stores the result in the destination parameter.\n           * Dynamic memory allocations in the process are allocated from the memory\n           * pool pointed to by the given MemoryPoolHandle.\n           *\n           * @function\n           * @name Encryptor#encrypt\n           * @param {PlainText} plainText PlainText to encrypt\n           * @param {CipherText} [cipherText] CipherText destination to store the encrypted result\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {CipherText|void} Returns undefined if a CipherText was specified. Otherwise returns a\n           * CipherText containing the encrypted result\n           */\n          encrypt(\n            plainText: PlainText,\n            cipherText?: CipherText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): CipherText | void {\n            try {\n              if (cipherText) {\n                _instance.encrypt(plainText.instance, cipherText.instance, pool)\n                return\n              }\n              const cipher = CipherText()\n              _instance.encrypt(plainText.instance, cipher.instance, pool)\n              return cipher\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Encrypts a PlainText and returns a CipherText as a Serializable object.\n           * Dynamic memory allocations in the process are allocated from the memory\n           * pool pointed to by the given MemoryPoolHandle.\n           *\n           * @function\n           * @name Encryptor#encryptSerializable\n           * @param {PlainText} plainText PlainText to encrypt\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {Serializable<CipherText>} A Serializable containing the encrypted result\n           */\n          encryptSerializable(\n            plainText: PlainText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): Serializable {\n            try {\n              const temp = Serializable()\n              const instance = _instance.encryptSerializable(\n                plainText.instance,\n                pool\n              )\n              temp.unsafeInject(instance)\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Encrypts a PlainText with the secret key and stores the result in\n           * destination.\n           *\n           * The encryption parameters for the resulting CipherText\n           * correspond to:\n           * 1) in BFV or BGV, the highest (data) level in the modulus switching chain,\n           * 2) in CKKS, the encryption parameters of the plaintext.\n           * Dynamic memory allocations in the process are allocated from the memory\n           * pool pointed to by the given MemoryPoolHandle.\n           *\n           * @function\n           * @name Encryptor#encryptSymmetric\n           * @param {PlainText} plainText PlainText to encrypt\n           * @param {CipherText} [cipherText] CipherText destination to store the encrypted result.\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {CipherText|void} Returns undefined if a CipherText was specified. Otherwise returns a\n           * CipherText containing the encrypted result\n           */\n          encryptSymmetric(\n            plainText: PlainText,\n            cipherText?: CipherText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): CipherText | void {\n            try {\n              if (cipherText) {\n                _instance.encryptSymmetric(\n                  plainText.instance,\n                  cipherText.instance,\n                  pool\n                )\n                return\n              }\n              const cipher = CipherText()\n              _instance.encryptSymmetric(plainText.instance, cipher.instance, pool)\n              return cipher\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Encrypts a plaintext with the secret key and returns the ciphertext as\n           * a serializable object.\n           *\n           * The encryption parameters for the resulting CipherText\n           * correspond to:\n           * 1) in BFV or BGV, the highest (data) level in the modulus switching chain,\n           * 2) in CKKS, the encryption parameters of the plaintext.\n           * Dynamic memory allocations in the process are allocated from the memory\n           * pool pointed to by the given MemoryPoolHandle.\n           *\n           * Half of the ciphertext data is pseudo-randomly generated from a seed to\n           * reduce the object size. The resulting serializable object cannot be used\n           * directly and is meant to be serialized for the size reduction to have an\n           * impact.\n           *\n           * @function\n           * @name Encryptor#encryptSymmetricSerializable\n           * @param {PlainText} plainText PlainText to encrypt\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {Serializable<CipherText>} Returns a Serializable containing the encrypted result\n           */\n          encryptSymmetricSerializable(\n            plainText: PlainText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): Serializable {\n            try {\n              const serialized = Serializable()\n              const instance = _instance.encryptSymmetricSerializable(\n                plainText.instance,\n                pool\n              )\n              serialized.unsafeInject(instance)\n              return serialized\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Encrypts a zero plaintext with the public key and returns the ciphertext\n           * as a serializable object.\n           *\n           * The encryption parameters for the resulting ciphertext correspond to the\n           * highest (data) level in the modulus switching chain. Dynamic memory\n           * allocations in the process are allocated from the memory pool pointed to\n           * by the given MemoryPoolHandle.\n           *\n           * @function\n           * @name Encryptor#encryptZero\n           * @param {CipherText} [cipherText] A CipherText to overwrite.\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {CipherText|void} Returns undefined if a CipherText was specified. Otherwise returns a\n           * CipherText containing the encrypted result\n           */\n          encryptZero(\n            cipherText?: CipherText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): CipherText | void {\n            try {\n              if (cipherText) {\n                _instance.encryptZero(cipherText.instance, pool)\n                return\n              }\n              const cipher = CipherText()\n              _instance.encryptZero(cipher.instance, pool)\n              return cipher\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Encrypts a zero plaintext with the public key and stores the result in\n           * destination.\n           *\n           * The encryption parameters for the resulting ciphertext correspond to the\n           * highest (data) level in the modulus switching chain. Dynamic memory\n           * allocations in the process are allocated from the memory pool pointed to\n           * by the given MemoryPoolHandle.\n           * \n           * @function\n           * @name Encryptor#encryptZeroSerializable\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {Serializable<CipherText>} A CipherText as a serialized object containing the encrypted result\n           */\n          encryptZeroSerializable(\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): Serializable {\n            try {\n              const serialized = Serializable()\n              const instance = _instance.encryptZeroSerializable(pool)\n              serialized.unsafeInject(instance)\n              return serialized\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          }\n        }\n      }\n\nexport const EncryptorInit = ({\n  loader\n}: LoaderOptions): EncryptorDependencies => {\n  const library: Library = loader.library\n  return EncryptorConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { CipherText, CipherTextConstructorOptions } from './cipher-text'\nimport { Context } from './context'\nimport { PlainText, PlainTextConstructorOptions } from './plain-text'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { RelinKeys } from './relin-keys'\nimport { ParmsIdType } from './parms-id-type'\nimport { GaloisKeys } from './galois-keys'\nimport { SchemeType } from './scheme-type'\n\nexport type EvaluatorDependencyOptions = {\n  readonly Exception: Exception\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly CipherText: CipherTextConstructorOptions\n  readonly PlainText: PlainTextConstructorOptions\n}\n\nexport type EvaluatorDependencies = {\n  ({\n    Exception,\n    MemoryPoolHandle,\n    CipherText,\n    PlainText\n  }: EvaluatorDependencyOptions): EvaluatorConstructorOptions\n}\n\nexport type EvaluatorConstructorOptions = {\n  (context: Context): Evaluator\n}\n\nexport type Evaluator = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly negate: (\n    encrypted: CipherText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly add: (\n    a: CipherText,\n    b: CipherText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly sub: (\n    a: CipherText,\n    b: CipherText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly multiply: (\n    a: CipherText,\n    b: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly square: (\n    encrypted: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly relinearize: (\n    encrypted: CipherText,\n    relinKeys: RelinKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly cipherModSwitchToNext: (\n    encrypted: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly cipherModSwitchTo: (\n    encrypted: CipherText,\n    parmsId: ParmsIdType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly plainModSwitchToNext: (\n    plain: PlainText,\n    destination?: PlainText\n  ) => PlainText | void\n  readonly plainModSwitchTo: (\n    plain: PlainText,\n    parmsId: ParmsIdType,\n    destination?: PlainText\n  ) => PlainText | void\n  readonly rescaleToNext: (\n    encrypted: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly rescaleTo: (\n    encrypted: CipherText,\n    parmsId: ParmsIdType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly exponentiate: (\n    encrypted: CipherText,\n    exponent: number,\n    relinKeys: RelinKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly addPlain: (\n    encrypted: CipherText,\n    plain: PlainText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly subPlain: (\n    encrypted: CipherText,\n    plain: PlainText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly multiplyPlain: (\n    encrypted: CipherText,\n    plain: PlainText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly plainTransformToNtt: (\n    plain: PlainText,\n    parmsId: ParmsIdType,\n    destinationNtt?: PlainText,\n    pool?: MemoryPoolHandle\n  ) => PlainText | void\n  readonly cipherTransformToNtt: (\n    encrypted: CipherText,\n    destinationNtt?: CipherText\n  ) => CipherText | void\n  readonly cipherTransformFromNtt: (\n    encryptedNtt: CipherText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly applyGalois: (\n    encrypted: CipherText,\n    galoisElt: number,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly rotateRows: (\n    encrypted: CipherText,\n    steps: number,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly rotateColumns: (\n    encrypted: CipherText,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly rotateVector: (\n    encrypted: CipherText,\n    steps: number,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly complexConjugate: (\n    encrypted: CipherText,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly sumElements: (\n    encrypted: CipherText,\n    galoisKeys: GaloisKeys,\n    scheme: SchemeType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly dotProduct: (\n    a: CipherText,\n    b: CipherText,\n    relinKeys: RelinKeys,\n    galoisKeys: GaloisKeys,\n    scheme: SchemeType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly dotProductPlain: (\n    a: CipherText,\n    b: PlainText,\n    galoisKeys: GaloisKeys,\n    scheme: SchemeType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n}\n\nconst EvaluatorConstructor =\n  (library: Library): EvaluatorDependencies =>\n    ({\n      Exception,\n      MemoryPoolHandle,\n      CipherText,\n      PlainText\n    }: EvaluatorDependencyOptions): EvaluatorConstructorOptions =>\n      (context): Evaluator => {\n        const Constructor = library.Evaluator\n        let _instance: Instance\n        try {\n          _instance = new Constructor(context.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n        /**\n         * @implements Evaluator\n         */\n\n        /**\n         * @interface Evaluator\n         */\n        return {\n          /**\n           * Get the underlying WASM instance\n           *\n           * @private\n           * @readonly\n           * @name Evaluator#instance\n           * @type {Instance}\n           */\n          get instance() {\n            return _instance\n          },\n\n          /**\n           * Inject this object with a raw WASM instance. No type checking is performed.\n           *\n           * @private\n           * @function\n           * @name Evaluator#unsafeInject\n           * @param {Instance} instance WASM instance\n           */\n          unsafeInject(instance: Instance) {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n            _instance = instance\n          },\n\n          /**\n           * Delete the underlying WASM instance.\n           *\n           * Should be called before dereferencing this object to prevent the\n           * WASM heap from growing indefinitely.\n           * @function\n           * @name Evaluator#delete\n           */\n          delete() {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n          },\n\n          /**\n           * Negates a CipherText and stores the result in the destination parameter.\n           *\n           * @function\n           * @name Evaluator#negate\n           * @param {CipherText} encrypted CipherText to negate\n           * @param {CipherText} [destination] CipherText to store the negated results\n           * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n           * @example\n           * const cipherText = seal.CipherText()\n           * // ... after encrypting some data ...\n           * const resultCipher = evaluator.negate(cipherText)\n           * // or\n           * const cipherDest = seal.CipherText()\n           * evaluator.negate(encrypted, cipherDest)\n           */\n          negate(\n            encrypted: CipherText,\n            destination?: CipherText\n          ): CipherText | void {\n            try {\n              if (destination) {\n                _instance.negate(encrypted.instance, destination.instance)\n                return\n              }\n              const temp = CipherText()\n              _instance.negate(encrypted.instance, temp.instance)\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Adds two CipherTexts. This function adds together a and b\n           * and stores the result in the destination parameter.\n           *\n           * @function\n           * @name Evaluator#add\n           * @param {CipherText} a CipherText operand A\n           * @param {CipherText} b CipherText operand B\n           * @param {CipherText} [destination] CipherText destination to store the sum\n           * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n           * @example\n           * const cipherTextA = seal.CipherText()\n           * const cipherTextB = seal.CipherText()\n           * // ... after encrypting some data ...\n           * const resultCipher = evaluator.add(cipherTextA, cipherTextB)\n           * // or\n           * const cipherDest = seal.CipherText()\n           * evaluator.add(cipherTextA, cipherTextB, cipherDest)\n           */\n          add(\n            a: CipherText,\n            b: CipherText,\n            destination?: CipherText\n          ): CipherText | void {\n            try {\n              if (destination) {\n                _instance.add(a.instance, b.instance, destination.instance)\n                return\n              }\n              const temp = CipherText()\n              _instance.add(a.instance, b.instance, temp.instance)\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Subtracts two CipherTexts. This function computes the difference of a\n           * and b and stores the result in the destination parameter.\n           *\n           * @function\n           * @name Evaluator#sub\n           * @param {CipherText} a CipherText operand A\n           * @param {CipherText} b CipherText operand B\n           * @param {CipherText} [destination] CipherText destination to store the difference\n           * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n           * @example\n           * const cipherTextA = seal.CipherText()\n           * const cipherTextB = seal.CipherText()\n           * // ... after encrypting some data ...\n           * const resultCipher = evaluator.sub(cipherTextA, cipherTextB)\n           * // or\n           * const cipherDest = seal.CipherText()\n           * evaluator.sub(cipherTextA, cipherTextB, cipherDest)\n           */\n          sub(\n            a: CipherText,\n            b: CipherText,\n            destination?: CipherText\n          ): CipherText | void {\n            try {\n              if (destination) {\n                _instance.sub(a.instance, b.instance, destination.instance)\n                return\n              }\n              const temp = CipherText()\n              _instance.sub(a.instance, b.instance, temp.instance)\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Multiplies two CipherTexts. This functions computes the product of a\n           * and b and stores the result in the destination parameter. Dynamic\n           * memory allocations in the process are allocated from the memory pool pointed\n           * to by the given MemoryPoolHandle.\n           *\n           * @function\n           * @name Evaluator#multiply\n           * @param {CipherText} a CipherText operand A\n           * @param {CipherText} b CipherText operand B\n           * @param {CipherText} [destination] CipherText destination to store the product\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n           * @example\n           * const cipherTextA = seal.CipherText()\n           * const cipherTextB = seal.CipherText()\n           * // ... after encrypting some data ...\n           * const resultCipher = evaluator.multiply(cipherTextA, cipherTextB)\n           * // or\n           * const cipherDest = seal.CipherText()\n           * evaluator.multiply(cipherTextA, cipherTextB, cipherDest)\n           */\n          multiply(\n            a: CipherText,\n            b: CipherText,\n            destination?: CipherText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): CipherText | void {\n            try {\n              if (destination) {\n                _instance.multiply(\n                  a.instance,\n                  b.instance,\n                  destination.instance,\n                  pool\n                )\n                return\n              }\n              const temp = CipherText()\n              _instance.multiply(a.instance, b.instance, temp.instance, pool)\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Squares a CipherText. This functions computes the square of encrypted and\n           * stores the result in the destination parameter. Dynamic memory allocations\n           * in the process are allocated from the memory pool pointed to by the given\n           * MemoryPoolHandle.\n           *\n           * @function\n           * @name Evaluator#square\n           * @param {CipherText} encrypted CipherText to square\n           * @param {CipherText} [destination] CipherText destination to store the squared result\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n           * @example\n           * const cipherTextA = seal.CipherText()\n           * // ... after encrypting some data ...\n           * const resultCipher = evaluator.square(cipherTextA, cipherTextB)\n           * // or\n           * const cipherDest = seal.CipherText()\n           * evaluator.square(cipherTextA, cipherDest)\n           */\n          square(\n            encrypted: CipherText,\n            destination?: CipherText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): CipherText | void {\n            try {\n              if (destination) {\n                _instance.square(encrypted.instance, destination.instance, pool)\n                return\n              }\n              const temp = CipherText()\n              _instance.square(encrypted.instance, temp.instance, pool)\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Relinearizes a CipherText. This functions relinearizes encrypted, reducing\n           * its size down to 2, and stores the result in the destination parameter.\n           * If the size of encrypted is K+1, the given relinearization keys need to\n           * have size at least K-1. Dynamic memory allocations in the process are allocated\n           * from the memory pool pointed to by the given MemoryPoolHandle.\n           *\n           * @function\n           * @name Evaluator#relinearize\n           * @param {CipherText} encrypted CipherText to relinearize\n           * @param {RelinKeys} relinKeys RelinKey used to perform relinearization\n           * @param {CipherText} [destination] CipherText destination to store the relinearized result\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n           * @example\n           * const relinKeys = keyGenerator.createRelinKeys()\n           * const cipherTextA = seal.CipherText()\n           * // ... after encrypting some data ...\n           * const resultCipher = evaluator.relinearize(cipherTextA, relinKeys)\n           * // or\n           * const cipherDest = seal.CipherText()\n           * evaluator.relinearize(cipherTextA, relinKeys, cipherDest)\n           */\n          relinearize(\n            encrypted: CipherText,\n            relinKeys: RelinKeys,\n            destination?: CipherText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): CipherText | void {\n            try {\n              if (destination) {\n                _instance.relinearize(\n                  encrypted.instance,\n                  relinKeys.instance,\n                  destination.instance,\n                  pool\n                )\n                return\n              }\n              const temp = CipherText()\n              _instance.relinearize(\n                encrypted.instance,\n                relinKeys.instance,\n                temp.instance,\n                pool\n              )\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Given a CipherText encrypted modulo q_1...q_k, this function switches the\n           * modulus down to q_1...q_{k-1} and stores the result in the destination\n           * parameter. Dynamic memory allocations in the process are allocated from\n           * the memory pool pointed to by the given MemoryPoolHandle.\n           *\n           * @function\n           * @name Evaluator#cipherModSwitchToNext\n           * @param {CipherText} encrypted CipherText to switch its modulus down\n           * @param {CipherText} [destination] CipherText destination to store the switched result\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n           * @example\n           * const cipherTextA = seal.CipherText()\n           * // ... after encrypting some data ...\n           * const resultCipher = evaluator.cipherModSwitchToNext(cipherTextA)\n           * // or\n           * const cipherDest = seal.CipherText()\n           * evaluator.cipherModSwitchToNext(cipherTextA, cipherDest)\n           */\n          cipherModSwitchToNext(\n            encrypted: CipherText,\n            destination?: CipherText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): CipherText | void {\n            try {\n              if (destination) {\n                _instance.cipherModSwitchToNext(\n                  encrypted.instance,\n                  destination.instance,\n                  pool\n                )\n                return\n              }\n              const temp = CipherText()\n              _instance.cipherModSwitchToNext(\n                encrypted.instance,\n                temp.instance,\n                pool\n              )\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Given a CipherText encrypted modulo q_1...q_k, this function switches the\n           * modulus down until the parameters reach the given parmsId and stores the\n           * result in the destination parameter. Dynamic memory allocations in the process\n           * are allocated from the memory pool pointed to by the given MemoryPoolHandle.\n           *\n           * @function\n           * @name Evaluator#cipherModSwitchTo\n           * @param {CipherText} encrypted CipherText to switch its modulus down\n           * @param {ParmsIdType} parmsId Target parmsId to switch to\n           * @param {CipherText} [destination] CipherText destination to store the switched result\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n           * @example\n           * const context = seal.Context(encParms, true)\n           * const cipherTextA = seal.CipherText()\n           * // ... after encrypting some data ...\n           * const parmsId = context.lastParmsId\n           * const resultCipher = evaluator.cipherModSwitchTo(cipherTextA, parmsId)\n           * // or\n           * const cipherDest = seal.CipherText()\n           * evaluator.cipherModSwitchTo(cipherTextA, parmsId, cipherDest)\n           */\n          cipherModSwitchTo(\n            encrypted: CipherText,\n            parmsId: ParmsIdType,\n            destination?: CipherText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): CipherText | void {\n            try {\n              if (destination) {\n                _instance.cipherModSwitchTo(\n                  encrypted.instance,\n                  parmsId.instance,\n                  destination.instance,\n                  pool\n                )\n                return\n              }\n              const temp = CipherText()\n              _instance.cipherModSwitchTo(\n                encrypted.instance,\n                parmsId.instance,\n                temp.instance,\n                pool\n              )\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Modulus switches an NTT transformed PlainText from modulo q_1...q_k down\n           * to modulo q_1...q_{k-1} and stores the result in the destination parameter.\n           *\n           * @function\n           * @name Evaluator#plainModSwitchToNext\n           * @param {PlainText} plain PlainText to switch its modulus down\n           * @param {PlainText} [destination] PlainText destination to store the switched result\n           * @returns {PlainText|void} PlainText containing the result or void if a destination was supplied\n           * @example\n           * const plainTextA = seal.PlainText()\n           * // ... after encoding some data ...\n           * const resultCipher = evaluator.plainModSwitchToNext(plainTextA)\n           * // or\n           * const plainDest = seal.PlainText()\n           * evaluator.plainModSwitchToNext(plainTextA, plainDest)\n           */\n          plainModSwitchToNext(\n            plain: PlainText,\n            destination?: PlainText\n          ): PlainText | void {\n            try {\n              if (destination) {\n                _instance.plainModSwitchToNext(plain.instance, destination.instance)\n                return\n              }\n              const temp = PlainText()\n              _instance.plainModSwitchToNext(plain.instance, temp.instance)\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Given an NTT transformed PlainText modulo q_1...q_k, this function switches\n           * the modulus down until the parameters reach the given parmsId and stores\n           * the result in the destination parameter.\n           *\n           * @function\n           * @name Evaluator#plainModSwitchTo\n           * @param {PlainText} plain PlainText to switch its modulus down\n           * @param {ParmsIdType} parmsId Target parmsId to switch to\n           * @param {PlainText} [destination] PlainText destination to store the switched result\n           * @returns {PlainText|void} PlainText containing the result or void if a destination was supplied\n           * @example\n           * const context = seal.Context(encParms, true)\n           * const plainTextA = seal.PlainText()\n           * // ... after encoding some data ...\n           * const parmsId = context.lastParmsId\n           * const resultCipher = evaluator.plainModSwitchTo(plainTextA, parmsId)\n           * // or\n           * const plainDest = seal.PlainText()\n           * evaluator.plainModSwitchTo(plainTextA, parmsId, plainDest)\n           */\n          plainModSwitchTo(\n            plain: PlainText,\n            parmsId: ParmsIdType,\n            destination?: PlainText\n          ): PlainText | void {\n            try {\n              if (destination) {\n                _instance.plainModSwitchTo(\n                  plain.instance,\n                  parmsId.instance,\n                  destination.instance\n                )\n                return\n              }\n              const temp = PlainText()\n              _instance.plainModSwitchTo(\n                plain.instance,\n                parmsId.instance,\n                temp.instance\n              )\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Given a CipherText encrypted modulo q_1...q_k, this function switches the\n           * modulus down to q_1...q_{k-1}, scales the message down accordingly, and\n           * stores the result in the destination parameter. Dynamic memory allocations\n           * in the process are allocated from the memory pool pointed to by the given\n           * MemoryPoolHandle.\n           *\n           * @function\n           * @name Evaluator#rescaleToNext\n           * @param {CipherText} encrypted CipherText to rescale\n           * @param {CipherText} [destination] CipherText destination to store the rescaled result\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n           * @example\n           * const cipherTextA = seal.CipherText()\n           * // ... after encrypting some data ...\n           * const resultCipher = evaluator.rescaleToNext(cipherTextA)\n           * // or\n           * const cipherDest = seal.CipherText()\n           * evaluator.rescaleToNext(cipherTextA, cipherDest)\n           */\n          rescaleToNext(\n            encrypted: CipherText,\n            destination?: CipherText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): CipherText | void {\n            try {\n              if (destination) {\n                _instance.rescaleToNext(\n                  encrypted.instance,\n                  destination.instance,\n                  pool\n                )\n                return\n              }\n              const temp = CipherText()\n              _instance.rescaleToNext(encrypted.instance, temp.instance, pool)\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Given a CipherText encrypted modulo q_1...q_k, this function switches the\n           * modulus down until the parameters reach the given parmsId, scales the message\n           * down accordingly, and stores the result in the destination parameter. Dynamic\n           * memory allocations in the process are allocated from the memory pool pointed\n           * to by the given MemoryPoolHandle.\n           *\n           * @function\n           * @name Evaluator#rescaleTo\n           * @param {CipherText} encrypted CipherText to rescale\n           * @param {ParmsIdType} parmsId Target parmsId to rescale to\n           * @param {CipherText} [destination] CipherText destination to store the rescaled result\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n           * @example\n           * const context = seal.Context(encParms, true)\n           * const cipherTextA = seal.CipherText()\n           * // ... after encrypting some data ...\n           * const parmsId = context.lastParmsId\n           * const resultCipher = evaluator.rescaleTo(cipherTextA, parmsId)\n           * // or\n           * const cipherDest = seal.CipherText()\n           * evaluator.rescaleTo(cipherTextA, parmsId, cipherDest)\n           */\n          rescaleTo(\n            encrypted: CipherText,\n            parmsId: ParmsIdType,\n            destination?: CipherText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): CipherText | void {\n            try {\n              if (destination) {\n                _instance.rescaleTo(\n                  encrypted.instance,\n                  parmsId.instance,\n                  destination.instance,\n                  pool\n                )\n                return\n              }\n              const temp = CipherText()\n              _instance.rescaleTo(\n                encrypted.instance,\n                parmsId.instance,\n                temp.instance,\n                pool\n              )\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Exponentiates a CipherText. This functions raises encrypted to a power and\n           * stores the result in the destination parameter. Dynamic memory allocations\n           * in the process are allocated from the memory pool pointed to by the given\n           * MemoryPoolHandle. The exponentiation is done in a depth-optimal order, and\n           * relinearization is performed automatically after every multiplication in\n           * the process. In relinearization the given relinearization keys are used.\n           *\n           * @function\n           * @name Evaluator#exponentiate\n           * @param {CipherText} encrypted CipherText to exponentiate\n           * @param {number} exponent Positive integer to exponentiate the CipherText\n           * @param {RelinKeys} relinKeys RelinKeys used to perform relinearization after each exponentiation\n           * @param {CipherText} [destination] CipherText destination to store the exponentiated result\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n           * @example\n           * const relinKeys = keyGenerator.createRelinKeys()\n           * const cipherTextA = seal.CipherText()\n           * // ... after encrypting some data ...\n           * const resultCipher = evaluator.exponentiate(cipherTextA, 3, relinKeys)\n           * // or\n           * const cipherDest = seal.CipherText()\n           * evaluator.exponentiate(cipherTextA, 3, relinKeys, cipherDest)\n           */\n          exponentiate(\n            encrypted: CipherText,\n            exponent: number,\n            relinKeys: RelinKeys,\n            destination?: CipherText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): CipherText | void {\n            try {\n              if (destination) {\n                _instance.exponentiate(\n                  encrypted.instance,\n                  exponent,\n                  relinKeys.instance,\n                  destination.instance,\n                  pool\n                )\n                return\n              }\n              const temp = CipherText()\n              _instance.exponentiate(\n                encrypted.instance,\n                exponent,\n                relinKeys.instance,\n                temp.instance,\n                pool\n              )\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Adds a CipherText and a PlainText. This function adds a CipherText and\n           * a PlainText and stores the result in the destination parameter. The PlainText\n           * must be valid for the current encryption parameters.\n           *\n           * @function\n           * @name Evaluator#addPlain\n           * @param {CipherText} encrypted CipherText operand A\n           * @param {PlainText} plain PlainText operand B\n           * @param {CipherText} [destination] CipherText destination to store the sum\n           * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n           * @example\n           * const cipherTextA = seal.CipherText()\n           * const plainTextB = seal.PlainText()\n           * // ... after encrypting/encoding some data ...\n           * const resultCipher = evaluator.addPlain(cipherTextA, plainTextB)\n           * // or\n           * const cipherDest = seal.CipherText()\n           * evaluator.addPlain(cipherTextA, plainTextB, cipherDest)\n           */\n          addPlain(\n            encrypted: CipherText,\n            plain: PlainText,\n            destination?: CipherText\n          ): CipherText | void {\n            try {\n              if (destination) {\n                _instance.addPlain(\n                  encrypted.instance,\n                  plain.instance,\n                  destination.instance\n                )\n                return\n              }\n              const temp = CipherText()\n              _instance.addPlain(encrypted.instance, plain.instance, temp.instance)\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Subtracts a PlainText from a CipherText. This function subtracts a PlainText\n           * from a CipherText and stores the result in the destination parameter. The\n           * PlainText must be valid for the current encryption parameters.\n           *\n           * @function\n           * @name Evaluator#subPlain\n           * @param {CipherText} encrypted CipherText operand A\n           * @param {PlainText} plain PlainText operand B\n           * @param {CipherText} [destination] CipherText destination to store the difference\n           * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n           * @example\n           * const cipherTextA = seal.CipherText()\n           * const plainTextB = seal.PlainText()\n           * // ... after encrypting/encoding some data ...\n           * const resultCipher = evaluator.subPlain(cipherTextA, plainTextB)\n           * // or\n           * const cipherDest = seal.CipherText()\n           * evaluator.subPlain(cipherTextA, plainTextB, cipherDest)\n           */\n          subPlain(\n            encrypted: CipherText,\n            plain: PlainText,\n            destination?: CipherText\n          ): CipherText | void {\n            try {\n              if (destination) {\n                _instance.subPlain(\n                  encrypted.instance,\n                  plain.instance,\n                  destination.instance\n                )\n                return\n              }\n              const temp = CipherText()\n              _instance.subPlain(encrypted.instance, plain.instance, temp.instance)\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Multiplies a CipherText with a PlainText. This function multiplies\n           * a CipherText with a PlainText and stores the result in the destination\n           * parameter. The PlainText must be a valid for the current encryption parameters,\n           * and cannot be identially 0. Dynamic memory allocations in the process are\n           * allocated from the memory pool pointed to by the given MemoryPoolHandle.\n           *\n           * @function\n           * @name Evaluator#multiplyPlain\n           * @param {CipherText} encrypted CipherText operand A\n           * @param {PlainText} plain PlainText operand B\n           * @param {CipherText} [destination] CipherText destination to store the product\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {CipherText?} CipherText containing the result or void if a destination was supplied\n           * @example\n           * const cipherTextA = seal.CipherText()\n           * const plainTextB = seal.PlainText()\n           * // ... after encrypting/encoding some data ...\n           * const resultCipher = evaluator.multiplyPlain(cipherTextA, plainTextB)\n           * // or\n           * const cipherDest = seal.CipherText()\n           * evaluator.multiplyPlain(cipherTextA, plainTextB, cipherDest)\n           */\n          multiplyPlain(\n            encrypted: CipherText,\n            plain: PlainText,\n            destination?: CipherText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): CipherText | void {\n            try {\n              if (destination) {\n                _instance.multiplyPlain(\n                  encrypted.instance,\n                  plain.instance,\n                  destination.instance,\n                  pool\n                )\n                return\n              }\n              const temp = CipherText()\n              _instance.multiplyPlain(\n                encrypted.instance,\n                plain.instance,\n                temp.instance,\n                pool\n              )\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Transforms a PlainText to NTT domain. This functions applies the number\n           * Theoretic Transform to a PlainText by first embedding integers modulo the\n           * PlainText modulus to integers modulo the coefficient modulus and then\n           * performing David Harvey's NTT on the resulting polynomial. The transformation\n           * is done with respect to encryption parameters corresponding to a given\n           * parmsId. The result is stored in the destinationNtt parameter. For the\n           * operation to be valid, the PlainText must have degree less than PolyModulusDegree\n           * and each coefficient must be less than the PlainText modulus, i.e., the PlainText\n           * must be a valid PlainText under the current encryption parameters. Dynamic\n           * memory allocations in the process are allocated from the memory pool pointed\n           * to by the given MemoryPoolHandle.\n           *\n           * @function\n           * @name Evaluator#plainTransformToNtt\n           * @param {PlainText} plain PlainText to transform\n           * @param {ParmsIdType} parmsId target parmsId to perform NTT transformation\n           * @param {PlainText} [destinationNtt] PlainText destination to store the transformed result\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {PlainText|void} PlainText containing the result or void if a destination was supplied\n           * @example\n           * const context = seal.Context(encParms, true)\n           * const plainTextA = seal.PlainText()\n           * // ... after encoding some data ...\n           * const parmsId = context.lastParmsId\n           * const resultCipher = evaluator.plainTransformToNtt(plainTextA, parmsId)\n           * // or\n           * const plainDest = seal.PlainText()\n           * evaluator.plainTransformToNtt(plainTextA, parmsId, plainDest)\n           */\n          plainTransformToNtt(\n            plain: PlainText,\n            parmsId: ParmsIdType,\n            destinationNtt?: PlainText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): PlainText | void {\n            try {\n              if (destinationNtt) {\n                _instance.plainTransformToNtt(\n                  plain.instance,\n                  parmsId.instance,\n                  destinationNtt.instance,\n                  pool\n                )\n                return\n              }\n              const temp = PlainText()\n              _instance.plainTransformToNtt(\n                plain.instance,\n                parmsId.instance,\n                temp.instance,\n                pool\n              )\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Transforms a CipherText to NTT domain. This functions applies David Harvey's\n           * number Theoretic Transform separately to each polynomial of a CipherText.\n           * The result is stored in the destinationNtt parameter.\n           *\n           * @function\n           * @name Evaluator#cipherTransformToNtt\n           * @param {CipherText} encrypted CipherText to transform\n           * @param {CipherText} [destinationNtt] CipherText destination to store the transformed result\n           * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n           * @example\n           * const cipherTextA = seal.CipherText()\n           * // ... after encrypting some data ...\n           * const resultCipher = evaluator.cipherTransformToNtt(cipherTextA)\n           * // or\n           * const cipherDest = seal.CipherText()\n           * evaluator.cipherTransformToNtt(cipherTextA, cipherDest)\n           */\n          cipherTransformToNtt(\n            encrypted: CipherText,\n            destinationNtt?: CipherText\n          ): CipherText | void {\n            try {\n              if (destinationNtt) {\n                _instance.cipherTransformToNtt(\n                  encrypted.instance,\n                  destinationNtt.instance\n                )\n                return\n              }\n              const temp = CipherText()\n              _instance.cipherTransformToNtt(encrypted.instance, temp.instance)\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Transforms a CipherText back from NTT domain. This functions applies the\n           * inverse of David Harvey's number Theoretic Transform separately to each\n           * polynomial of a CipherText. The result is stored in the destination parameter.\n           *\n           * @function\n           * @name Evaluator#cipherTransformFromNtt\n           * @param {CipherText} encryptedNtt CipherText to transform\n           * @param {CipherText} [destination] CipherText destination to store the transformed result\n           * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n           * @example\n           * // ... after cipherTransformToNtt ...\n           * const resultCipher = evaluator.cipherTransformFromNtt(cipherTextANtt)\n           * // or\n           * const cipherDest = seal.CipherText()\n           * evaluator.cipherTransformFromNtt(cipherTextANtt, cipherDest)\n           */\n          cipherTransformFromNtt(\n            encryptedNtt: CipherText,\n            destination?: CipherText\n          ): CipherText | void {\n            try {\n              if (destination) {\n                _instance.cipherTransformFromNtt(\n                  encryptedNtt.instance,\n                  destination.instance\n                )\n                return\n              }\n              const temp = CipherText()\n              _instance.cipherTransformFromNtt(encryptedNtt.instance, temp.instance)\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Applies a Galois automorphism to a CipherText and writes the result to the\n           * destination parameter. To evaluate the Galois automorphism, an appropriate\n           * set of Galois keys must also be provided. Dynamic memory allocations in\n           * the process are allocated from the memory pool pointed to by the given\n           * MemoryPoolHandle.\n           *\n           * The desired Galois automorphism is given as a Galois element, and must be\n           * an odd integer in the interval [1, M-1], where M = 2*N, and N = degree(poly_modulus).\n           * Used with batching, a Galois element 3^i % M corresponds to a cyclic row\n           * rotation i steps to the left, and a Galois element 3^(N/2-i) % M corresponds\n           * to a cyclic row rotation i steps to the right. The Galois element M-1 corresponds\n           * to a column rotation (row swap) in BFV, and complex conjugation in CKKS.\n           * In the polynomial view (not batching), a Galois automorphism by a Galois\n           * element p changes Enc(plain(x)) to Enc(plain(x^p)).\n           *\n           * @function\n           * @name Evaluator#applyGalois\n           * @param {CipherText} encrypted CipherText to apply the automorphism\n           * @param {number} galoisElt number representing the Galois element\n           * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n           * @param {CipherText} [destination] CipherText destination to store the result\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n           * @example\n           * ...\n           * const evaluator = seal.Evaluator(context)\n           * const arr = Int32Array.from({ length: encoder.slotCount }, (_, i) => i)\n           * const plain = encoder.encode(arr)\n           * const cipher = encryptor.encrypt(plain)\n           * const cipherDest = seal.CipherText()\n           * const galElt = 2 * parms.polyModulusDegree - 1\n           * evaluator.applyGalois(cipher, galElt, galoisKeys, cipherDest)\n           */\n          applyGalois(\n            encrypted: CipherText,\n            galoisElt: number,\n            galoisKeys: GaloisKeys,\n            destination?: CipherText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): CipherText | void {\n            try {\n              if (destination) {\n                _instance.applyGalois(\n                  encrypted.instance,\n                  galoisElt,\n                  galoisKeys.instance,\n                  destination.instance,\n                  pool\n                )\n                return\n              }\n              const temp = CipherText()\n              _instance.applyGalois(\n                encrypted.instance,\n                galoisElt,\n                galoisKeys.instance,\n                temp.instance,\n                pool\n              )\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Rotates PlainText matrix rows cyclically. When batching is used with the\n           * BFV/BGV scheme, this function rotates the encrypted PlainText matrix rows\n           * cyclically to the left (steps > 0) or to the right (steps < 0) and writes\n           * the result to the destination parameter. Since the size of the batched\n           * matrix is 2-by-(N/2), where N is the degree of the polynomial modulus,\n           * the number of steps to rotate must have absolute value at most N/2-1. Dynamic\n           * memory allocations in the process are allocated from the memory pool pointed\n           * to by the given MemoryPoolHandle.\n           *\n           * @function\n           * @name Evaluator#rotateRows\n           * @param {CipherText} encrypted CipherText to rotate rows\n           * @param {number} steps Int representing steps to rotate (negative = right, positive = left)\n           * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n           * @param {CipherText} [destination] CipherText destination to store the rotated result\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n           * @example\n           * const galoisKeys = keyGenerator.createGaloisKeys()\n           * const cipherTextA = seal.CipherText()\n           * // ... after encrypting some data ...\n           * const resultCipher = evaluator.rotateRows(cipherTextA, 3, galoisKeys)\n           * // or\n           * const cipherDest = seal.CipherText()\n           * evaluator.rotateRows(cipherTextA, 3, galoisKeys, cipherDest)\n           */\n          rotateRows(\n            encrypted: CipherText,\n            steps: number,\n            galoisKeys: GaloisKeys,\n            destination?: CipherText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): CipherText | void {\n            try {\n              if (destination) {\n                _instance.rotateRows(\n                  encrypted.instance,\n                  steps,\n                  galoisKeys.instance,\n                  destination.instance,\n                  pool\n                )\n                return\n              }\n              const temp = CipherText()\n              _instance.rotateRows(\n                encrypted.instance,\n                steps,\n                galoisKeys.instance,\n                temp.instance,\n                pool\n              )\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Rotates PlainText matrix columns cyclically. When batching is used with\n           * the BFV scheme, this function rotates the encrypted PlainText matrix columns\n           * cyclically, and writes the result to the destination parameter. Since the\n           * size of the batched matrix is 2-by-(N/2), where N is the degree of the\n           * polynomial modulus, this means simply swapping the two rows. Dynamic memory\n           * allocations in the process are allocated from the memory pool pointed to\n           * by the given MemoryPoolHandle.\n           *\n           * @function\n           * @name Evaluator#rotateColumns\n           * @param {CipherText} encrypted CipherText to rotate columns\n           * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n           * @param {CipherText} [destination] CipherText destination to store the rotated result\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n           * @example\n           * const galoisKeys = keyGenerator.createGaloisKeys()\n           * const cipherTextA = seal.CipherText()\n           * // ... after encrypting some data ...\n           * const resultCipher = evaluator.rotateColumns(cipherTextA, galoisKeys)\n           * // or\n           * const cipherDest = seal.CipherText()\n           * evaluator.rotateColumns(cipherTextA, galoisKeys, cipherDest)\n           */\n          rotateColumns(\n            encrypted: CipherText,\n            galoisKeys: GaloisKeys,\n            destination?: CipherText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): CipherText | void {\n            try {\n              if (destination) {\n                _instance.rotateColumns(\n                  encrypted.instance,\n                  galoisKeys.instance,\n                  destination.instance,\n                  pool\n                )\n                return\n              }\n              const temp = CipherText()\n              _instance.rotateColumns(\n                encrypted.instance,\n                galoisKeys.instance,\n                temp.instance,\n                pool\n              )\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Rotates PlainText vector cyclically. When using the CKKS scheme, this function\n           * rotates the encrypted PlainText vector cyclically to the left (steps > 0)\n           * or to the right (steps < 0) and writes the result to the destination parameter.\n           * Since the size of the batched matrix is 2-by-(N/2), where N is the degree\n           * of the polynomial modulus, the number of steps to rotate must have absolute\n           * value at most N/2-1. Dynamic memory allocations in the process are allocated\n           * from the memory pool pointed to by the given MemoryPoolHandle.\n           *\n           * @function\n           * @name Evaluator#rotateVector\n           * @param {CipherText} encrypted CipherText to rotate the entire vector\n           * @param {number} steps Int representing steps to rotate (negative = right, positive = left)\n           * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n           * @param {CipherText} [destination] CipherText destination to store the rotated result\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n           * @example\n           * const galoisKeys = keyGenerator.createGaloisKeys()\n           * const cipherTextA = seal.CipherText()\n           * // ... after encrypting some data ...\n           * const resultCipher = evaluator.rotateVector(cipherTextA, 3, galoisKeys)\n           * // or\n           * const cipherDest = seal.CipherText()\n           * evaluator.rotateVector(cipherTextA, 3, galoisKeys, cipherDest)\n           */\n          rotateVector(\n            encrypted: CipherText,\n            steps: number,\n            galoisKeys: GaloisKeys,\n            destination?: CipherText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): CipherText | void {\n            try {\n              if (destination) {\n                _instance.rotateVector(\n                  encrypted.instance,\n                  steps,\n                  galoisKeys.instance,\n                  destination.instance,\n                  pool\n                )\n                return\n              }\n              const temp = CipherText()\n              _instance.rotateVector(\n                encrypted.instance,\n                steps,\n                galoisKeys.instance,\n                temp.instance,\n                pool\n              )\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Complex conjugates PlainText slot values. When using the CKKS scheme, this\n           * function complex conjugates all values in the underlying PlainText, and\n           * writes the result to the destination parameter. Dynamic memory allocations\n           * in the process are allocated from the memory pool pointed to by the given\n           * MemoryPoolHandle.\n           *\n           * @function\n           * @name Evaluator#complexConjugate\n           * @param {CipherText} encrypted CipherText to complex conjugate\n           * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n           * @param {CipherText} [destination] CipherText destination to store the conjugated result\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n           * @example\n           * const galoisKeys = keyGenerator.createGaloisKeys()\n           * const cipherTextA = seal.CipherText()\n           * // ... after encrypting some data ...\n           * const resultCipher = evaluator.complexConjugate(cipherTextA, galoisKeys)\n           * // or\n           * const cipherDest = seal.CipherText()\n           * evaluator.complexConjugate(cipherTextA, galoisKeys, cipherDest)\n           */\n          complexConjugate(\n            encrypted: CipherText,\n            galoisKeys: GaloisKeys,\n            destination?: CipherText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): CipherText | void {\n            try {\n              if (destination) {\n                _instance.complexConjugate(\n                  encrypted.instance,\n                  galoisKeys.instance,\n                  destination.instance,\n                  pool\n                )\n                return\n              }\n              const temp = CipherText()\n              _instance.complexConjugate(\n                encrypted.instance,\n                galoisKeys.instance,\n                temp.instance,\n                pool\n              )\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Sum all elements in the encrypted CipherText. The resulting CipherText contains the sum in every element.\n           *\n           * @function\n           * @name Evaluator#sumElements\n           * @param {CipherText} encrypted CipherText to sum elements\n           * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n           * @param {SchemeType} scheme Scheme that was used for encryption\n           * @param {CipherText} [destination] CipherText destination to store the result\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n           * @example\n           * const galoisKeys = keyGenerator.createGaloisKeys()\n           * const cipherTextA = seal.CipherText()\n           * // ... after encrypting some data ...\n           * const resultCipher = evaluator.sumElements(cipherTextA, galoisKeys, seal.SchemeTypes.BFV)\n           * // or\n           * const cipherDest = seal.CipherText()\n           * evaluator.sumElements(cipherTextA, galoisKeys, seal.SchemeTypes.BFV, cipherDest)\n           */\n          sumElements(\n            encrypted: CipherText,\n            galoisKeys: GaloisKeys,\n            scheme: SchemeType,\n            destination?: CipherText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): CipherText | void {\n            try {\n              if (destination) {\n                _instance.sumElements(\n                  encrypted.instance,\n                  galoisKeys.instance,\n                  scheme,\n                  destination.instance,\n                  pool\n                )\n                return\n              }\n\n              const newDest = CipherText()\n              _instance.sumElements(\n                encrypted.instance,\n                galoisKeys.instance,\n                scheme,\n                newDest.instance,\n                pool\n              )\n              return newDest\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Perform the dot product (A.B) of two CipherTexts The resulting CipherText contains the dot product in every\n           * element.\n           *\n           * @function\n           * @name Evaluator#dotProduct\n           * @param {CipherText} a CipherText operand A\n           * @param {CipherText} b CipherText operand B\n           * @param {RelinKeys} relinKeys RelinKeys used to perform relinearization after multiplication\n           * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n           * @param {SchemeType} scheme Scheme that was used for encryption\n           * @param {CipherText} [destination] CipherText destination to store the result\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n           * @example\n           * const relinKeys = keyGenerator.createRelinKeys()\n           * const galoisKeys = keyGenerator.createGaloisKeys()\n           * const cipherTextA = seal.CipherText()\n           * const cipherTextB = seal.CipherText()\n           * // ... after encrypting some data ...\n           * const resultCipher = evaluator.dotProduct(cipherTextA, cipherTextB, relinKeys, galoisKeys, seal.SchemeTypes.BFV)\n           * // or\n           * const cipherDest = seal.CipherText()\n           * evaluator.dotProduct(cipherTextA, cipherTextB, relinKeys, galoisKeys, seal.SchemeTypes.BFV, cipherDest)\n           */\n          dotProduct(\n            a: CipherText,\n            b: CipherText,\n            relinKeys: RelinKeys,\n            galoisKeys: GaloisKeys,\n            scheme: SchemeType,\n            destination?: CipherText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): CipherText | void {\n            try {\n              if (destination) {\n                _instance.multiply(\n                  a.instance,\n                  b.instance,\n                  destination.instance,\n                  pool\n                )\n                _instance.relinearize(\n                  destination.instance,\n                  relinKeys.instance,\n                  destination.instance,\n                  pool\n                )\n                _instance.sumElements(\n                  destination.instance,\n                  galoisKeys.instance,\n                  scheme,\n                  destination.instance,\n                  pool\n                )\n                return\n              }\n\n              const newDest = CipherText()\n              _instance.multiply(a.instance, b.instance, newDest.instance, pool)\n              _instance.relinearize(\n                newDest.instance,\n                relinKeys.instance,\n                newDest.instance,\n                pool\n              )\n              _instance.sumElements(\n                newDest.instance,\n                galoisKeys.instance,\n                scheme,\n                newDest.instance,\n                pool\n              )\n              return newDest\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Perform the dot product (A.B) of CipherText (A) and PlainText (B). The resulting CipherText contains the dot\n           * product in every element.\n           *\n           * @function\n           * @name Evaluator#dotProductPlain\n           * @param {CipherText} a CipherText operand A\n           * @param {PlainText} b PlainText operand B\n           * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n           * @param {SchemeType} scheme Scheme that was used for encryption\n           * @param {CipherText} [destination] CipherText destination to store the result\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n           * @example\n           * const galoisKeys = keyGenerator.createGaloisKeys()\n           * const cipherTextA = seal.CipherText()\n           * const plainTextB = seal.PlainText()\n           * // ... after encoding / encrypting some data ...\n           * const resultCipher = evaluator.dotProductPlain(cipherTextA, plainTextB, galoisKeys, seal.SchemeTypes.BFV)\n           * // or\n           * const cipherDest = seal.CipherText()\n           * evaluator.dotProductPlain(cipherTextA, plainTextB, galoisKeys, seal.SchemeTypes.BFV, cipherDest)\n           */\n          dotProductPlain(\n            a: CipherText,\n            b: PlainText,\n            galoisKeys: GaloisKeys,\n            scheme: SchemeType,\n            destination?: CipherText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): CipherText | void {\n            try {\n              if (destination) {\n                _instance.multiplyPlain(\n                  a.instance,\n                  b.instance,\n                  destination.instance,\n                  pool\n                )\n                _instance.sumElements(\n                  destination.instance,\n                  galoisKeys.instance,\n                  scheme,\n                  destination.instance,\n                  pool\n                )\n                return\n              }\n\n              const newDest = CipherText()\n              _instance.multiplyPlain(\n                a.instance,\n                b.instance,\n                newDest.instance,\n                pool\n              )\n              _instance.sumElements(\n                newDest.instance,\n                galoisKeys.instance,\n                scheme,\n                newDest.instance,\n                pool\n              )\n              return newDest\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          }\n        }\n      }\n\nexport const EvaluatorInit = ({\n  loader\n}: LoaderOptions): EvaluatorDependencies => {\n  const library: Library = loader.library\n  return EvaluatorConstructor(library)\n}\n","import { LoaderOptions, Library } from './seal'\n\nexport type ExceptionDependencies = {\n  (): ExceptionConstructorOptions\n}\n\nexport type ExceptionConstructorOptions = {\n  (): Exception\n}\n\nexport type SealError = number | Error | string\n\nexport type Exception = {\n  readonly safe: (e: SealError) => Error\n}\n\nconst ExceptionConstructor =\n  (library: Library): ExceptionDependencies =>\n    (): ExceptionConstructorOptions =>\n      (): Exception => {\n        // Static methods\n        const _getException = library.getException\n\n        /**\n         * @implements Exception\n         */\n\n        /**\n         * @interface Exception\n         */\n        return {\n          /**\n           * Takes a caught exception in SEAL library and gets a safe error string\n           *\n           * @function\n           * @name Exception.safe\n           * @param {(number|Error|string)} error Unsafe error to normalize\n           * @returns {Error}\n           */\n          safe(error: number | Error | string): Error {\n            if (typeof error === 'number') {\n              return new Error(_getException(error))\n            }\n\n            if (error instanceof Error) {\n              return error\n            }\n            return new Error(error || 'Unknown Error!')\n          }\n        }\n      }\n\nexport const ExceptionInit = ({\n  loader\n}: LoaderOptions): ExceptionDependencies => {\n  const library: Library = loader.library\n  return ExceptionConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\n\nexport type GaloisKeysDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type GaloisKeysDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: GaloisKeysDependencyOptions): GaloisKeysConstructorOptions\n}\n\nexport type GaloisKeysConstructorOptions = {\n  (): GaloisKeys\n}\n\nexport type GaloisKeys = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly size: number\n  readonly getIndex: (galoisElt: number) => number\n  readonly hasKey: (galoisElt: number) => boolean\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (key: GaloisKeys) => void\n  readonly clone: () => GaloisKeys\n  readonly move: (key: GaloisKeys) => void\n}\n\nconst GaloisKeysConstructor =\n  (library: Library): GaloisKeysDependencies =>\n    ({\n      Exception,\n      ComprModeType,\n      Vector\n    }: GaloisKeysDependencyOptions): GaloisKeysConstructorOptions =>\n      (): GaloisKeys => {\n        const Constructor = library.GaloisKeys\n        let _instance = new Constructor()\n\n        /**\n         * @implements GaloisKeys\n         */\n\n        /**\n         * @interface GaloisKeys\n         */\n        return {\n          /**\n           * Get the underlying WASM instance\n           *\n           * @private\n           * @readonly\n           * @name GaloisKeys#instance\n           * @type {Instance}\n           */\n          get instance() {\n            return _instance\n          },\n\n          /**\n           * Inject this object with a raw WASM instance\n           *\n           * @private\n           * @function\n           * @name GaloisKeys#inject\n           * @param {Instance} instance WASM instance\n           */\n          inject(instance: Instance) {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n            _instance = new Constructor(instance)\n            instance.delete()\n          },\n\n          /**\n           * Delete the underlying WASM instance.\n           *\n           * Should be called before dereferencing this object to prevent the\n           * WASM heap from growing indefinitely.\n           * @function\n           * @name GaloisKeys#delete\n           */\n          delete() {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n          },\n\n          /**\n           * Returns the current number of keyswitching keys. Only keys that are\n           * non-empty are counted.\n           *\n           * @readonly\n           * @name GaloisKeys#size\n           * @type {number}\n           */\n          get size() {\n            return _instance.size()\n          },\n\n          /**\n           * Returns the index of a Galois key in the backing KSwitchKeys instance that\n           * corresponds to the given Galois element, assuming that it exists in the\n           * backing KSwitchKeys.\n           *\n           * @function\n           * @name GaloisKeys#getIndex\n           * @param {number} galoisElt The Galois element\n           * @returns {number} The index of the galois element\n           */\n          getIndex(galoisElt: number): number {\n            try {\n              return _instance.getIndex(galoisElt)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Returns whether a Galois key corresponding to a given Galois element exists.\n           *\n           * @function\n           * @name GaloisKeys#hasKey\n           * @param {number} galoisElt The Galois element\n           * @returns {boolean} True if the key exists\n           */\n          hasKey(galoisElt: number): boolean {\n            try {\n              return _instance.hasKey(galoisElt)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n          /**\n           * Save the Encryption Parameters to a base64 string\n           *\n           * @function\n           * @name GaloisKeys#save\n           * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n           * @returns {string} Base64 encoded string\n           */\n          save(compression: ComprModeType = ComprModeType.zstd): string {\n            try {\n              return _instance.saveToString(compression)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Save the GaloisKeys as a binary Uint8Array\n           *\n           * @function\n           * @name GaloisKeys#saveArray\n           * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n           * @returns {Uint8Array} A byte array containing the GaloisKeys in binary form\n           */\n          saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n            const tempVect = Vector()\n            const instance = _instance.saveToArray(compression)\n            tempVect.unsafeInject(instance)\n            tempVect.setType('Uint8Array')\n            const tempArr = tempVect.toArray() as Uint8Array\n            tempVect.delete()\n            return tempArr\n          },\n\n          /**\n           * Load a GaloisKeys from a base64 string\n           *\n           * @function\n           * @name GaloisKeys#load\n           * @param {Context} context Encryption context to enforce\n           * @param {string} encoded Base64 encoded string\n           */\n          load(context: Context, encoded: string) {\n            try {\n              _instance.loadFromString(context.instance, encoded)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Load a GaloisKeys from an Uint8Array holding binary data\n           *\n           * @function\n           * @name GaloisKeys#loadArray\n           * @param {Context} context Encryption context to enforce\n           * @param {Uint8Array} array TypedArray containing binary data\n           */\n          loadArray(context: Context, array: Uint8Array) {\n            try {\n              _instance.loadFromArray(context.instance, array)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Copy an existing GaloisKeys and overwrite this instance\n           *\n           * @function\n           * @name GaloisKeys#copy\n           * @param {GaloisKeys} key GaloisKeys to copy\n           * @example\n           * const keyA = keyGenerator.createGaloisKeys()\n           * const keyB = seal.GaloisKeys()\n           * keyB.copy(keyA)\n           * // keyB holds a copy of keyA\n           */\n          copy(key: GaloisKeys) {\n            try {\n              _instance.copy(key.instance)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Clone and return a new instance of this GaloisKeys\n           *\n           * @function\n           * @name GaloisKeys#clone\n           * @returns {GaloisKeys}\n           * @example\n           * const keyA = keyGenerator.createGaloisKeys()\n           * const keyB = keyA.clone()\n           * // keyB holds a copy of keyA\n           */\n          clone(): GaloisKeys {\n            try {\n              const clonedInstance = _instance.clone()\n              const key = GaloisKeysConstructor(library)({\n                Exception,\n                ComprModeType,\n                Vector\n              })()\n              key.inject(clonedInstance)\n              return key\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Move a GaloisKeys into this one and delete the old reference\n           *\n           * @function\n           * @name GaloisKeys#move\n           * @param {GaloisKeys} key GaloisKeys to move\n           * @example\n           * const keyA = keyGenerator.createGaloisKeys()\n           * const keyB = seal.GaloisKeys()\n           * keyB.move(keyA)\n           * // keyB holds a the instance of keyA.\n           * // keyA no longer holds an instance\n           */\n          move(key: GaloisKeys) {\n            try {\n              _instance.move(key.instance)\n              // TODO: find optimization\n              // This method results in a copy instead of a real move.\n              // Therefore, we need to delete the old instance.\n              key.delete()\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          }\n        }\n      }\n\nexport const GaloisKeysInit = ({\n  loader\n}: LoaderOptions): GaloisKeysDependencies => {\n  const library: Library = loader.library\n  return GaloisKeysConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { Context } from './context'\nimport { SecretKey, SecretKeyConstructorOptions } from './secret-key'\nimport { RelinKeys, RelinKeysConstructorOptions } from './relin-keys'\nimport { Serializable, SerializableConstructorOptions } from './serializable'\nimport { PublicKey, PublicKeyConstructorOptions } from './public-key'\nimport { GaloisKeys, GaloisKeysConstructorOptions } from './galois-keys'\n\nexport type KeyGeneratorDependencyOptions = {\n  readonly Exception: Exception\n  readonly PublicKey: PublicKeyConstructorOptions\n  readonly SecretKey: SecretKeyConstructorOptions\n  readonly RelinKeys: RelinKeysConstructorOptions\n  readonly GaloisKeys: GaloisKeysConstructorOptions\n  readonly Serializable: SerializableConstructorOptions\n}\n\nexport type KeyGeneratorDependencies = {\n  ({\n    Exception,\n    PublicKey,\n    SecretKey,\n    RelinKeys,\n    GaloisKeys,\n    Serializable\n  }: KeyGeneratorDependencyOptions): KeyGeneratorConstructorOptions\n}\n\nexport type KeyGeneratorConstructorOptions = {\n  (context: Context, secretKey?: SecretKey): KeyGenerator\n}\n\nexport type KeyGenerator = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly secretKey: () => SecretKey\n  readonly createPublicKeySerializable: () => Serializable\n  readonly createPublicKey: () => PublicKey\n  readonly createRelinKeysSerializable: () => Serializable\n  readonly createRelinKeys: () => RelinKeys\n  readonly createGaloisKeysSerializable: (steps?: Int32Array) => Serializable\n  readonly createGaloisKeys: (steps?: Int32Array) => GaloisKeys\n}\n\nconst KeyGeneratorConstructor =\n  (library: Library): KeyGeneratorDependencies =>\n    ({\n      Exception,\n      PublicKey,\n      SecretKey,\n      RelinKeys,\n      GaloisKeys,\n      Serializable\n    }: KeyGeneratorDependencyOptions): KeyGeneratorConstructorOptions =>\n      (context, secretKey): KeyGenerator => {\n        const Constructor = library.KeyGenerator\n        let _instance = constructInstance(context, secretKey)\n\n        function constructInstance(context: Context, secretKey?: SecretKey) {\n          try {\n            if (secretKey) {\n              return new Constructor(context.instance, secretKey.instance)\n            }\n            return new Constructor(context.instance)\n          } catch (e) {\n            throw Exception.safe(e as SealError)\n          }\n        }\n        /**\n         * @implements KeyGenerator\n         */\n\n        /**\n         * @interface KeyGenerator\n         */\n        return {\n          /**\n           * Get the underlying WASM instance\n           *\n           * @private\n           * @readonly\n           * @name KeyGenerator#instance\n           * @type {Instance}\n           */\n          get instance() {\n            return _instance\n          },\n\n          /**\n           * Inject this object with a raw WASM instance. No type checking is performed.\n           *\n           * @private\n           * @function\n           * @name KeyGenerator#unsafeInject\n           * @param {Instance} instance WASM instance\n           */\n          unsafeInject(instance: Instance) {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n            _instance = instance\n          },\n\n          /**\n           * Delete the underlying WASM instance.\n           *\n           * Should be called before dereferencing this object to prevent the\n           * WASM heap from growing indefinitely.\n           * @function\n           * @name KeyGenerator#delete\n           */\n          delete() {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n          },\n\n          /**\n           * Return the generated SecretKey\n           *\n           * @function\n           * @name KeyGenerator#secretKey\n           * @returns {SecretKey} The secret key that was generated upon instantiation of this KeyGenerator\n           */\n          secretKey(): SecretKey {\n            try {\n              const key = SecretKey()\n              const instance = _instance.secretKey()\n              key.inject(instance)\n              return key\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Create a new PublicKey instance\n           *\n           * @function\n           * @name KeyGenerator#createPublicKey\n           * @returns {PublicKey} A new PublicKey instance\n           */\n          createPublicKey(): PublicKey {\n            try {\n              const key = PublicKey()\n              _instance.createPublicKey(key.instance)\n              return key\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Create a new, Serializable PublicKey instance\n           *\n           * @function\n           * @name KeyGenerator#createPublicKeySerializable\n           * @returns {Serializable<PublicKey>} A new, serializable, PublicKey instance\n           */\n          createPublicKeySerializable(): Serializable {\n            try {\n              const serialized = Serializable()\n              const instance = _instance.createPublicKeySerializable()\n              serialized.unsafeInject(instance)\n              return serialized\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Generates and returns relinearization keys. This function returns\n           * relinearization keys in a fully expanded form and is meant to be used\n           * primarily for demo, testing, and debugging purposes.\n           *\n           * @function\n           * @name KeyGenerator#createRelinKeys\n           * @returns {RelinKeys} New RelinKeys from the KeyGenerator's internal secret key\n           */\n          createRelinKeys(): RelinKeys {\n            try {\n              const keys = RelinKeys()\n              _instance.createRelinKeys(keys.instance)\n              return keys\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Generates and returns relinearization keys as a serializable object.\n           *\n           * Half of the key data is pseudo-randomly generated from a seed to reduce\n           * the object size. The resulting serializable object cannot be used\n           * directly and is meant to be serialized for the size reduction to have an\n           * impact.\n           *\n           *\n           * @function\n           * @name KeyGenerator#createRelinKeysSerializable\n           * @returns {Serializable<RelinKeys>} New, serializable RelinKeys from the KeyGenerator's internal secret key\n           */\n          createRelinKeysSerializable(): Serializable {\n            try {\n              const serialized = Serializable()\n              const instance = _instance.createRelinKeysSerializable()\n              serialized.unsafeInject(instance)\n              return serialized\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Generates and returns Galois keys. This function returns Galois keys in\n           * a fully expanded form and is meant to be used primarily for demo, testing,\n           * and debugging purposes. The user can optionally give an input a vector of desired\n           * Galois rotation step counts, where negative step counts correspond to\n           * rotations to the right and positive step counts correspond to rotations to\n           * the left. A step count of zero can be used to indicate a column rotation\n           * in the BFV scheme complex conjugation in the CKKS scheme.\n           *\n           * @function\n           * @name KeyGenerator#createGaloisKeys\n           * @param {Int32Array} [steps=Int32Array.from([])] Specific Galois Elements to generate\n           * @returns {GaloisKeys} New GaloisKeys from the KeyGenerator's internal secret key\n           */\n          createGaloisKeys(steps: Int32Array = Int32Array.from([])): GaloisKeys {\n            try {\n              const keys = GaloisKeys()\n              _instance.createGaloisKeys(steps, keys.instance)\n              return keys\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Generates and returns Galois keys as a serializable object. This function\n           * creates specific Galois keys that can be used to apply specific Galois\n           * automorphisms on encrypted data. The user can optionally give an input a vector\n           * of desired Galois rotation step counts, where negative step counts\n           * correspond to rotations to the right and positive step counts correspond\n           * to rotations to the left. A step count of zero can be used to indicate\n           * a column rotation in the BFV scheme complex conjugation in the CKKS scheme.\n           * Half of the key data is pseudo-randomly generated from a seed to reduce\n           * the object size. The resulting serializable object cannot be used\n           * directly and is meant to be serialized for the size reduction to have an\n           * impact.\n           *\n           * @function\n           * @name KeyGenerator#createGaloisKeysSerializable\n           * @param {Int32Array} [steps=Int32Array.from([])] Specific Galois Elements to generate\n           * @returns {Serializable<GaloisKeys>} Base64 encoded string\n           */\n          createGaloisKeysSerializable(\n            steps: Int32Array = Int32Array.from([])\n          ): Serializable {\n            try {\n              const serialized = Serializable()\n              const instance = _instance.createGaloisKeysSerializable(steps)\n              serialized.unsafeInject(instance)\n              return serialized\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          }\n        }\n      }\n\nexport const KeyGeneratorInit = ({\n  loader\n}: LoaderOptions): KeyGeneratorDependencies => {\n  const library: Library = loader.library\n  return KeyGeneratorConstructor(library)\n}\n","import { LoaderOptions, Library } from './seal'\n\nexport type MemoryPoolHandleDependencies = {\n  (): MemoryPoolHandleConstructorOptions\n}\n\nexport type MemoryPoolHandleConstructorOptions = {\n  (): MemoryPoolHandle\n}\n\nexport type MemoryPoolHandle = {\n  readonly global: any\n  readonly threadLocal: any\n}\n\nconst MemoryPoolHandleConstructor =\n  (library: Library): MemoryPoolHandleDependencies =>\n    (): MemoryPoolHandleConstructorOptions =>\n      (): MemoryPoolHandle => {\n        // Static methods\n        const _global = library.MemoryPoolHandle.MemoryPoolHandleGlobal\n        const _threadLocal = library.MemoryPoolHandle.MemoryPoolHandleThreadLocal\n\n        /**\n         * @implements MemoryPoolHandle\n         */\n\n        /**\n         * @interface MemoryPoolHandle\n         */\n        return {\n          /**\n           * The MemoryPoolHandle pointing to the global memory pool.\n           *\n           * @readonly\n           * @name MemoryPoolHandle.global\n           * @type {MemoryPoolHandle.global}\n           */\n          get global() {\n            /**\n             * @typedef {MemoryPoolHandle.global} MemoryPoolHandle.global\n             */\n            return _global()\n          },\n\n          /**\n           * The MemoryPoolHandle pointing to the thread-local memory pool.\n           *\n           * @readonly\n           * @name MemoryPoolHandle.threadLocal\n           * @type {MemoryPoolHandle.threadLocal}\n           */\n          get threadLocal() {\n            /**\n             * @typedef {MemoryPoolHandle.threadLocal} MemoryPoolHandle.threadLocal\n             */\n            return _threadLocal()\n          }\n        }\n      }\n\nexport const MemoryPoolHandleInit = ({\n  loader\n}: LoaderOptions): MemoryPoolHandleDependencies => {\n  const library: Library = loader.library\n  return MemoryPoolHandleConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { ComprModeType } from './compr-mode-type'\n\nexport type ModulusDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type ModulusDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: ModulusDependencyOptions): ModulusConstructorOptions\n}\n\nexport type ModulusConstructorOptions = {\n  (value: BigInt): Modulus\n}\n\nexport type Modulus = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly setValue: (value: BigInt) => void\n  readonly value: BigInt\n  readonly bitCount: number\n  readonly isZero: boolean\n  readonly isPrime: boolean\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (encoded: string) => void\n  readonly loadArray: (array: Uint8Array) => void\n}\n\nconst ModulusConstructor =\n  (library: Library): ModulusDependencies =>\n    ({\n      Exception,\n      ComprModeType,\n      Vector\n    }: ModulusDependencyOptions): ModulusConstructorOptions =>\n      (value: BigInt): Modulus => {\n        // Static methods\n        const Constructor = library.Modulus\n\n        let _instance = createModulus(value)\n\n        function createModulus(value: BigInt) {\n          try {\n            const inst = new Constructor()\n            inst.setValue(value.toString())\n            return inst\n          } catch (e) {\n            throw Exception.safe(e as SealError)\n          }\n        }\n\n        /**\n         * @implements Modulus\n         */\n\n        /**\n         * @interface Modulus\n         */\n        return {\n          /**\n           * Get the underlying WASM instance\n           *\n           * @private\n           * @readonly\n           * @name Modulus#instance\n           * @type {Instance}\n           */\n          get instance() {\n            return _instance\n          },\n\n          /**\n           * Inject this object with a raw WASM instance\n           *\n           * @private\n           * @function\n           * @name Modulus#inject\n           * @param {Instance} instance WASM instance\n           */\n          inject(instance: Instance) {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n            _instance = new Constructor(instance)\n            instance.delete()\n          },\n\n          /**\n           * Delete the underlying WASM instance.\n           *\n           * Should be called before dereferencing this object to prevent the\n           * WASM heap from growing indefinitely.\n           * @function\n           * @name Modulus#delete\n           */\n          delete() {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n          },\n\n          /**\n           * Loads a Modulus from a string representing an uint64 value.\n           *\n           * @function\n           * @name Modulus#setValue\n           * @param {BigInt} value BigInt value to set\n           */\n          setValue(value: BigInt) {\n            try {\n              _instance.setValue(value.toString())\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * The value of the current Modulus as a BigInt.\n           *\n           * @readonly\n           * @name Modulus#value\n           * @type {BigInt}\n           */\n          get value() {\n            // eslint-disable-next-line no-undef\n            return BigInt(_instance.value())\n          },\n\n          /**\n           * The significant bit count of the value of the current Modulus.\n           *\n           * @readonly\n           * @name Modulus#bitCount\n           * @type {number}\n           */\n          get bitCount() {\n            return _instance.bitCount()\n          },\n\n          /**\n           * Whether the value of the current Modulus is zero.\n           *\n           * @readonly\n           * @name Modulus#isZero\n           * @type {boolean}\n           */\n          get isZero() {\n            return _instance.isZero()\n          },\n\n          /**\n           * Whether the value of the current Modulus is a prime number.\n           *\n           * @readonly\n           * @name Modulus#isPrime\n           * @type {boolean}\n           */\n          get isPrime() {\n            return _instance.isPrime()\n          },\n\n          /**\n           * Save the Modulus as a base64 string\n           *\n           * @function\n           * @name Modulus#save\n           * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n           * @returns {string} Base64 encoded string\n           */\n          save(compression: ComprModeType = ComprModeType.zstd): string {\n            return _instance.saveToString(compression)\n          },\n\n          /**\n           * Save the Modulus as a binary Uint8Array\n           *\n           * @function\n           * @name Modulus#saveArray\n           * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n           * @returns {Uint8Array} A byte array containing the Modulus in binary form\n           */\n          saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n            const tempVect = Vector()\n            const instance = _instance.saveToArray(compression)\n            tempVect.unsafeInject(instance)\n            tempVect.setType('Uint8Array')\n            const tempArr = tempVect.toArray() as Uint8Array\n            tempVect.delete()\n            return tempArr\n          },\n\n          /**\n           * Load a Modulus from a base64 string\n           *\n           * @function\n           * @name Modulus#load\n           * @param {string} encoded Base64 encoded string\n           */\n          load(encoded: string) {\n            try {\n              _instance.loadFromString(encoded)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Load a Modulus from an Uint8Array holding binary data\n           *\n           * @function\n           * @name Modulus#loadArray\n           * @param {Uint8Array} array TypedArray containing binary data\n           */\n          loadArray(array: Uint8Array) {\n            try {\n              _instance.loadFromArray(array)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          }\n        }\n      }\n\nexport const ModulusInit = ({ loader }: LoaderOptions): ModulusDependencies => {\n  const library: Library = loader.library\n  return ModulusConstructor(library)\n}\n","import { LoaderOptions, Instance, Library } from './seal'\nimport { Exception, SealError } from './exception'\n\nexport type ParmsIdTypeDependencyOptions = {\n  readonly Exception: Exception\n}\n\nexport type ParmsIdTypeDependencies = {\n  ({ Exception }: ParmsIdTypeDependencyOptions): ParmsIdTypeConstructorOptions\n}\n\nexport type ParmsIdTypeConstructorOptions = {\n  (): ParmsIdType\n}\n\nexport type ParmsIdType = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly values: BigUint64Array\n}\n\nconst ParmsIdTypeConstructor =\n  (library: Library): ParmsIdTypeDependencies =>\n    ({\n      Exception\n    }: ParmsIdTypeDependencyOptions): ParmsIdTypeConstructorOptions =>\n      (): ParmsIdType => {\n        const Constructor = library.ParmsIdType\n\n        let _instance: Instance\n\n        /**\n         * @implements ParmsIdType\n         */\n\n        /**\n         * @interface ParmsIdType\n         */\n        return {\n          /**\n           * Get the underlying WASM instance\n           *\n           * @private\n           * @readonly\n           * @name ParmsIdType#instance\n           * @type {Instance}\n           */\n          get instance() {\n            return _instance\n          },\n\n          /**\n           * Inject this object with a raw WASM instance\n           *\n           * @private\n           * @function\n           * @name ParmsIdType#inject\n           * @param {Instance} instance WASM instance\n           */\n          inject(instance: Instance) {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n            _instance = new Constructor(instance)\n            instance.delete()\n          },\n\n          /**\n           * Delete the underlying WASM instance.\n           *\n           * Should be called before dereferencing this object to prevent the\n           * WASM heap from growing indefinitely.\n           * @function\n           * @name ParmsIdType#delete\n           */\n          delete() {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n          },\n\n          /**\n           * The values of the current ParmsIdType as an Array of BigInts.\n           *\n           * @readonly\n           * @name ParmsIdType#values\n           * @type {BigUint64Array}\n           */\n          get values() {\n            try {\n              const instance = _instance.values()\n              return BigUint64Array.from(instance)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          }\n        }\n      }\n\nexport const ParmsIdTypeInit = ({\n  loader\n}: LoaderOptions): ParmsIdTypeDependencies => {\n  const library: Library = loader.library\n  return ParmsIdTypeConstructor(library)\n}\n","import { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\nimport { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\nimport { VectorConstructorOptions } from './vector'\nimport { INVALID_PLAIN_CONSRUCTOR_OPTIONS } from './constants'\nexport type PlainTextDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type PlainTextDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    ParmsIdType,\n    MemoryPoolHandle,\n    Vector\n  }: PlainTextDependencyOptions): PlainTextConstructorOptions\n}\n\nexport type PlainTextConstructorOptions = {\n  ({\n    capacity,\n    coeffCount,\n    pool\n  }?: {\n    capacity?: number\n    coeffCount?: number\n    pool?: MemoryPoolHandle\n  }): PlainText\n}\n\nexport type PlainText = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly reserve: (capacity: number) => void\n  readonly shrinkToFit: () => void\n  readonly release: () => void\n  readonly resize: (coeffCount: number) => void\n  readonly setZero: () => void\n  readonly isZero: boolean\n  readonly capacity: number\n  readonly coeffCount: number\n  readonly significantCoeffCount: number\n  readonly nonzeroCoeffCount: number\n  readonly toPolynomial: () => string\n  readonly isNttForm: boolean\n  readonly parmsId: ParmsIdType\n  readonly scale: number\n  readonly setScale: (scale: number) => void\n  readonly pool: MemoryPoolHandle\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (plain: PlainText) => void\n  readonly clone: () => PlainText\n  readonly move: (plain: PlainText) => void\n}\n\nconst PlainTextConstructor =\n  (library: Library): PlainTextDependencies =>\n    ({\n      Exception,\n      ComprModeType,\n      ParmsIdType,\n      MemoryPoolHandle,\n      Vector\n    }: PlainTextDependencyOptions): PlainTextConstructorOptions =>\n      ({\n        capacity,\n        coeffCount,\n        pool = MemoryPoolHandle.global\n      } = {}): PlainText => {\n        // Static methods\n        const Constructor = library.Plaintext\n\n        let _instance = construct({\n          capacity,\n          coeffCount,\n          pool\n        })\n\n        function construct({\n          capacity,\n          coeffCount,\n          pool = MemoryPoolHandle.global\n        }: {\n          capacity?: number\n          coeffCount?: number\n          pool?: MemoryPoolHandle\n        }) {\n          try {\n            if (capacity === undefined && coeffCount === undefined) {\n              return new Constructor(pool)\n            } else if (capacity === undefined && coeffCount !== undefined) {\n              return new Constructor(coeffCount, pool)\n            } else if (capacity !== undefined && coeffCount !== undefined) {\n              return new Constructor(capacity, coeffCount, pool)\n            } else {\n              throw new Error(INVALID_PLAIN_CONSRUCTOR_OPTIONS)\n            }\n          } catch (e) {\n            throw Exception.safe(e as SealError)\n          }\n        }\n        /**\n         * @implements PlainText\n         */\n\n        /**\n         * @interface PlainText\n         */\n        return {\n          /**\n           * Get the underlying WASM instance\n           *\n           * @private\n           * @readonly\n           * @name PlainText#instance\n           * @type {Instance}\n           */\n          get instance() {\n            return _instance\n          },\n\n          /**\n           * Inject this object with a raw WASM instance. No type checking is performed.\n           *\n           * @private\n           * @function\n           * @name PlainText#unsafeInject\n           * @param {Instance} instance WASM instance\n           */\n          unsafeInject(instance: Instance) {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n            _instance = instance\n          },\n\n          /**\n           * Delete the underlying WASM instance.\n           *\n           * Should be called before dereferencing this object to prevent the\n           * WASM heap from growing indefinitely.\n           * @function\n           * @name PlainText#delete\n           */\n          delete() {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n          },\n\n          /**\n           * Allocates enough memory to accommodate the backing array of a plaintext\n           * with given capacity.\n           *\n           * @function\n           * @name PlainText#reserve\n           * @param {number} capacity The capacity to reserve\n           */\n          reserve(capacity: number) {\n            try {\n              return _instance.reserve(capacity)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Allocates enough memory to accommodate the backing array of the current\n           * PlainText and copies it over to the new location. This function is meant\n           * to reduce the memory use of the PlainText to smallest possible and can be\n           * particularly important after modulus switching.\n           *\n           * @function\n           * @name PlainText#shrinkToFit\n           */\n          shrinkToFit() {\n            _instance.shrinkToFit()\n          },\n\n          /**\n           * Resets the PlainText. This function releases any memory allocated by the\n           * PlainText, returning it to the memory pool.\n           *\n           * @function\n           * @name PlainText#release\n           */\n          release() {\n            _instance.release()\n          },\n\n          /**\n           * Resizes the PlainText to have a given coefficient count. The PlainText\n           * is automatically reallocated if the new coefficient count does not fit in\n           * the current capacity.\n           *\n           * @function\n           * @name PlainText#resize\n           * @param {number} coeffCount The number of coefficients in the plaintext polynomial\n           */\n          resize(coeffCount: number) {\n            try {\n              _instance.resize(coeffCount)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Sets the PlainText polynomial to zero.\n           *\n           * @function\n           * @name PlainText#setZero\n           */\n          setZero() {\n            _instance.setZero()\n          },\n\n          /**\n           * Whether the current PlainText polynomial has all zero coefficients.\n           *\n           * @readonly\n           * @name PlainText#isZero\n           * @type {boolean}\n           */\n          get isZero() {\n            return _instance.isZero()\n          },\n\n          /**\n           * The capacity of the current allocation.\n           *\n           * @readonly\n           * @name PlainText#capacity\n           * @type {number}\n           */\n          get capacity() {\n            return _instance.capacity()\n          },\n\n          /**\n           * The coefficient count of the current PlainText polynomial.\n           *\n           * @readonly\n           * @name PlainText#coeffCount\n           * @type {number}\n           */\n          get coeffCount() {\n            return _instance.coeffCount()\n          },\n\n          /**\n           * The significant coefficient count of the current PlainText polynomial.\n           *\n           * @readonly\n           * @name PlainText#significantCoeffCount\n           * @type {number}\n           */\n          get significantCoeffCount() {\n            return _instance.significantCoeffCount()\n          },\n\n          /**\n           * Returns the non-zero coefficient count of the current PlainText polynomial.\n           *\n           * @readonly\n           * @name PlainText#nonzeroCoeffCount\n           * @type {number}\n           */\n          get nonzeroCoeffCount() {\n            return _instance.nonzeroCoeffCount()\n          },\n\n          /**\n           * Returns a human-readable string description of the PlainText polynomial.\n           *\n           * The returned string is of the form \"7FFx^3 + 1x^1 + 3\" with a format\n           * summarized by the following:\n           * 1. Terms are listed in order of strictly decreasing exponent\n           * 2. Coefficient values are non-negative and in hexadecimal format (hexadecimal\n           * letters are in upper-case)\n           * 3. Exponents are positive and in decimal format\n           * 4. Zero coefficient terms (including the constant term) are omitted unless\n           * the polynomial is exactly 0 (see rule 9)\n           * 5. Term with the exponent value of one is written as x^1\n           * 6. Term with the exponent value of zero (the constant term) is written as\n           * just a hexadecimal number without x or exponent\n           * 7. Terms are separated exactly by <space>+<space>\n           * 8. Other than the +, no other terms have whitespace\n           * 9. If the polynomial is exactly 0, the string \"0\" is returned\n           *\n           * @function\n           * @name PlainText#toPolynomial\n           * @throws std::invalid_argument if the PlainText is in NTT transformed form\n           * @returns {string} Polynomial string\n           */\n          toPolynomial(): string {\n            try {\n              return _instance.toPolynomial()\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Whether the PlainText is in NTT form.\n           *\n           * @readonly\n           * @name PlainText#isNttForm\n           * @type {boolean}\n           */\n          get isNttForm() {\n            return _instance.isNttForm()\n          },\n\n          /**\n           * The reference to parmsId of the PlainText. The parmsId must remain zero unless the\n           * PlainText polynomial is in NTT form.\n           *\n           * @see {@link EncryptionParameters} for more information about parmsId.\n           *\n           * @readonly\n           * @name PlainText#parmsId\n           * @type {ParmsIdType}\n           */\n          get parmsId() {\n            const parms = ParmsIdType()\n            parms.inject(_instance.parmsId())\n            return parms\n          },\n\n          /**\n           * The reference to the scale. This is only needed when using the CKKS\n           * encryption scheme. The user should have little or no reason to ever change\n           * the scale by hand.\n           *\n           * @readonly\n           * @name PlainText#scale\n           * @type {number}\n           */\n          get scale() {\n            return _instance.scale()\n          },\n\n          /**\n           * Sets the PlainText scale. This is only needed when using the\n           * CKKS encryption scheme. The user should have little or no reason to ever\n           * change the scale by hand.\n           *\n           * @function\n           * @name PlainText#setScale\n           * @param {number} scale The scale to set\n           */\n          setScale(scale: number) {\n            _instance.setScale(scale)\n          },\n\n          /**\n           * The currently used MemoryPoolHandle.\n           *\n           * @readonly\n           * @name PlainText#pool\n           * @type {MemoryPoolHandle}\n           */\n          get pool() {\n            return _instance.pool()\n          },\n\n          /**\n           * Save the PlainText to a base64 string\n           *\n           * @function\n           * @name PlainText#save\n           * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n           * @returns {string} Base64 encoded string\n           */\n          save(compression: ComprModeType = ComprModeType.zstd): string {\n            return _instance.saveToString(compression)\n          },\n\n          /**\n           * Save the PlainText as a binary Uint8Array\n           *\n           * @function\n           * @name PlainText#saveArray\n           * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n           * @returns {Uint8Array} A byte array containing the PlainText in binary form\n           */\n          saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n            const tempVect = Vector()\n            const instance = _instance.saveToArray(compression)\n            tempVect.unsafeInject(instance)\n            tempVect.setType('Uint8Array')\n            const tempArr = tempVect.toArray() as Uint8Array\n            tempVect.delete()\n            return tempArr\n          },\n\n          /**\n           * Load a PlainText from a base64 string\n           *\n           * @function\n           * @name PlainText#load\n           * @param {Context} context Encryption context to enforce\n           * @param {string} encoded Base64 encoded string\n           */\n          load(context: Context, encoded: string) {\n            try {\n              _instance.loadFromString(context.instance, encoded)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Load a PlainText from an Uint8Array holding binary data\n           *\n           * @function\n           * @name PlainText#loadArray\n           * @param {Context} context Encryption context to enforce\n           * @param {Uint8Array} array TypedArray containing binary data\n           */\n          loadArray(context: Context, array: Uint8Array) {\n            try {\n              _instance.loadFromArray(context.instance, array)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Copy an existing PlainText and overwrite this instance\n           *\n           * @function\n           * @name PlainText#copy\n           * @param {PlainText} plain PlainText to copy\n           * @example\n           * const plainTextA = seal.PlainText()\n           * // ... after encoding some data ...\n           * const plainTextB = seal.PlainText()\n           * plainTextB.copy(plainTextA)\n           * // plainTextB holds a copy of plainTextA\n           */\n          copy(plain: PlainText) {\n            try {\n              _instance.copy(plain.instance)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Clone and return a new instance of this PlainText\n           *\n           * @function\n           * @name PlainText#clone\n           * @returns {PlainText}\n           * @example\n           * const plainTextA = seal.PlainText()\n           * // ... after encoding some data ...\n           * const plainTextB = plainTextA.clone()\n           * // plainTextB holds a copy of plainTextA\n           */\n          clone(): PlainText {\n            try {\n              const clonedInstance = _instance.clone()\n              const plain = PlainTextConstructor(library)({\n                Exception,\n                ComprModeType,\n                ParmsIdType,\n                MemoryPoolHandle,\n                Vector\n              })()\n              plain.unsafeInject(clonedInstance)\n              return plain\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Move a PlainText into this one and delete the old reference\n           *\n           * @function\n           * @name PlainText#move\n           * @param {PlainText} plain PlainText to move\n           * @example\n           * const plainTextA = seal.PlainText()\n           * // ... after encoding some data ...\n           * const plainTextB = seal.PlainText()\n           * plainTextB.move(plainTextA)\n           * // plainTextB holds a the instance of plainTextA.\n           * // plainTextA no longer holds an instance\n           */\n          move(plain: PlainText) {\n            try {\n              _instance.move(plain.instance)\n              // TODO: find optimization\n              // This method results in a copy instead of a real move.\n              // Therefore, we need to delete the old instance.\n              plain.delete()\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          }\n        }\n      }\n\nexport const PlainTextInit = ({\n  loader\n}: LoaderOptions): PlainTextDependencies => {\n  const library: Library = loader.library\n  return PlainTextConstructor(library)\n}\n","import { LoaderOptions, Library } from './seal'\nimport { Exception, SealError } from './exception'\nimport { Modulus, ModulusConstructorOptions } from './modulus'\nimport { Vector, VectorConstructorOptions } from './vector'\n\nexport type PlainModulusDependencyOptions = {\n  readonly Exception: Exception\n  readonly Modulus: ModulusConstructorOptions\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type PlainModulusDependencies = {\n  ({\n    Exception,\n    Modulus,\n    Vector\n  }: PlainModulusDependencyOptions): PlainModulusConstructorOptions\n}\n\nexport type PlainModulusConstructorOptions = {\n  (): PlainModulus\n}\n\nexport type PlainModulus = {\n  readonly Batching: (polyModulusDegree: number, bitSize: number) => Modulus\n  readonly BatchingVector: (\n    polyModulusDegree: number,\n    bitSizes: Int32Array\n  ) => Vector\n}\n\nconst PlainModulusConstructor =\n  (library: Library): PlainModulusDependencies =>\n    ({\n      Exception,\n      Modulus,\n      Vector\n    }: PlainModulusDependencyOptions): PlainModulusConstructorOptions =>\n      (): PlainModulus => {\n        // Static methods\n        const _Batching = library.PlainModulus.Batching\n        const _BatchingVector = library.PlainModulus.BatchingVector\n\n        /**\n         * @implements PlainModulus\n         */\n\n        /**\n         * @interface PlainModulus\n         */\n        return {\n          /**\n           * Creates a prime number PlainModulus for use as plainPlainModulus encryption\n           * parameter that supports batching with a given polyPlainModulusDegree.\n           *\n           * @function\n           * @name PlainModulus.Batching\n           * @param {number} polyModulusDegree The degree of the polynomial modulus\n           * @param {number} bitSize The bit-size of the desired prime number\n           * @returns {Modulus} A PlainModulus containing the prime number\n           */\n          Batching(polyModulusDegree: number, bitSize: number): Modulus {\n            try {\n              const smallMod = Modulus(BigInt(0))\n              smallMod.inject(_Batching(polyModulusDegree, bitSize))\n              return smallMod\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Creates several prime number PlainModulus elements that can be used as\n           * plainPlainModulus encryption parameters, each supporting batching with a given\n           * polyPlainModulusDegree.\n           *\n           * @function\n           * @name PlainModulus.BatchingVector\n           * @param {Number} polyPlainModulusDegree The degree of the polynomial modulus\n           * @param {Int32Array} bitSizes Int32Array containing values representing bit-sizes of primes\n           * @returns {Vector} Vector of Modulus containing prime numbers\n           */\n          BatchingVector(\n            polyPlainModulusDegree: number,\n            bitSizes: Int32Array\n          ): Vector {\n            try {\n              const vectBitSizes = Vector()\n              vectBitSizes.from(bitSizes)\n              const vect = _BatchingVector(\n                polyPlainModulusDegree,\n                vectBitSizes.instance\n              )\n              vectBitSizes.delete()\n              return vect\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          }\n        }\n      }\n\nexport const PlainModulusInit = ({\n  loader\n}: LoaderOptions): PlainModulusDependencies => {\n  const library: Library = loader.library\n  return PlainModulusConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\n\nexport type PublicKeyDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type PublicKeyDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: PublicKeyDependencyOptions): PublicKeyConstructorOptions\n}\n\nexport type PublicKeyConstructorOptions = {\n  (): PublicKey\n}\n\nexport type PublicKey = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (key: PublicKey) => void\n  readonly clone: () => PublicKey\n  readonly move: (key: PublicKey) => void\n}\n\nconst PublicKeyConstructor =\n  (library: Library): PublicKeyDependencies =>\n    ({\n      Exception,\n      ComprModeType,\n      Vector\n    }: PublicKeyDependencyOptions): PublicKeyConstructorOptions =>\n      (): PublicKey => {\n        const Constructor = library.PublicKey\n        let _instance = new Constructor()\n\n        /**\n         * @implements PublicKey\n         */\n\n        /**\n         * @interface PublicKey\n         */\n        return {\n          /**\n           * Get the underlying WASM instance\n           *\n           * @private\n           * @readonly\n           * @name PublicKey#instance\n           * @type {Instance}\n           */\n          get instance() {\n            return _instance\n          },\n\n          /**\n           * Inject this object with a raw WASM instance\n           *\n           * @private\n           * @function\n           * @name PublicKey#inject\n           * @param {Instance} instance WASM instance\n           */\n          inject(instance: Instance) {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n            _instance = new Constructor(instance)\n            instance.delete()\n          },\n\n          /**\n           * Delete the underlying WASM instance.\n           *\n           * Should be called before dereferencing this object to prevent the\n           * WASM heap from growing indefinitely.\n           * @function\n           * @name PublicKey#delete\n           */\n          delete() {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n          },\n\n          /**\n           * Save the Encryption Parameters to a base64 string\n           *\n           * @function\n           * @name PublicKey#save\n           * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n           * @returns {string} Base64 encoded string\n           */\n          save(compression: ComprModeType = ComprModeType.zstd): string {\n            try {\n              return _instance.saveToString(compression)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Save the PublicKey as a binary Uint8Array\n           *\n           * @function\n           * @name PublicKey#saveArray\n           * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n           * @returns {Uint8Array} A byte array containing the PublicKey in binary form\n           */\n          saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n            const tempVect = Vector()\n            const instance = _instance.saveToArray(compression)\n            tempVect.unsafeInject(instance)\n            tempVect.setType('Uint8Array')\n            const tempArr = tempVect.toArray() as Uint8Array\n            tempVect.delete()\n            return tempArr\n          },\n\n          /**\n           * Load a PublicKey from a base64 string\n           *\n           * @function\n           * @name PublicKey#load\n           * @param {Context} context Encryption context to enforce\n           * @param {string} encoded Base64 encoded string\n           */\n          load(context: Context, encoded: string) {\n            try {\n              _instance.loadFromString(context.instance, encoded)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Load a PublicKey from an Uint8Array holding binary data\n           *\n           * @function\n           * @name PublicKey#loadArray\n           * @param {Context} context Encryption context to enforce\n           * @param {Uint8Array} array TypedArray containing binary data\n           */\n          loadArray(context: Context, array: Uint8Array) {\n            try {\n              _instance.loadFromArray(context.instance, array)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Copy an existing PublicKey and overwrite this instance\n           *\n           * @function\n           * @name PublicKey#copy\n           * @param {PublicKey} key PublicKey to copy\n           * @example\n           * const keyA = keyGenerator.createPublicKey()\n           * const keyB = seal.PublicKey()\n           * keyB.copy(keyA)\n           * // keyB holds a copy of keyA\n           */\n          copy(key: PublicKey) {\n            try {\n              _instance.copy(key.instance)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Clone and return a new instance of this PublicKey\n           *\n           * @function\n           * @name PublicKey#clone\n           * @returns {PublicKey}\n           * @example\n           * const keyA = keyGenerator.createPublicKey()\n           * const keyB = keyA.clone()\n           * // keyB holds a copy of keyA\n           */\n          clone(): PublicKey {\n            try {\n              const clonedInstance = _instance.clone()\n              const key = PublicKeyConstructor(library)({\n                Exception,\n                ComprModeType,\n                Vector\n              })()\n              key.inject(clonedInstance)\n              return key\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Move a PublicKey into this one and delete the old reference\n           *\n           * @function\n           * @name PublicKey#move\n           * @param {PublicKey} key PublicKey to move\n           * @example\n           * const keyA = keyGenerator.createPublicKey()\n           * const keyB = seal.PublicKey()\n           * keyB.move(keyA)\n           * // keyB holds a the instance of keyA.\n           * // keyA no longer holds an instance\n           */\n          move(key: PublicKey) {\n            try {\n              _instance.move(key.instance)\n              // TODO: find optimization\n              // This method results in a copy instead of a real move.\n              // Therefore, we need to delete the old instance.\n              key.delete()\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          }\n        }\n      }\n\nexport const PublicKeyInit = ({\n  loader\n}: LoaderOptions): PublicKeyDependencies => {\n  const library: Library = loader.library\n  return PublicKeyConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\n\nexport type RelinKeysDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type RelinKeysDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: RelinKeysDependencyOptions): RelinKeysConstructorOptions\n}\n\nexport type RelinKeysConstructorOptions = {\n  (): RelinKeys\n}\n\nexport type RelinKeys = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly size: number\n  readonly getIndex: (keyPower: number) => number\n  readonly hasKey: (keyPower: number) => boolean\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (key: RelinKeys) => void\n  readonly clone: () => RelinKeys\n  readonly move: (key: RelinKeys) => void\n}\n\nconst RelinKeysConstructor =\n  (library: Library): RelinKeysDependencies =>\n    ({\n      Exception,\n      ComprModeType,\n      Vector\n    }: RelinKeysDependencyOptions): RelinKeysConstructorOptions =>\n      (): RelinKeys => {\n        const Constructor = library.RelinKeys\n        let _instance = new Constructor()\n\n        /**\n         * @implements RelinKeys\n         */\n\n        /**\n         * @interface RelinKeys\n         */\n        return {\n          /**\n           * Get the underlying WASM instance\n           *\n           * @private\n           * @readonly\n           * @name RelinKeys#instance\n           * @type {Instance}\n           */\n          get instance() {\n            return _instance\n          },\n\n          /**\n           * Inject this object with a raw WASM instance\n           *\n           * @private\n           * @function\n           * @name RelinKeys#inject\n           * @param {Instance} instance WASM instance\n           */\n          inject(instance: Instance) {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n            _instance = new Constructor(instance)\n            instance.delete()\n          },\n\n          /**\n           * Delete the underlying WASM instance.\n           *\n           * Should be called before dereferencing this object to prevent the\n           * WASM heap from growing indefinitely.\n           * @function\n           * @name RelinKeys#delete\n           */\n          delete() {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n          },\n\n          /**\n           * Returns the current number of keyswitching keys. Only keys that are\n           * non-empty are counted.\n           *\n           * @readonly\n           * @name RelinKeys#size\n           * @type {number}\n           */\n          get size() {\n            return _instance.size()\n          },\n\n          /**\n           * Returns the index of a relinearization key in the backing KSwitchKeys\n           * instance that corresponds to the given secret key power, assuming that\n           * it exists in the backing KSwitchKeys.\n           *\n           * @function\n           * @name RelinKeys#getIndex\n           * @param {number} keyPower The power of the secret key\n           * @returns {number} The index of the relin key\n           */\n          getIndex(keyPower: number): number {\n            try {\n              return _instance.getIndex(keyPower)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Returns whether a relinearization key corresponding to a given power of\n           * the secret key exists.\n           *\n           * @function\n           * @name RelinKeys#hasKey\n           * @param {number} keyPower The power of the secret key\n           * @returns {boolean} True if the power exists\n           */\n          hasKey(keyPower: number): boolean {\n            try {\n              return _instance.hasKey(keyPower)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Save the Encryption Parameters to a base64 string\n           *\n           * @function\n           * @name RelinKeys#save\n           * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n           * @returns {string} Base64 encoded string\n           */\n          save(compression: ComprModeType = ComprModeType.zstd): string {\n            try {\n              return _instance.saveToString(compression)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Save the RelinKeys as a binary Uint8Array\n           *\n           * @function\n           * @name RelinKeys#saveArray\n           * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n           * @returns {Uint8Array} A byte array containing the RelinKeys in binary form\n           */\n          saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n            const tempVect = Vector()\n            const instance = _instance.saveToArray(compression)\n            tempVect.unsafeInject(instance)\n            tempVect.setType('Uint8Array')\n            const tempArr = tempVect.toArray() as Uint8Array\n            tempVect.delete()\n            return tempArr\n          },\n\n          /**\n           * Load a RelinKeys from a base64 string\n           *\n           * @function\n           * @name RelinKeys#load\n           * @param {Context} context Encryption context to enforce\n           * @param {string} encoded Base64 encoded string\n           */\n          load(context: Context, encoded: string) {\n            try {\n              _instance.loadFromString(context.instance, encoded)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Load a RelinKeys from an Uint8Array holding binary data\n           *\n           * @function\n           * @name RelinKeys#loadArray\n           * @param {Context} context Encryption context to enforce\n           * @param {Uint8Array} array TypedArray containing binary data\n           */\n          loadArray(context: Context, array: Uint8Array) {\n            try {\n              _instance.loadFromArray(context.instance, array)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Copy an existing RelinKeys and overwrite this instance\n           *\n           * @function\n           * @name RelinKeys#copy\n           * @param {RelinKeys} key RelinKeys to copy\n           * @example\n           * const keyA = keyGenerator.createRelinKeys()\n           * const keyB = seal.RelinKeys()\n           * keyB.copy(keyA)\n           * // keyB holds a copy of keyA\n           */\n          copy(key: RelinKeys) {\n            try {\n              _instance.copy(key.instance)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Clone and return a new instance of this RelinKeys\n           *\n           * @function\n           * @name RelinKeys#clone\n           * @returns {RelinKeys}\n           * @example\n           * const keyA = keyGenerator.createRelinKeys()\n           * const keyB = keyA.clone()\n           * // keyB holds a copy of keyA\n           */\n          clone(): RelinKeys {\n            try {\n              const clonedInstance = _instance.clone()\n              const key = RelinKeysConstructor(library)({\n                Exception,\n                ComprModeType,\n                Vector\n              })()\n              key.inject(clonedInstance)\n              return key\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Move a RelinKeys into this one and delete the old reference\n           *\n           * @function\n           * @name RelinKeys#move\n           * @param {RelinKeys} key RelinKeys to move\n           * @example\n           * const keyA = keyGenerator.createRelinKeys()\n           * const keyB = seal.RelinKeys()\n           * keyB.move(keyA)\n           * // keyB holds a the instance of keyA.\n           * // keyA no longer holds an instance\n           */\n          move(key: RelinKeys) {\n            try {\n              _instance.move(key.instance)\n              // TODO: find optimization\n              // This method results in a copy instead of a real move.\n              // Therefore, we need to delete the old instance.\n              key.delete()\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          }\n        }\n      }\n\nexport const RelinKeysInit = ({\n  loader\n}: LoaderOptions): RelinKeysDependencies => {\n  const library: Library = loader.library\n  return RelinKeysConstructor(library)\n}\n","import { LoaderOptions, Library } from './seal'\n\nexport type SchemeTypeDependencies = {\n  (): SchemeTypeConstructorOptions\n}\n\nexport type SchemeTypeConstructorOptions = {\n  (): SchemeType\n}\n\nexport type SchemeType = {\n  readonly none: any\n  readonly bfv: any\n  readonly ckks: any\n  readonly bgv: any\n}\n\nconst SchemeTypeConstructor =\n  (library: Library): SchemeTypeDependencies =>\n    (): SchemeTypeConstructorOptions =>\n      (): SchemeType => {\n        // Static methods\n        const _none = library.SchemeType.none\n        const _bfv = library.SchemeType.bfv\n        const _ckks = library.SchemeType.ckks\n        const _bgv = library.SchemeType.bgv\n\n        /**\n         * @implements SchemeType\n         */\n\n        /**\n         * @interface SchemeType\n         */\n        return {\n          /**\n           * Return the 'none' scheme type\n           *\n           * @readonly\n           * @name SchemeType.none\n           * @type {SchemeType.none}\n           */\n          get none() {\n            /**\n             * @typedef {SchemeType.none} SchemeType.none\n             */\n            return _none\n          },\n\n          /**\n           * Return the 'bfv' scheme type\n           *\n           * @readonly\n           * @name SchemeType.bfv\n           * @type {SchemeType.bfv}\n           */\n          get bfv() {\n            /**\n             * @typedef {SchemeType.bfv} SchemeType.bfv\n             */\n            return _bfv\n          },\n\n          /**\n           * Return the 'ckks' scheme type\n           *\n           * @readonly\n           * @name SchemeType.ckks\n           * @type {SchemeType.ckks}\n           */\n          get ckks() {\n            /**\n             * @typedef {SchemeType.ckks} SchemeType.ckks\n             */\n            return _ckks\n          },\n\n          /**\n           * Return the 'ckks' scheme type\n           *\n           * @readonly\n           * @name SchemeType.bgv\n           * @type {SchemeType.bgv}\n           */\n          get bgv() {\n            /**\n             * @typedef {SchemeType.bgv} SchemeType.bgv\n             */\n            return _bgv\n          }\n        }\n      }\n\nexport const SchemeTypeInit = ({\n  loader\n}: LoaderOptions): SchemeTypeDependencies => {\n  const library: Library = loader.library\n  return SchemeTypeConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\n\nexport type SecretKeyDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type SecretKeyDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: SecretKeyDependencyOptions): SecretKeyConstructorOptions\n}\n\nexport type SecretKeyConstructorOptions = {\n  (): SecretKey\n}\n\nexport type SecretKey = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (key: SecretKey) => void\n  readonly clone: () => SecretKey\n  readonly move: (key: SecretKey) => void\n}\n\nconst SecretKeyConstructor =\n  (library: Library): SecretKeyDependencies =>\n    ({\n      Exception,\n      ComprModeType,\n      Vector\n    }: SecretKeyDependencyOptions): SecretKeyConstructorOptions =>\n      (): SecretKey => {\n        const Constructor = library.SecretKey\n        let _instance = new Constructor()\n\n        /**\n         * @implements SecretKey\n         */\n\n        /**\n         * @interface SecretKey\n         */\n        return {\n          /**\n           * Get the underlying WASM instance\n           *\n           * @private\n           * @readonly\n           * @name SecretKey#instance\n           * @type {Instance}\n           */\n          get instance() {\n            return _instance\n          },\n\n          /**\n           * Inject this object with a raw WASM instance\n           *\n           * @private\n           * @function\n           * @name SecretKey#inject\n           * @param {Instance} instance WASM instance\n           */\n          inject(instance: Instance) {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n            _instance = new Constructor(instance)\n            instance.delete()\n          },\n\n          /**\n           * Delete the underlying WASM instance.\n           *\n           * Should be called before dereferencing this object to prevent the\n           * WASM heap from growing indefinitely.\n           * @function\n           * @name SecretKey#delete\n           */\n          delete() {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n          },\n\n          /**\n           * Save the Encryption Parameters to a base64 string\n           *\n           * @function\n           * @name SecretKey#save\n           * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n           * @returns {string} Base64 encoded string\n           */\n          save(compression: ComprModeType = ComprModeType.zstd): string {\n            try {\n              return _instance.saveToString(compression)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Save the SecretKey as a binary Uint8Array\n           *\n           * @function\n           * @name SecretKey#saveArray\n           * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n           * @returns {Uint8Array} A byte array containing the SecretKey in binary form\n           */\n          saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n            const tempVect = Vector()\n            const instance = _instance.saveToArray(compression)\n            tempVect.unsafeInject(instance)\n            tempVect.setType('Uint8Array')\n            const tempArr = tempVect.toArray() as Uint8Array\n            tempVect.delete()\n            return tempArr\n          },\n\n          /**\n           * Load a SecretKey from a base64 string\n           *\n           * @function\n           * @name SecretKey#load\n           * @param {Context} context Encryption context to enforce\n           * @param {string} encoded Base64 encoded string\n           */\n          load(context: Context, encoded: string) {\n            try {\n              _instance.loadFromString(context.instance, encoded)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Load a SecretKey from an Uint8Array holding binary data\n           *\n           * @function\n           * @name SecretKey#loadArray\n           * @param {Context} context Encryption context to enforce\n           * @param {Uint8Array} array TypedArray containing binary data\n           */\n          loadArray(context: Context, array: Uint8Array) {\n            try {\n              _instance.loadFromArray(context.instance, array)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Copy an existing SecretKey and overwrite this instance\n           *\n           * @function\n           * @name SecretKey#copy\n           * @param {SecretKey} key SecretKey to copy\n           * @example\n           * const keyA = keyGenerator.secretKey()\n           * const keyB = seal.SecretKey()\n           * keyB.copy(keyA)\n           * // keyB holds a copy of keyA\n           */\n          copy(key: SecretKey) {\n            try {\n              _instance.copy(key.instance)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Clone and return a new instance of this SecretKey\n           *\n           * @function\n           * @name SecretKey#clone\n           * @returns {SecretKey}\n           * @example\n           * const keyA = keyGenerator.secretKey()\n           * const keyB = keyA.clone()\n           * // keyB holds a copy of keyA\n           */\n          clone(): SecretKey {\n            try {\n              const clonedInstance = _instance.clone()\n              const key = SecretKeyConstructor(library)({\n                Exception,\n                ComprModeType,\n                Vector\n              })()\n              key.inject(clonedInstance)\n              return key\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Move a SecretKey into this one and delete the old reference\n           *\n           * @function\n           * @name SecretKey#move\n           * @param {SecretKey} key SecretKey to move\n           * @example\n           * const keyA = keyGenerator.secretKey()\n           * const keyB = seal.SecretKey()\n           * keyB.move(keyA)\n           * // keyB holds a the instance of keyA.\n           * // keyA no longer holds an instance\n           */\n          move(key: SecretKey) {\n            try {\n              _instance.move(key.instance)\n              // TODO: find optimization\n              // This method results in a copy instead of a real move.\n              // Therefore, we need to delete the old instance.\n              key.delete()\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          }\n        }\n      }\n\nexport const SecretKeyInit = ({\n  loader\n}: LoaderOptions): SecretKeyDependencies => {\n  const library: Library = loader.library\n  return SecretKeyConstructor(library)\n}\n","import { LoaderOptions, Library } from './seal'\n\nexport type SecurityLevelDependencies = {\n  (): SecurityLevelConstructorOptions\n}\n\nexport type SecurityLevelConstructorOptions = {\n  (): SecurityLevel\n}\n\nexport type SecurityLevel = {\n  readonly none: any\n  readonly tc128: any\n  readonly tc192: any\n  readonly tc256: any\n}\n\nconst SecurityLevelConstructor =\n  (library: Library): SecurityLevelDependencies =>\n    (): SecurityLevelConstructorOptions =>\n      (): SecurityLevel => {\n        // Static methods\n        const _none = library.SecLevelType.none\n        const _tc128 = library.SecLevelType.tc128\n        const _tc192 = library.SecLevelType.tc192\n        const _tc256 = library.SecLevelType.tc256\n\n        /**\n         * @implements SecurityLevel\n         */\n\n        /**\n         * @interface SecurityLevel\n         */\n        return {\n          /**\n           * Returns the 'none' security level\n           *\n           * @readonly\n           * @name SecurityLevel.none\n           * @type {SecurityLevel.none}\n           */\n          get none() {\n            /**\n             * @typedef {SecurityLevel.none} SecurityLevel.none\n             */\n            return _none\n          },\n\n          /**\n           * Returns the '128' security level\n           *\n           * @readonly\n           * @name SecurityLevel.tc128\n           * @type {SecurityLevel.tc128}\n           */\n          get tc128() {\n            /**\n             * @typedef {SecurityLevel.tc128} SecurityLevel.tc128\n             */\n            return _tc128\n          },\n\n          /**\n           * Returns the '192' security level\n           *\n           * @readonly\n           * @name SecurityLevel.tc192\n           * @type {SecurityLevel.tc192}\n           */\n          get tc192() {\n            /**\n             * @typedef {SecurityLevel.tc192} SecurityLevel.tc192\n             */\n            return _tc192\n          },\n\n          /**\n           * Returns the '256' security level\n           *\n           * @readonly\n           * @name SecurityLevel.tc256\n           * @type {SecurityLevel.tc256}\n           */\n          get tc256() {\n            /**\n             * @typedef {SecurityLevel.tc256} SecurityLevel.tc256\n             */\n            return _tc256\n          }\n        }\n      }\nexport const SecurityLevelInit = ({\n  loader\n}: LoaderOptions): SecurityLevelDependencies => {\n  const library: Library = loader.library\n  return SecurityLevelConstructor(library)\n}\n","import { LoaderOptions, Instance, Library } from './seal'\nimport { Exception, SealError } from './exception'\nimport { INSTANCE_DELETED, UNSUPPORTED_VECTOR_TYPE } from './constants'\n\nexport type VectorDependencyOptions = {\n  readonly Exception: Exception\n}\n\nexport type VectorDependencies = {\n  ({ Exception }: VectorDependencyOptions): VectorConstructorOptions\n}\n\nexport type VectorConstructorOptions = {\n  (): Vector\n}\n\nexport type Vector = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly from: (array: VectorTypes, type?: StringTypes) => Instance\n  readonly type: string\n  readonly setType: (type: StringTypes) => void\n  readonly size: number\n  readonly getValue: (index: number) => number\n  readonly resize: (size: number, fill: number) => void\n  readonly toArray: () => VectorTypes\n}\n\nexport type VectorTypes =\n  | Uint8Array\n  | Int32Array\n  | Uint32Array\n  | Float64Array\n  | BigInt64Array\n  | BigUint64Array\n\nexport type StringTypes =\n  | 'Uint8Array'\n  | 'Int32Array'\n  | 'Uint32Array'\n  | 'Float64Array'\n  | 'BigInt64Array'\n  | 'BigUint64Array'\n  | 'Modulus'\n\nconst VectorConstructor =\n  (library: Library): VectorDependencies =>\n    ({ Exception }: VectorDependencyOptions): VectorConstructorOptions =>\n      (): Vector => {\n        // Static methods\n        const _vecFromArrayUint8 = library.vecFromArrayUint8\n        const _vecFromArrayUint32 = library.vecFromArrayUint32\n        const _vecFromArrayInt32 = library.vecFromArrayInt32\n        const _vecFromArrayFloat64 = library.vecFromArrayFloat64\n        const _vecFromArrayBigInt64 = library.vecFromArrayBigInt64\n        const _vecFromArrayBigUint64 = library.vecFromArrayBigUint64\n        const _vecFromArrayModulus = library.vecFromArrayModulus\n        const _jsArrayUint8FromVec = library.jsArrayUint8FromVec\n        const _jsArrayUint32FromVec = library.jsArrayUint32FromVec\n        const _jsArrayInt32FromVec = library.jsArrayInt32FromVec\n        const _jsArrayFloat64FromVec = library.jsArrayFloat64FromVec\n        const _jsArrayStringFromVecInt64 = library.jsArrayStringFromVecInt64\n        const _jsArrayStringFromVecUint64 = library.jsArrayStringFromVecUint64\n        const _jsArrayStringFromVecModulus = library.jsArrayStringFromVecModulus\n\n        let _instance: Instance\n        let _type: StringTypes\n        /**\n         * @implements Vector\n         */\n\n        /**\n         * @interface Vector\n         */\n        return {\n          /**\n           * Get the underlying WASM instance\n           *\n           * @private\n           * @readonly\n           * @name Vector#instance\n           * @type {Instance}\n           */\n          get instance() {\n            return _instance\n          },\n\n          /**\n           * Inject this object with a raw WASM instance. No type checking is performed.\n           *\n           * @private\n           * @function\n           * @name Vector#unsafeInject\n           * @param {Instance} instance WASM instance\n           */\n          unsafeInject(instance: Instance) {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n            _instance = instance\n          },\n\n          /**\n           * Delete the underlying WASM instance.\n           *\n           * Should be called before dereferencing this object to prevent the\n           * WASM heap from growing indefinitely.\n           * @function\n           * @name Vector#delete\n           */\n          delete() {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n          },\n\n          /**\n           * Converts a JS TypedArray into a vector\n           *\n           * @function\n           * @name Vector#from\n           * @param {VectorTypes} array The TypedArray to convert\n           * @param {StringTypes} [type] An optional type override - useful for 'Modulus' only\n           */\n          from(array: VectorTypes, type?: StringTypes) {\n            try {\n              _type = type ? type : (array.constructor.name as StringTypes)\n              switch (_type) {\n                case 'Uint8Array':\n                  _instance = _vecFromArrayUint8(array)\n                  break\n                case 'Int32Array':\n                  _instance = _vecFromArrayInt32(array)\n                  break\n                case 'Uint32Array':\n                  _instance = _vecFromArrayUint32(array)\n                  break\n                case 'Float64Array':\n                  _instance = _vecFromArrayFloat64(array)\n                  break\n                case 'BigInt64Array':\n                  _instance = _vecFromArrayBigInt64(array.toString().split(','))\n                  break\n                case 'BigUint64Array':\n                  _instance = _vecFromArrayBigUint64(array.toString().split(','))\n                  break\n                case 'Modulus':\n                  _instance = _vecFromArrayModulus(array.toString().split(','))\n                  break\n                default:\n                  throw new Error(UNSUPPORTED_VECTOR_TYPE)\n              }\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * The Vector type\n           *\n           * @readonly\n           * @name Vector#type\n           */\n          get type(): StringTypes {\n            return _type\n          },\n\n          /**\n           * Set the Vector type\n           *\n           * @function\n           * @name Vector#setType\n           * @param {StringTypes} type the type of the vector\n           */\n          setType(type: StringTypes) {\n            _type = type\n          },\n\n          /**\n           * The vector size\n           *\n           * @readonly\n           * @name Vector#size\n           * @type {number}\n           */\n          get size(): number {\n            return _instance.size()\n          },\n\n          /**\n           * Get a value pointed to by the specified index\n           *\n           * @function\n           * @name Vector#getValue\n           * @param {number} index Index of the Vector\n           * @returns {number} Value of the element in the Vector pointed to by the index\n           */\n          getValue(index: number): number {\n            try {\n              return _instance.get(index)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Resizes a vector to the given size\n           *\n           * @function\n           * @name Vector#resize\n           * @param {number} size number of elements to resize\n           * @param {number} fill Data to fill the vector with\n           */\n          resize(size: number, fill: number) {\n            try {\n              _instance.resize(size, fill)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Copy a vector's data into a Typed Array\n           *\n           * Note: we cannot simply return a view on the underlying ArrayBuffer\n           * because WASM memory can grow and cause all the views to become\n           * neutered. We have to perform a hard copy to get data from WASM heap to JS.\n           *\n           * @function\n           * @name Vector#toArray\n           * @returns {VectorTypes} TypedArray containing values from the Vector\n           */\n          toArray(): VectorTypes {\n            if (!_instance) {\n              throw new Error(INSTANCE_DELETED)\n            }\n            switch (_type) {\n              case 'Uint8Array':\n                return Uint8Array.from(_jsArrayUint8FromVec(_instance))\n              case 'Int32Array':\n                return Int32Array.from(_jsArrayInt32FromVec(_instance))\n              case 'Uint32Array':\n                return Uint32Array.from(_jsArrayUint32FromVec(_instance))\n              case 'Float64Array':\n                return Float64Array.from(_jsArrayFloat64FromVec(_instance))\n              case 'BigInt64Array':\n                return BigInt64Array.from(_jsArrayStringFromVecInt64(_instance))\n              case 'BigUint64Array':\n                return BigUint64Array.from(_jsArrayStringFromVecUint64(_instance))\n              case 'Modulus':\n                return BigUint64Array.from(_jsArrayStringFromVecModulus(_instance))\n              default:\n                throw new Error(UNSUPPORTED_VECTOR_TYPE)\n            }\n          }\n        }\n      }\n\nexport const VectorInit = ({ loader }: LoaderOptions): VectorDependencies => {\n  const library: Library = loader.library\n  return VectorConstructor(library)\n}\n","import { SEALLibrary } from './implementation/seal'\nimport sealLibrary from 'seal_throws_wasm_worker'\nimport { Loader, createLoader } from './main/loader'\nimport { SEAL } from './main/seal'\n/**\n * Export a function which loads the proper build\n */\nconst loader = async (): Promise<Loader> => createLoader(sealLibrary)\n\n/**\n * Main export for node-seal\n */\nexport default async (): Promise<SEALLibrary> => SEAL(loader)\n","import { Library } from '../implementation/seal'\n\nexport type Loader = {\n  readonly library: Library\n}\n\n/**\n * Export a default function which instantiates the library\n * @param {Object} bin Emscripten library to initialize\n */\nexport const createLoader = async (\n  bin: () => Promise<Library>\n): Promise<Loader> => ({\n  library: await bin()\n})\n","import { SEALLibrary, SEALConstructor } from '../implementation/seal'\nimport { BatchEncoderInit } from '../implementation/batch-encoder'\nimport { CipherTextInit } from '../implementation/cipher-text'\nimport { CKKSEncoderInit } from '../implementation/ckks-encoder'\nimport { CoeffModulusInit } from '../implementation/coeff-modulus'\nimport { ComprModeTypeInit } from '../implementation/compr-mode-type'\nimport { ContextDataInit } from '../implementation/context-data'\nimport { ContextInit } from '../implementation/context'\nimport { DecryptorInit } from '../implementation/decryptor'\nimport { EncryptionParameterQualifiersInit } from '../implementation/encryption-parameter-qualifiers'\nimport { EncryptionParametersInit } from '../implementation/encryption-parameters'\nimport { EncryptorInit } from '../implementation/encryptor'\nimport { EvaluatorInit } from '../implementation/evaluator'\nimport { ExceptionInit } from '../implementation/exception'\nimport { GaloisKeysInit } from '../implementation/galois-keys'\nimport { KeyGeneratorInit } from '../implementation/key-generator'\nimport { MemoryPoolHandleInit } from '../implementation/memory-pool-handle'\nimport { ModulusInit } from '../implementation/modulus'\nimport { ParmsIdTypeInit } from '../implementation/parms-id-type'\nimport { PlainTextInit } from '../implementation/plain-text'\nimport { PlainModulusInit } from '../implementation/plain-modulus'\nimport { PublicKeyInit } from '../implementation/public-key'\nimport { RelinKeysInit } from '../implementation/relin-keys'\nimport { SchemeTypeInit } from '../implementation/scheme-type'\nimport { SecretKeyInit } from '../implementation/secret-key'\nimport { SecurityLevelInit } from '../implementation/security-level'\nimport { SerializableInit } from '../implementation/serializable'\nimport { VectorInit } from '../implementation/vector'\nimport { Loader } from './loader'\n\n/**\n * Main export for the library\n */\nexport const SEAL = async (\n  Loader: () => Promise<Loader>\n): Promise<SEALLibrary> => {\n  const loader = await Loader()\n  return SEALConstructor({\n    BatchEncoder: BatchEncoderInit({\n      loader\n    }),\n    CipherText: CipherTextInit({\n      loader\n    }),\n    CKKSEncoder: CKKSEncoderInit({\n      loader\n    }),\n    CoeffModulus: CoeffModulusInit({\n      loader\n    }),\n    ComprModeType: ComprModeTypeInit({\n      loader\n    }),\n    ContextData: ContextDataInit({\n      loader\n    }),\n    Context: ContextInit({\n      loader\n    }),\n    Decryptor: DecryptorInit({\n      loader\n    }),\n    EncryptionParameterQualifiers: EncryptionParameterQualifiersInit(),\n    EncryptionParameters: EncryptionParametersInit({\n      loader\n    }),\n    Encryptor: EncryptorInit({\n      loader\n    }),\n    Evaluator: EvaluatorInit({\n      loader\n    }),\n    Exception: ExceptionInit({\n      loader\n    }),\n    GaloisKeys: GaloisKeysInit({\n      loader\n    }),\n    KeyGenerator: KeyGeneratorInit({\n      loader\n    }),\n    MemoryPoolHandle: MemoryPoolHandleInit({\n      loader\n    }),\n    Modulus: ModulusInit({\n      loader\n    }),\n    ParmsIdType: ParmsIdTypeInit({\n      loader\n    }),\n    PlainText: PlainTextInit({\n      loader\n    }),\n    PlainModulus: PlainModulusInit({\n      loader\n    }),\n    PublicKey: PublicKeyInit({\n      loader\n    }),\n    RelinKeys: RelinKeysInit({\n      loader\n    }),\n    SchemeType: SchemeTypeInit({\n      loader\n    }),\n    SecretKey: SecretKeyInit({\n      loader\n    }),\n    SecurityLevel: SecurityLevelInit({\n      loader\n    }),\n    Serializable: SerializableInit(),\n    Vector: VectorInit({\n      loader\n    })\n  })\n}\n","import { Instance } from './seal'\nimport { SecurityLevel } from './security-level'\n\nexport type EncryptionParameterQualifiersDependencies = {\n  (): EncryptionParameterQualifiersConstructorOptions\n}\n\nexport type EncryptionParameterQualifiersConstructorOptions = {\n  (): EncryptionParameterQualifiers\n}\n\nexport type EncryptionParameterQualifiers = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly parametersSet: () => boolean\n  readonly usingFFT: boolean\n  readonly usingNTT: boolean\n  readonly usingBatching: boolean\n  readonly usingFastPlainLift: boolean\n  readonly usingDescendingModulusChain: boolean\n  readonly securityLevel: SecurityLevel\n}\n\nconst EncryptionParameterQualifiersConstructor =\n  (): EncryptionParameterQualifiersDependencies =>\n    (): EncryptionParameterQualifiersConstructorOptions =>\n      (): EncryptionParameterQualifiers => {\n        let _instance: Instance\n        /**\n         * @implements EncryptionParameterQualifiers\n         */\n\n        /**\n         * @interface EncryptionParameterQualifiers\n         */\n        return {\n          /**\n           * Get the underlying WASM instance\n           *\n           * @private\n           * @readonly\n           * @name EncryptionParameterQualifiers#instance\n           * @type {Instance}\n           */\n          get instance() {\n            return _instance\n          },\n\n          /**\n           * Inject this object with a raw WASM instance. No type checking is performed.\n           *\n           * @private\n           * @function\n           * @name EncryptionParameterQualifiers#unsafeInject\n           * @param {Instance} instance WASM instance\n           */\n          unsafeInject(instance: Instance) {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n            _instance = instance\n          },\n\n          /**\n           * Delete the underlying WASM instance.\n           *\n           * Should be called before dereferencing this object to prevent the\n           * WASM heap from growing indefinitely.\n           * @function\n           * @name EncryptionParameterQualifiers#delete\n           */\n          delete() {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n          },\n\n          /**\n           * If the encryption parameters are set in a way that is considered valid by\n           * Microsoft SEAL, the variable parameters_set is set to true.\n           *\n           * @function\n           * @name EncryptionParameterQualifiers#parametersSet\n           * @type {boolean}\n           */\n          parametersSet() {\n            return _instance.parametersSet()\n          },\n\n          /**\n           * Tells whether FFT can be used for polynomial multiplication. If the\n           * polynomial modulus is of the form X^N+1, where N is a power of two, then\n           * FFT can be used for fast multiplication of polynomials modulo the polynomial\n           * modulus. In this case the variable using_fft will be set to true. However,\n           * currently Microsoft SEAL requires this to be the case for the parameters\n           * to be valid. Therefore, parameters_set can only be true if using_fft is\n           * true.\n           *\n           * @readonly\n           * @name EncryptionParameterQualifiers#usingFFT\n           * @type {boolean}\n           */\n          get usingFFT() {\n            return _instance.usingFFT\n          },\n\n          /**\n           * Tells whether NTT can be used for polynomial multiplication. If the primes\n           * in the coefficient modulus are congruent to 1 modulo 2N, where X^N+1 is the\n           * polynomial modulus and N is a power of two, then the number-theoretic\n           * transform (NTT) can be used for fast multiplications of polynomials modulo\n           * the polynomial modulus and coefficient modulus. In this case the variable\n           * using_ntt will be set to true. However, currently Microsoft SEAL requires\n           * this to be the case for the parameters to be valid. Therefore, parameters_set\n           * can only be true if using_ntt is true.\n           *\n           * @readonly\n           * @name EncryptionParameterQualifiers#usingNTT\n           * @type {boolean}\n           */\n          get usingNTT() {\n            return _instance.usingNTT\n          },\n\n          /**\n           * Tells whether batching is supported by the encryption parameters. If the\n           * plaintext modulus is congruent to 1 modulo 2N, where X^N+1 is the polynomial\n           * modulus and N is a power of two, then it is possible to use the BatchEncoder\n           * class to view plaintext elements as 2-by-(N/2) matrices of integers modulo\n           * the plaintext modulus. This is called batching, and allows the user to\n           * operate on the matrix elements (slots) in a SIMD fashion, and rotate the\n           * matrix rows and columns. When the computation is easily vectorizable, using\n           * batching can yield a huge performance boost. If the encryption parameters\n           * support batching, the variable using_batching is set to true.\n           *\n           * @readonly\n           * @name EncryptionParameterQualifiers#usingBatching\n           * @type {boolean}\n           */\n          get usingBatching() {\n            return _instance.usingBatching\n          },\n\n          /**\n           * Tells whether fast plain lift is supported by the encryption parameters.\n           * A certain performance optimization in multiplication of a ciphertext by\n           * a plaintext (Evaluator::multiply_plain) and in transforming a plaintext\n           * element to NTT domain (Evaluator::transform_to_ntt) can be used when the\n           * plaintext modulus is smaller than each prime in the coefficient modulus.\n           * In this case the variable using_fast_plain_lift is set to true.\n           *\n           * @readonly\n           * @name EncryptionParameterQualifiers#usingFastPlainLift\n           * @type {boolean}\n           */\n          get usingFastPlainLift() {\n            return _instance.usingFastPlainLift\n          },\n\n          /**\n           * Tells whether the coefficient modulus consists of a set of primes that\n           * are in decreasing order. If this is true, certain modular reductions in\n           * base conversion can be omitted, improving performance.\n           *\n           * @readonly\n           * @name EncryptionParameterQualifiers#usingDescendingModulusChain\n           * @type {boolean}\n           */\n          get usingDescendingModulusChain() {\n            return _instance.usingDescendingModulusChain\n          },\n\n          /**\n           * Tells whether the encryption parameters are secure based on the standard\n           * parameters from HomomorphicEncryption.org security standard.\n           *\n           * @readonly\n           * @name EncryptionParameterQualifiers#securityLevel\n           * @type {(SecurityLevel.none|SecurityLevel.tc128|SecurityLevel.tc192|SecurityLevel.tc256)}\n           */\n          get securityLevel() {\n            return _instance.securityLevel\n          }\n        }\n      }\n\nexport const EncryptionParameterQualifiersInit =\n  (): EncryptionParameterQualifiersDependencies => {\n    return EncryptionParameterQualifiersConstructor()\n  }\n","import { Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { ComprModeType } from './compr-mode-type'\n\nexport type SerializableDependencyOptions = {\n  readonly Exception: Exception\n  readonly Vector: VectorConstructorOptions\n  readonly ComprModeType: ComprModeType\n}\n\nexport type SerializableDependencies = {\n  ({\n    Exception,\n    Vector,\n    ComprModeType\n  }: SerializableDependencyOptions): SerializableConstructorOptions\n}\n\nexport type SerializableConstructorOptions = {\n  (): Serializable\n}\n\nexport type Serializable = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n}\n\nconst SerializableConstructor =\n  (): SerializableDependencies =>\n    ({\n      Exception,\n      Vector,\n      ComprModeType\n    }: SerializableDependencyOptions): SerializableConstructorOptions =>\n      (): Serializable => {\n        let _instance: Instance\n\n        /**\n         * @implements Serializable\n         */\n\n        /**\n         * @interface Serializable\n         */\n        return {\n          /**\n           * Get the underlying WASM instance\n           *\n           * @private\n           * @readonly\n           * @name Serializable#instance\n           * @type {Instance}\n           */\n          get instance() {\n            return _instance\n          },\n\n          /**\n           * Inject this object with a raw WASM instance. No type checking is performed.\n           *\n           * @private\n           * @function\n           * @name Serializable#unsafeInject\n           * @param {Instance} instance WASM instance\n           */\n          unsafeInject(instance: Instance) {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n            _instance = instance\n          },\n\n          /**\n           * Delete the underlying WASM instance.\n           *\n           * Should be called before dereferencing this object to prevent the\n           * WASM heap from growing indefinitely.\n           * @function\n           * @name Serializable#delete\n           */\n          delete() {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n          },\n\n          /**\n           * Save to a base64 string\n           *\n           * @function\n           * @name Serializable#save\n           * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n           * @returns {string} Base64 encoded string\n           */\n          save(compression: ComprModeType = ComprModeType.zstd): string {\n            try {\n              return _instance.saveToString(compression)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Save as a binary Uint8Array\n           *\n           * @function\n           * @name Serializable#saveArray\n           * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n           * @returns {Uint8Array} A byte array containing the Serializable object in binary form\n           */\n          saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n            const tempVect = Vector()\n            const instance = _instance.saveToArray(compression)\n            tempVect.unsafeInject(instance)\n            tempVect.setType('Uint8Array')\n            const tempArr = tempVect.toArray() as Uint8Array\n            tempVect.delete()\n            return tempArr\n          }\n        }\n      }\n\nexport const SerializableInit = (): SerializableDependencies => {\n  return SerializableConstructor()\n}\n"],"names":["_scriptDir","Module","document","currentScript","src","undefined","h","aa","ba","ready","Promise","a","b","ha","ca","Object","assign","da","fa","t","self","location","href","indexOf","substr","replace","lastIndexOf","XMLHttpRequest","open","responseType","send","Uint8Array","response","c","ia","x","w","printErr","console","warn","bind","thisProgram","quit","wasmBinary","noExitRuntime","WebAssembly","z","ja","ka","la","TextDecoder","ma","A","d","subarray","decode","e","f","String","fromCharCode","l","na","length","charCodeAt","oa","wa","E","C","B","D","F","xa","ya","pa","qa","ra","sa","ta","ua","va","za","buffer","HEAP8","Int8Array","HEAP16","Int16Array","HEAP32","Int32Array","HEAPU8","HEAPU16","Uint16Array","HEAPU32","Uint32Array","HEAPF32","Float32Array","HEAPF64","Float64Array","Aa","Ba","Ca","Da","Ea","Fa","preRun","shift","unshift","G","I","onAbort","RuntimeError","preloadedImages","preloadedAudios","J","Ha","startsWith","Ia","locateFile","Ja","La","$a","Ma","Na","get","Oa","this","Ka","Ga","Qa","TypeError","Ra","K","L","M","Sa","Ta","Ua","Function","Va","Error","name","message","stack","toString","prototype","create","constructor","O","P","Wa","Xa","Q","k","m","R","forEach","Array","hasOwnProperty","push","Pa","Ya","ea","Za","ab","count","value","ga","bb","cb","db","eb","pop","fb","gb","ib","jb","FinalizationRegistry","unregister","register","S","kb","arguments","apply","lb","mb","nb","ob","pb","qb","clone","T","rb","sb","fromWireType","U","toWireType","tb","V","includes","concat","call","ub","vb","wb","xb","W","X","map","join","yb","zb","Ab","p","n","r","split","Bb","Cb","Db","Y","Eb","Z","Fb","Hb","Ib","Jb","Kb","Lb","Sb","Mb","Pb","Qb","Rb","USER","LOGNAME","PATH","PWD","HOME","LANG","navigator","languages","_","Vb","Wb","Xb","Yb","Zb","Date","getTime","getMonth","getFullYear","getDate","setDate","setMonth","setFullYear","$b","g","q","v","H","y","getDay","RegExp","u","substring","Math","ceil","abs","slice","ac","set","bc","cc","BindingError","InternalError","isAliasOf","getPrototypeOf","isDeleted","deleteLater","getInheritedInstanceCount","keys","getLiveInheritedInstances","flushPendingDeletes","setDelayFunction","argPackAdvance","readValueFromPointer","deleteObject","hb","pointerType","UnboundTypeError","count_emval_handles","get_first_emval","dc","atob","charAt","fc","ec","N","Gb","Symbol","enumerable","configurable","defineProperty","splice","className","values","s","o","ArrayBuffer","Uint8ClampedArray","i","Ob","Nb","j","copyWithin","min","max","grow","byteLength","Ub","crypto","getRandomValues","Tb","asm","exports","monitorRunDependencies","instance","fetch","resolve","then","credentials","ok","arrayBuffer","catch","instantiate","instantiateWasm","instantiateStreaming","___wasm_call_ctors","_main","___getTypeName","___embind_register_native_and_builtin_types","gc","_malloc","_free","hc","status","jc","calledRun","onRuntimeInitialized","kc","onExit","postRun","setStatus","setTimeout","dynCall_viij","dynCall_viiij","dynCall_iiiij","dynCall_vij","dynCall_iij","dynCall_iiij","dynCall_iiiiij","dynCall_iiiiijj","dynCall_iiiiiijj","$","dynCall_viijii","ic","run","preInit","noInitialRun","UNSUPPORTED_VECTOR_TYPE","BatchEncoderInit","loader","library","Exception","MemoryPoolHandle","PlainText","Vector","context","Constructor","BatchEncoder","_instance","safe","unsafeInject","delete","encode","array","plainText","plain","BigInt64Array","stringArray","BigUint64Array","signed","pool","global","tempVect","decodeInt32","setType","tempArr","toArray","decodeUint32","decodeBigInt","from","slotCount","BatchEncoderConstructor","CipherTextConstructor","ComprModeType","ParmsIdType","parmsId","sizeCapacity","Ciphertext","construct","reserve","capacity","resize","size","release","coeffModulusSize","polyModulusDegree","isTransparent","isNttForm","parms","inject","scale","setScale","save","compression","zstd","saveToString","saveArray","saveToArray","load","encoded","loadFromString","loadArray","loadFromArray","copy","cipher","clonedInstance","move","CipherTextInit","CKKSEncoderInit","CKKSEncoder","decodeDouble","CKKSEncoderConstructor","CoeffModulusInit","SecurityLevel","_MaxBitCount","CoeffModulus","MaxBitCount","_BFVDefault","BFVDefault","_CreateFromArray","CreateFromArray","securityLevel","tc128","vectorModulus","Create","bitSizes","CoeffModulusConstructor","ComprModeTypeInit","_none","none","_zlib","zlib","_zstd","ComprModeTypeConstructor","ContextDataConstructor","EncryptionParameters","EncryptionParameterQualifiers","encryptionParameters","qualifiers","encParmQualifiers","totalCoeffModulusBitCount","prevContextData","cxtData","nextContextData","chainIndex","ContextDataInit","ContextInit","ContextData","encryptionParams","expandModChain","SEALContext","toHuman","getContextData","contextData","keyContextData","firstContextData","lastContextData","parametersSet","keyParmsId","firstParmsId","lastParmsId","usingKeyswitching","ContextConstructor","DecryptorInit","secretKey","Decryptor","decrypt","cipherText","invariantNoiseBudget","DecryptorConstructor","EncryptionParametersInit","Modulus","SchemeType","schemeType","setPolyModulusDegree","setCoeffModulus","coeffModulus","setPlainModulus","plainModulus","scheme","smallModulus","BigInt","EncryptionParametersConstructor","EncryptorInit","CipherText","Serializable","publicKey","Encryptor","constructInstance","encrypt","encryptSerializable","temp","encryptSymmetric","encryptSymmetricSerializable","serialized","encryptZero","encryptZeroSerializable","EncryptorConstructor","EvaluatorInit","Evaluator","negate","encrypted","destination","add","sub","multiply","square","relinearize","relinKeys","cipherModSwitchToNext","cipherModSwitchTo","plainModSwitchToNext","plainModSwitchTo","rescaleToNext","rescaleTo","exponentiate","exponent","addPlain","subPlain","multiplyPlain","plainTransformToNtt","destinationNtt","cipherTransformToNtt","cipherTransformFromNtt","encryptedNtt","applyGalois","galoisElt","galoisKeys","rotateRows","steps","rotateColumns","rotateVector","complexConjugate","sumElements","newDest","dotProduct","dotProductPlain","EvaluatorConstructor","ExceptionInit","_getException","getException","error","ExceptionConstructor","GaloisKeysConstructor","GaloisKeys","getIndex","hasKey","key","GaloisKeysInit","KeyGeneratorInit","PublicKey","SecretKey","RelinKeys","KeyGenerator","createPublicKey","createPublicKeySerializable","createRelinKeys","createRelinKeysSerializable","createGaloisKeys","createGaloisKeysSerializable","KeyGeneratorConstructor","MemoryPoolHandleInit","_global","MemoryPoolHandleGlobal","_threadLocal","MemoryPoolHandleThreadLocal","threadLocal","MemoryPoolHandleConstructor","ModulusInit","inst","setValue","createModulus","bitCount","isZero","isPrime","ModulusConstructor","ParmsIdTypeInit","ParmsIdTypeConstructor","PlainTextConstructor","coeffCount","Plaintext","shrinkToFit","setZero","significantCoeffCount","nonzeroCoeffCount","toPolynomial","PlainTextInit","PlainModulusInit","_Batching","PlainModulus","Batching","_BatchingVector","BatchingVector","bitSize","smallMod","polyPlainModulusDegree","vectBitSizes","vect","PlainModulusConstructor","PublicKeyConstructor","PublicKeyInit","RelinKeysConstructor","keyPower","RelinKeysInit","SchemeTypeInit","_bfv","bfv","_ckks","ckks","_bgv","bgv","SchemeTypeConstructor","SecretKeyConstructor","SecretKeyInit","SecurityLevelInit","SecLevelType","_tc128","_tc192","tc192","_tc256","tc256","SecurityLevelConstructor","VectorInit","_vecFromArrayUint8","vecFromArrayUint8","_vecFromArrayUint32","vecFromArrayUint32","_vecFromArrayInt32","vecFromArrayInt32","_vecFromArrayFloat64","vecFromArrayFloat64","_vecFromArrayBigInt64","vecFromArrayBigInt64","_vecFromArrayBigUint64","vecFromArrayBigUint64","_vecFromArrayModulus","vecFromArrayModulus","_jsArrayUint8FromVec","jsArrayUint8FromVec","_jsArrayUint32FromVec","jsArrayUint32FromVec","_jsArrayInt32FromVec","jsArrayInt32FromVec","_jsArrayFloat64FromVec","jsArrayFloat64FromVec","_jsArrayStringFromVecInt64","jsArrayStringFromVecInt64","_jsArrayStringFromVecUint64","jsArrayStringFromVecUint64","_jsArrayStringFromVecModulus","jsArrayStringFromVecModulus","_type","type","getValue","index","fill","VectorConstructor","async","bin","createLoader","sealLibrary","Loader","Context","exception","comprModeType","memoryPoolHandle","vector","modulus","serializable","parmsIdType","batchEncoder","ckksEncoder","encryptionParameterQualifiers","decryptor","encryptor","evaluator","Version","SEALConstructor","usingFFT","usingNTT","usingBatching","usingFastPlainLift","usingDescendingModulusChain","SEAL"],"mappings":"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"}