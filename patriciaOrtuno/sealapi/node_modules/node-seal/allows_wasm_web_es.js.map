{"version":3,"file":"allows_wasm_web_es.js","sources":["../src/bin/seal_allows_wasm_web.js","../src/implementation/seal.ts","../src/implementation/batch-encoder.ts","../src/implementation/constants.ts","../src/implementation/cipher-text.ts","../src/implementation/ckks-encoder.ts","../src/implementation/coeff-modulus.ts","../src/implementation/compr-mode-type.ts","../src/implementation/context-data.ts","../src/implementation/context.ts","../src/implementation/decryptor.ts","../src/implementation/encryption-parameters.ts","../src/implementation/encryptor.ts","../src/implementation/evaluator.ts","../src/implementation/exception.ts","../src/implementation/galois-keys.ts","../src/implementation/key-generator.ts","../src/implementation/memory-pool-handle.ts","../src/implementation/modulus.ts","../src/implementation/parms-id-type.ts","../src/implementation/plain-text.ts","../src/implementation/plain-modulus.ts","../src/implementation/public-key.ts","../src/implementation/relin-keys.ts","../src/implementation/scheme-type.ts","../src/implementation/secret-key.ts","../src/implementation/security-level.ts","../src/implementation/vector.ts","../src/allows_wasm_web_es.ts","../src/main/loader.ts","../src/main/seal.ts","../src/implementation/encryption-parameter-qualifiers.ts","../src/implementation/serializable.ts"],"sourcesContent":["\nvar Module = (() => {\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n  \n  return (\nfunction(Module) {\n  Module = Module || {};\n\n\nvar h;h||(h=typeof Module !== 'undefined' ? Module : {});var aa,ba;h.ready=new Promise(function(a,b){aa=a;ba=b});var ca=Object.assign({},h),da=\"./this.program\",fa=(a,b)=>{throw b;},ha=\"object\"==typeof window,ia=\"function\"==typeof importScripts,t=\"\",ja,ka;\nif(ha||ia)ia?t=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(t=document.currentScript.src),_scriptDir&&(t=_scriptDir),0!==t.indexOf(\"blob:\")?t=t.substr(0,t.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):t=\"\",ia&&(ka=a=>{try{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.responseType=\"arraybuffer\";b.send(null);return new Uint8Array(b.response)}catch(c){if(a=la(a))return a;throw c;}}),ja=(a,b,c)=>{var d=new XMLHttpRequest;d.open(\"GET\",a,!0);d.responseType=\"arraybuffer\";d.onload=\n()=>{if(200==d.status||0==d.status&&d.response)b(d.response);else{var e=la(a);e?b(e.buffer):c()}};d.onerror=c;d.send(null)};var w=h.printErr||console.warn.bind(console);Object.assign(h,ca);ca=null;h.thisProgram&&(da=h.thisProgram);h.quit&&(fa=h.quit);var x;h.wasmBinary&&(x=h.wasmBinary);var noExitRuntime=h.noExitRuntime||!0;\"object\"!=typeof WebAssembly&&z(\"no native wasm support detected\");var ma,na=!1,oa=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;\nfunction pa(a,b){a>>>=0;if(a){var c=A;a>>>=0;var d=a+b;for(b=a;c[b>>>0]&&!(b>=d);)++b;if(16<b-a&&c.subarray&&oa)c=oa.decode(c.subarray(a>>>0,b>>>0));else{for(d=\"\";a<b;){var e=c[a++>>>0];if(e&128){var f=c[a++>>>0]&63;if(192==(e&224))d+=String.fromCharCode((e&31)<<6|f);else{var l=c[a++>>>0]&63;e=224==(e&240)?(e&15)<<12|f<<6|l:(e&7)<<18|f<<12|l<<6|c[a++>>>0]&63;65536>e?d+=String.fromCharCode(e):(e-=65536,d+=String.fromCharCode(55296|e>>10,56320|e&1023))}}else d+=String.fromCharCode(e)}c=d}}else c=\"\";\nreturn c}function qa(a,b,c,d){c>>>=0;if(0<d){d=c+d-1;for(var e=0;e<a.length;++e){var f=a.charCodeAt(e);if(55296<=f&&57343>=f){var l=a.charCodeAt(++e);f=65536+((f&1023)<<10)|l&1023}if(127>=f){if(c>=d)break;b[c++>>>0]=f}else{if(2047>=f){if(c+1>=d)break;b[c++>>>0]=192|f>>6}else{if(65535>=f){if(c+2>=d)break;b[c++>>>0]=224|f>>12}else{if(c+3>=d)break;b[c++>>>0]=240|f>>18;b[c++>>>0]=128|f>>12&63}b[c++>>>0]=128|f>>6&63}b[c++>>>0]=128|f&63}}b[c>>>0]=0}}\nfunction ra(a){for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);55296<=d&&57343>=d&&(d=65536+((d&1023)<<10)|a.charCodeAt(++c)&1023);127>=d?++b:b=2047>=d?b+2:65535>=d?b+3:b+4}return b}var sa=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf-16le\"):void 0;function ta(a,b){var c=a>>1;for(var d=c+b/2;!(c>=d)&&B[c>>>0];)++c;c<<=1;if(32<c-a&&sa)return sa.decode(A.subarray(a>>>0,c>>>0));c=\"\";for(d=0;!(d>=b/2);++d){var e=C[a+2*d>>1>>>0];if(0==e)break;c+=String.fromCharCode(e)}return c}\nfunction ua(a,b,c){void 0===c&&(c=2147483647);if(2>c)return 0;c-=2;var d=b;c=c<2*a.length?c/2:a.length;for(var e=0;e<c;++e)C[b>>1>>>0]=a.charCodeAt(e),b+=2;C[b>>1>>>0]=0;return b-d}function va(a){return 2*a.length}function wa(a,b){for(var c=0,d=\"\";!(c>=b/4);){var e=D[a+4*c>>2>>>0];if(0==e)break;++c;65536<=e?(e-=65536,d+=String.fromCharCode(55296|e>>10,56320|e&1023)):d+=String.fromCharCode(e)}return d}\nfunction xa(a,b,c){b>>>=0;void 0===c&&(c=2147483647);if(4>c)return 0;var d=b;c=d+c-4;for(var e=0;e<a.length;++e){var f=a.charCodeAt(e);if(55296<=f&&57343>=f){var l=a.charCodeAt(++e);f=65536+((f&1023)<<10)|l&1023}D[b>>2>>>0]=f;b+=4;if(b+4>c)break}D[b>>2>>>0]=0;return b-d}function ya(a){for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);55296<=d&&57343>=d&&++c;b+=4}return b}var za,E,A,C,B,D,F,Aa,Ba;\nfunction Ca(){var a=ma.buffer;za=a;h.HEAP8=E=new Int8Array(a);h.HEAP16=C=new Int16Array(a);h.HEAP32=D=new Int32Array(a);h.HEAPU8=A=new Uint8Array(a);h.HEAPU16=B=new Uint16Array(a);h.HEAPU32=F=new Uint32Array(a);h.HEAPF32=Aa=new Float32Array(a);h.HEAPF64=Ba=new Float64Array(a)}var Da,Ea=[],Fa=[],Ga=[],Ha=[];function Ia(){var a=h.preRun.shift();Ea.unshift(a)}var G=0,Ja=null,H=null;h.preloadedImages={};h.preloadedAudios={};\nfunction z(a){if(h.onAbort)h.onAbort(a);a=\"Aborted(\"+a+\")\";w(a);na=!0;a=new WebAssembly.RuntimeError(a+\". Build with -s ASSERTIONS=1 for more info.\");ba(a);throw a;}var Ka=\"data:application/octet-stream;base64,\",J;J=\"data:application/octet-stream;base64,\";if(!J.startsWith(Ka)){var La=J;J=h.locateFile?h.locateFile(La,t):t+La}function Ma(){var a=J;try{if(a==J&&x)return new Uint8Array(x);var b=la(a);if(b)return b;if(ka)return ka(a);throw\"both async and sync fetching of the wasm failed\";}catch(c){z(c)}}\nfunction Na(){if(!x&&(ha||ia)){if(\"function\"==typeof fetch&&!J.startsWith(\"file://\"))return fetch(J,{credentials:\"same-origin\"}).then(function(a){if(!a.ok)throw\"failed to load wasm binary file at '\"+J+\"'\";return a.arrayBuffer()}).catch(function(){return Ma()});if(ja)return new Promise(function(a,b){ja(J,function(c){a(new Uint8Array(c))},b)})}return Promise.resolve().then(function(){return Ma()})}\nfunction Oa(a){for(;0<a.length;){var b=a.shift();if(\"function\"==typeof b)b(h);else{var c=b.$a;\"number\"==typeof c?void 0===b.za?Pa(c)():Pa(c)(b.za):c(void 0===b.za?null:b.za)}}}var Qa=[];function Pa(a){var b=Qa[a];b||(a>=Qa.length&&(Qa.length=a+1),Qa[a]=b=Da.get(a));return b}\nfunction Ra(a){this.da=a-16;this.Ma=function(b){D[this.da+4>>2>>>0]=b};this.Ia=function(b){D[this.da+8>>2>>>0]=b};this.Ka=function(){D[this.da>>2>>>0]=0};this.Ga=function(){E[this.da+12>>0>>>0]=0};this.La=function(){E[this.da+13>>0>>>0]=0};this.Fa=function(b,c){this.Ma(b);this.Ia(c);this.Ka();this.Ga();this.La()}}var Sa=0;function Ta(a){switch(a){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(\"Unknown type size: \"+a);}}var Ua=void 0;\nfunction K(a){for(var b=\"\";A[a>>>0];)b+=Ua[A[a++>>>0]];return b}var L={},M={},Va={};function Wa(a){if(void 0===a)return\"_unknown\";a=a.replace(/[^a-zA-Z0-9_]/g,\"$\");var b=a.charCodeAt(0);return 48<=b&&57>=b?\"_\"+a:a}function Xa(a,b){a=Wa(a);return(new Function(\"body\",\"return function \"+a+'() {\\n    \"use strict\";    return body.apply(this, arguments);\\n};\\n'))(b)}\nfunction Ya(a){var b=Error,c=Xa(a,function(d){this.name=a;this.message=d;d=Error(d).stack;void 0!==d&&(this.stack=this.toString()+\"\\n\"+d.replace(/^Error(:[^\\n]*)?\\n/,\"\"))});c.prototype=Object.create(b.prototype);c.prototype.constructor=c;c.prototype.toString=function(){return void 0===this.message?this.name:this.name+\": \"+this.message};return c}var O=void 0;function P(a){throw new O(a);}var Za=void 0;function $a(a){throw new Za(a);}\nfunction Q(a,b,c){function d(k){k=c(k);k.length!==a.length&&$a(\"Mismatched type converter count\");for(var m=0;m<a.length;++m)R(a[m],k[m])}a.forEach(function(k){Va[k]=b});var e=Array(b.length),f=[],l=0;b.forEach(function(k,m){M.hasOwnProperty(k)?e[m]=M[k]:(f.push(k),L.hasOwnProperty(k)||(L[k]=[]),L[k].push(function(){e[m]=M[k];++l;l===f.length&&d(e)}))});0===f.length&&d(e)}\nfunction R(a,b,c={}){if(!(\"argPackAdvance\"in b))throw new TypeError(\"registerType registeredInstance requires argPackAdvance\");var d=b.name;a||P('type \"'+d+'\" must have a positive integer typeid pointer');if(M.hasOwnProperty(a)){if(c.Pa)return;P(\"Cannot register type '\"+d+\"' twice\")}M[a]=b;delete Va[a];L.hasOwnProperty(a)&&(b=L[a],delete L[a],b.forEach(function(e){e()}))}function ab(a){P(a.ba.ea.ca.name+\" instance already deleted\")}var bb=!1;function cb(){}\nfunction db(a){--a.count.value;0===a.count.value&&(a.ga?a.ia.na(a.ga):a.ea.ca.na(a.da))}function eb(a,b,c){if(b===c)return a;if(void 0===c.ja)return null;a=eb(a,b,c.ja);return null===a?null:c.Ja(a)}var fb={},gb=[];function hb(){for(;gb.length;){var a=gb.pop();a.ba.pa=!1;a[\"delete\"]()}}var ib=void 0,jb={};function kb(a,b){for(void 0===b&&P(\"ptr should not be undefined\");a.ja;)b=a.ta(b),a=a.ja;return jb[b]}\nfunction lb(a,b){b.ea&&b.da||$a(\"makeClassHandle requires ptr and ptrType\");!!b.ia!==!!b.ga&&$a(\"Both smartPtrType and smartPtr must be specified\");b.count={value:1};return mb(Object.create(a,{ba:{value:b}}))}function mb(a){if(\"undefined\"===typeof FinalizationRegistry)return mb=b=>b,a;bb=new FinalizationRegistry(b=>{db(b.ba)});mb=b=>{var c=b.ba;c.ga&&bb.register(b,{ba:c},b);return b};cb=b=>{bb.unregister(b)};return mb(a)}function S(){}\nfunction nb(a,b,c){if(void 0===a[b].fa){var d=a[b];a[b]=function(){a[b].fa.hasOwnProperty(arguments.length)||P(\"Function '\"+c+\"' called with an invalid number of arguments (\"+arguments.length+\") - expects one of (\"+a[b].fa+\")!\");return a[b].fa[arguments.length].apply(this,arguments)};a[b].fa=[];a[b].fa[d.oa]=d}}\nfunction ob(a,b,c){h.hasOwnProperty(a)?((void 0===c||void 0!==h[a].fa&&void 0!==h[a].fa[c])&&P(\"Cannot register public name '\"+a+\"' twice\"),nb(h,a,a),h.hasOwnProperty(c)&&P(\"Cannot register multiple overloads of a function with the same number of arguments (\"+c+\")!\"),h[a].fa[c]=b):(h[a]=b,void 0!==c&&(h[a].ab=c))}function pb(a,b,c,d,e,f,l,k){this.name=a;this.constructor=b;this.la=c;this.na=d;this.ja=e;this.Na=f;this.ta=l;this.Ja=k;this.Sa=[]}\nfunction qb(a,b,c){for(;b!==c;)b.ta||P(\"Expected null or instance of \"+c.name+\", got an instance of \"+b.name),a=b.ta(a),b=b.ja;return a}function rb(a,b){if(null===b)return this.Aa&&P(\"null is not a valid \"+this.name),0;b.ba||P('Cannot pass \"'+sb(b)+'\" as a '+this.name);b.ba.da||P(\"Cannot pass deleted object as a pointer of type \"+this.name);return qb(b.ba.da,b.ba.ea.ca,this.ca)}\nfunction tb(a,b){if(null===b){this.Aa&&P(\"null is not a valid \"+this.name);if(this.va){var c=this.Ta();null!==a&&a.push(this.na,c);return c}return 0}b.ba||P('Cannot pass \"'+sb(b)+'\" as a '+this.name);b.ba.da||P(\"Cannot pass deleted object as a pointer of type \"+this.name);!this.ua&&b.ba.ea.ua&&P(\"Cannot convert argument of type \"+(b.ba.ia?b.ba.ia.name:b.ba.ea.name)+\" to parameter type \"+this.name);c=qb(b.ba.da,b.ba.ea.ca,this.ca);if(this.va)switch(void 0===b.ba.ga&&P(\"Passing raw pointer to smart pointer is illegal\"),\nthis.Va){case 0:b.ba.ia===this?c=b.ba.ga:P(\"Cannot convert argument of type \"+(b.ba.ia?b.ba.ia.name:b.ba.ea.name)+\" to parameter type \"+this.name);break;case 1:c=b.ba.ga;break;case 2:if(b.ba.ia===this)c=b.ba.ga;else{var d=b.clone();c=this.Ua(c,T(function(){d[\"delete\"]()}));null!==a&&a.push(this.na,c)}break;default:P(\"Unsupporting sharing policy\")}return c}\nfunction ub(a,b){if(null===b)return this.Aa&&P(\"null is not a valid \"+this.name),0;b.ba||P('Cannot pass \"'+sb(b)+'\" as a '+this.name);b.ba.da||P(\"Cannot pass deleted object as a pointer of type \"+this.name);b.ba.ea.ua&&P(\"Cannot convert argument of type \"+b.ba.ea.name+\" to parameter type \"+this.name);return qb(b.ba.da,b.ba.ea.ca,this.ca)}function vb(a){return this.fromWireType(F[a>>>2])}\nfunction U(a,b,c,d){this.name=a;this.ca=b;this.Aa=c;this.ua=d;this.va=!1;this.na=this.Ua=this.Ta=this.Ea=this.Va=this.Ra=void 0;void 0!==b.ja?this.toWireType=tb:(this.toWireType=d?rb:ub,this.ka=null)}function wb(a,b,c){h.hasOwnProperty(a)||$a(\"Replacing nonexistant public symbol\");void 0!==h[a].fa&&void 0!==c?h[a].fa[c]=b:(h[a]=b,h[a].oa=c)}\nfunction xb(a,b){var c=[];return function(){c.length=0;Object.assign(c,arguments);if(a.includes(\"j\")){var d=h[\"dynCall_\"+a];d=c&&c.length?d.apply(null,[b].concat(c)):d.call(null,b)}else d=Pa(b).apply(null,c);return d}}function V(a,b){a=K(a);var c=a.includes(\"j\")?xb(a,b):Pa(b);\"function\"!=typeof c&&P(\"unknown function pointer with signature \"+a+\": \"+b);return c}var yb=void 0;function zb(a){a=Ab(a);var b=K(a);W(a);return b}\nfunction X(a,b){function c(f){e[f]||M[f]||(Va[f]?Va[f].forEach(c):(d.push(f),e[f]=!0))}var d=[],e={};b.forEach(c);throw new yb(a+\": \"+d.map(zb).join([\", \"]));}function Bb(a){var b=Function;if(!(b instanceof Function))throw new TypeError(\"new_ called with constructor type \"+typeof b+\" which is not a function\");var c=Xa(b.name||\"unknownFunctionName\",function(){});c.prototype=b.prototype;c=new c;a=b.apply(c,a);return a instanceof Object?a:c}function Cb(a){for(;a.length;){var b=a.pop();a.pop()(b)}}\nfunction Db(a,b,c,d,e){var f=b.length;2>f&&P(\"argTypes array size mismatch! Must at least get return value and 'this' types!\");var l=null!==b[1]&&null!==c,k=!1;for(c=1;c<b.length;++c)if(null!==b[c]&&void 0===b[c].ka){k=!0;break}var m=\"void\"!==b[0].name,p=\"\",n=\"\";for(c=0;c<f-2;++c)p+=(0!==c?\", \":\"\")+\"arg\"+c,n+=(0!==c?\", \":\"\")+\"arg\"+c+\"Wired\";a=\"return function \"+Wa(a)+\"(\"+p+\") {\\nif (arguments.length !== \"+(f-2)+\") {\\nthrowBindingError('function \"+a+\" called with ' + arguments.length + ' arguments, expected \"+\n(f-2)+\" args!');\\n}\\n\";k&&(a+=\"var destructors = [];\\n\");var r=k?\"destructors\":\"null\";p=\"throwBindingError invoker fn runDestructors retType classParam\".split(\" \");d=[P,d,e,Cb,b[0],b[1]];l&&(a+=\"var thisWired = classParam.toWireType(\"+r+\", this);\\n\");for(c=0;c<f-2;++c)a+=\"var arg\"+c+\"Wired = argType\"+c+\".toWireType(\"+r+\", arg\"+c+\"); // \"+b[c+2].name+\"\\n\",p.push(\"argType\"+c),d.push(b[c+2]);l&&(n=\"thisWired\"+(0<n.length?\", \":\"\")+n);a+=(m?\"var rv = \":\"\")+\"invoker(fn\"+(0<n.length?\", \":\"\")+n+\");\\n\";if(k)a+=\n\"runDestructors(destructors);\\n\";else for(c=l?1:2;c<b.length;++c)f=1===c?\"thisWired\":\"arg\"+(c-2)+\"Wired\",null!==b[c].ka&&(a+=f+\"_dtor(\"+f+\"); // \"+b[c].name+\"\\n\",p.push(f+\"_dtor\"),d.push(b[c].ka));m&&(a+=\"var ret = retType.fromWireType(rv);\\nreturn ret;\\n\");p.push(a+\"}\\n\");return Bb(p).apply(null,d)}function Eb(a,b){for(var c=[],d=0;d<a;d++)c.push(D[(b>>2)+d>>>0]);return c}\nfunction Fb(a,b,c){a instanceof Object||P(c+' with invalid \"this\": '+a);a instanceof b.ca.constructor||P(c+' incompatible with \"this\" of type '+a.constructor.name);a.ba.da||P(\"cannot call emscripten binding method \"+c+\" on deleted object\");return qb(a.ba.da,a.ba.ea.ca,b.ca)}var Gb=[],Y=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function Hb(a){4<a&&0===--Y[a].Ba&&(Y[a]=void 0,Gb.push(a))}function Z(a){a||P(\"Cannot use deleted val. handle = \"+a);return Y[a].value}\nfunction T(a){switch(a){case void 0:return 1;case null:return 2;case !0:return 3;case !1:return 4;default:var b=Gb.length?Gb.pop():Y.length;Y[b]={Ba:1,value:a};return b}}function Ib(a,b,c){switch(b){case 0:return function(d){return this.fromWireType((c?E:A)[d>>>0])};case 1:return function(d){return this.fromWireType((c?C:B)[d>>>1])};case 2:return function(d){return this.fromWireType((c?D:F)[d>>>2])};default:throw new TypeError(\"Unknown integer type: \"+a);}}\nfunction Kb(a,b){var c=M[a];void 0===c&&P(b+\" has unknown type \"+zb(a));return c}function sb(a){if(null===a)return\"null\";var b=typeof a;return\"object\"===b||\"array\"===b||\"function\"===b?a.toString():\"\"+a}function Lb(a,b){switch(b){case 2:return function(c){return this.fromWireType(Aa[c>>>2])};case 3:return function(c){return this.fromWireType(Ba[c>>>3])};default:throw new TypeError(\"Unknown float type: \"+a);}}\nfunction Mb(a,b,c){switch(b){case 0:return c?function(d){return E[d>>>0]}:function(d){return A[d>>>0]};case 1:return c?function(d){return C[d>>>1]}:function(d){return B[d>>>1]};case 2:return c?function(d){return D[d>>>2]}:function(d){return F[d>>>2]};default:throw new TypeError(\"Unknown integer type: \"+a);}}var Nb={};function Ob(a){var b=Nb[a];return void 0===b?K(a):b}var Pb=[];function Qb(a){var b=Pb.length;Pb.push(a);return b}\nfunction Rb(a,b){for(var c=Array(a),d=0;d<a;++d)c[d]=Kb(D[(b>>2)+d>>>0],\"parameter \"+d);return c}var Sb=[],Tb={};function Ub(){if(!Vb){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:da||\"./this.program\"},b;for(b in Tb)void 0===Tb[b]?delete a[b]:a[b]=Tb[b];var c=[];for(b in a)c.push(b+\"=\"+a[b]);Vb=c}return Vb}var Vb;\nfunction Wb(){if(\"object\"==typeof crypto&&\"function\"==typeof crypto.getRandomValues){var a=new Uint8Array(1);return function(){crypto.getRandomValues(a);return a[0]}}return function(){z(\"randomDevice\")}}function Xb(a,b){Xb.Da||(Xb.Da=Wb());for(var c=0;c<b;c++)E[a+c>>0>>>0]=Xb.Da();return 0}function Yb(a){return 0===a%4&&(0!==a%100||0===a%400)}function Zb(a,b){for(var c=0,d=0;d<=b;c+=a[d++]);return c}var $b=[31,29,31,30,31,30,31,31,30,31,30,31],ac=[31,28,31,30,31,30,31,31,30,31,30,31];\nfunction bc(a,b){for(a=new Date(a.getTime());0<b;){var c=a.getMonth(),d=(Yb(a.getFullYear())?$b:ac)[c];if(b>d-a.getDate())b-=d-a.getDate()+1,a.setDate(1),11>c?a.setMonth(c+1):(a.setMonth(0),a.setFullYear(a.getFullYear()+1));else{a.setDate(a.getDate()+b);break}}return a}\nfunction cc(a,b,c,d){function e(g,q,v){for(g=\"number\"==typeof g?g.toString():g||\"\";g.length<q;)g=v[0]+g;return g}function f(g,q){return e(g,q,\"0\")}function l(g,q){function v(I){return 0>I?-1:0<I?1:0}var y;0===(y=v(g.getFullYear()-q.getFullYear()))&&0===(y=v(g.getMonth()-q.getMonth()))&&(y=v(g.getDate()-q.getDate()));return y}function k(g){switch(g.getDay()){case 0:return new Date(g.getFullYear()-1,11,29);case 1:return g;case 2:return new Date(g.getFullYear(),0,3);case 3:return new Date(g.getFullYear(),\n0,2);case 4:return new Date(g.getFullYear(),0,1);case 5:return new Date(g.getFullYear()-1,11,31);case 6:return new Date(g.getFullYear()-1,11,30)}}function m(g){g=bc(new Date(g.ha+1900,0,1),g.ya);var q=new Date(g.getFullYear()+1,0,4),v=k(new Date(g.getFullYear(),0,4));q=k(q);return 0>=l(v,g)?0>=l(q,g)?g.getFullYear()+1:g.getFullYear():g.getFullYear()-1}var p=D[d+40>>2>>>0];d={Ya:D[d>>2>>>0],Xa:D[d+4>>2>>>0],wa:D[d+8>>2>>>0],sa:D[d+12>>2>>>0],qa:D[d+16>>2>>>0],ha:D[d+20>>2>>>0],xa:D[d+24>>2>>>0],ya:D[d+\n28>>2>>>0],bb:D[d+32>>2>>>0],Wa:D[d+36>>2>>>0],Za:p?pa(p):\"\"};c=pa(c);p={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var n in p)c=c.replace(new RegExp(n,\"g\"),p[n]);var r=\n\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),u=\"January February March April May June July August September October November December\".split(\" \");p={\"%a\":function(g){return r[g.xa].substring(0,3)},\"%A\":function(g){return r[g.xa]},\"%b\":function(g){return u[g.qa].substring(0,3)},\"%B\":function(g){return u[g.qa]},\"%C\":function(g){return f((g.ha+1900)/100|0,2)},\"%d\":function(g){return f(g.sa,2)},\"%e\":function(g){return e(g.sa,2,\" \")},\"%g\":function(g){return m(g).toString().substring(2)},\n\"%G\":function(g){return m(g)},\"%H\":function(g){return f(g.wa,2)},\"%I\":function(g){g=g.wa;0==g?g=12:12<g&&(g-=12);return f(g,2)},\"%j\":function(g){return f(g.sa+Zb(Yb(g.ha+1900)?$b:ac,g.qa-1),3)},\"%m\":function(g){return f(g.qa+1,2)},\"%M\":function(g){return f(g.Xa,2)},\"%n\":function(){return\"\\n\"},\"%p\":function(g){return 0<=g.wa&&12>g.wa?\"AM\":\"PM\"},\"%S\":function(g){return f(g.Ya,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(g){return g.xa||7},\"%U\":function(g){var q=new Date(g.ha+1900,0,1),v=0===q.getDay()?\nq:bc(q,7-q.getDay());g=new Date(g.ha+1900,g.qa,g.sa);return 0>l(v,g)?f(Math.ceil((31-v.getDate()+(Zb(Yb(g.getFullYear())?$b:ac,g.getMonth()-1)-31)+g.getDate())/7),2):0===l(v,q)?\"01\":\"00\"},\"%V\":function(g){var q=new Date(g.ha+1901,0,4),v=k(new Date(g.ha+1900,0,4));q=k(q);var y=bc(new Date(g.ha+1900,0,1),g.ya);return 0>l(y,v)?\"53\":0>=l(q,y)?\"01\":f(Math.ceil((v.getFullYear()<g.ha+1900?g.ya+32-v.getDate():g.ya+1-v.getDate())/7),2)},\"%w\":function(g){return g.xa},\"%W\":function(g){var q=new Date(g.ha,0,\n1),v=1===q.getDay()?q:bc(q,0===q.getDay()?1:7-q.getDay()+1);g=new Date(g.ha+1900,g.qa,g.sa);return 0>l(v,g)?f(Math.ceil((31-v.getDate()+(Zb(Yb(g.getFullYear())?$b:ac,g.getMonth()-1)-31)+g.getDate())/7),2):0===l(v,q)?\"01\":\"00\"},\"%y\":function(g){return(g.ha+1900).toString().substring(2)},\"%Y\":function(g){return g.ha+1900},\"%z\":function(g){g=g.Wa;var q=0<=g;g=Math.abs(g)/60;return(q?\"+\":\"-\")+String(\"0000\"+(g/60*100+g%60)).slice(-4)},\"%Z\":function(g){return g.Za},\"%%\":function(){return\"%\"}};c=c.replace(/%%/g,\n\"\\x00\\x00\");for(n in p)c.includes(n)&&(c=c.replace(new RegExp(n,\"g\"),p[n](d)));c=c.replace(/\\0\\0/g,\"%\");n=dc(c);if(n.length>b)return 0;E.set(n,a>>>0);return n.length-1}for(var ec=Array(256),fc=0;256>fc;++fc)ec[fc]=String.fromCharCode(fc);Ua=ec;O=h.BindingError=Ya(\"BindingError\");Za=h.InternalError=Ya(\"InternalError\");\nS.prototype.isAliasOf=function(a){if(!(this instanceof S&&a instanceof S))return!1;var b=this.ba.ea.ca,c=this.ba.da,d=a.ba.ea.ca;for(a=a.ba.da;b.ja;)c=b.ta(c),b=b.ja;for(;d.ja;)a=d.ta(a),d=d.ja;return b===d&&c===a};\nS.prototype.clone=function(){this.ba.da||ab(this);if(this.ba.ra)return this.ba.count.value+=1,this;var a=mb,b=Object,c=b.create,d=Object.getPrototypeOf(this),e=this.ba;a=a(c.call(b,d,{ba:{value:{count:e.count,pa:e.pa,ra:e.ra,da:e.da,ea:e.ea,ga:e.ga,ia:e.ia}}}));a.ba.count.value+=1;a.ba.pa=!1;return a};S.prototype[\"delete\"]=function(){this.ba.da||ab(this);this.ba.pa&&!this.ba.ra&&P(\"Object already scheduled for deletion\");cb(this);db(this.ba);this.ba.ra||(this.ba.ga=void 0,this.ba.da=void 0)};\nS.prototype.isDeleted=function(){return!this.ba.da};S.prototype.deleteLater=function(){this.ba.da||ab(this);this.ba.pa&&!this.ba.ra&&P(\"Object already scheduled for deletion\");gb.push(this);1===gb.length&&ib&&ib(hb);this.ba.pa=!0;return this};h.getInheritedInstanceCount=function(){return Object.keys(jb).length};h.getLiveInheritedInstances=function(){var a=[],b;for(b in jb)jb.hasOwnProperty(b)&&a.push(jb[b]);return a};h.flushPendingDeletes=hb;h.setDelayFunction=function(a){ib=a;gb.length&&ib&&ib(hb)};\nU.prototype.Oa=function(a){this.Ea&&(a=this.Ea(a));return a};U.prototype.Ca=function(a){this.na&&this.na(a)};U.prototype.argPackAdvance=8;U.prototype.readValueFromPointer=vb;U.prototype.deleteObject=function(a){if(null!==a)a[\"delete\"]()};\nU.prototype.fromWireType=function(a){function b(){return this.va?lb(this.ca.la,{ea:this.Ra,da:c,ia:this,ga:a}):lb(this.ca.la,{ea:this,da:a})}var c=this.Oa(a);if(!c)return this.Ca(a),null;var d=kb(this.ca,c);if(void 0!==d){if(0===d.ba.count.value)return d.ba.da=c,d.ba.ga=a,d.clone();d=d.clone();this.Ca(a);return d}d=this.ca.Na(c);d=fb[d];if(!d)return b.call(this);d=this.ua?d.Ha:d.pointerType;var e=eb(c,this.ca,d.ca);return null===e?b.call(this):this.va?lb(d.ca.la,{ea:d,da:e,ia:this,ga:a}):lb(d.ca.la,\n{ea:d,da:e})};yb=h.UnboundTypeError=Ya(\"UnboundTypeError\");h.count_emval_handles=function(){for(var a=0,b=5;b<Y.length;++b)void 0!==Y[b]&&++a;return a};h.get_first_emval=function(){for(var a=5;a<Y.length;++a)if(void 0!==Y[a])return Y[a];return null};function dc(a){var b=Array(ra(a)+1);qa(a,b,0,b.length);return b}\nvar gc=\"function\"==typeof atob?atob:function(a){var b=\"\",c=0;a=a.replace(/[^A-Za-z0-9\\+\\/=]/g,\"\");do{var d=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\".indexOf(a.charAt(c++));var e=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\".indexOf(a.charAt(c++));var f=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\".indexOf(a.charAt(c++));var l=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\".indexOf(a.charAt(c++));d=d<<2|e>>4;\ne=(e&15)<<4|f>>2;var k=(f&3)<<6|l;b+=String.fromCharCode(d);64!==f&&(b+=String.fromCharCode(e));64!==l&&(b+=String.fromCharCode(k))}while(c<a.length);return b};function la(a){if(a.startsWith(Ka)){try{var b=gc(a.slice(Ka.length)),c=new Uint8Array(b.length);for(a=0;a<b.length;++a)c[a]=b.charCodeAt(a)}catch(d){throw Error(\"Converting base64 string to bytes failed.\");}return c}}\nvar ic={a:function(a){return hc(a+16)+16},b:function(a,b,c){(new Ra(a)).Fa(b,c);Sa++;throw a;},E:function(){},J:function(a,b,c,d,e){var f=Ta(c);b=K(b);R(a,{name:b,fromWireType:function(l){return!!l},toWireType:function(l,k){return k?d:e},argPackAdvance:8,readValueFromPointer:function(l){if(1===c)var k=E;else if(2===c)k=C;else if(4===c)k=D;else throw new TypeError(\"Unknown boolean type size: \"+b);return this.fromWireType(k[l>>>f])},ka:null})},e:function(a,b,c,d,e,f,l,k,m,p,n,r,u){n=K(n);f=V(e,f);k&&\n(k=V(l,k));p&&(p=V(m,p));u=V(r,u);var g=Wa(n);ob(g,function(){X(\"Cannot construct \"+n+\" due to unbound types\",[d])});Q([a,b,c],d?[d]:[],function(q){q=q[0];if(d){var v=q.ca;var y=v.la}else y=S.prototype;q=Xa(g,function(){if(Object.getPrototypeOf(this)!==I)throw new O(\"Use 'new' to construct \"+n);if(void 0===N.ma)throw new O(n+\" has no accessible constructor\");var Jb=N.ma[arguments.length];if(void 0===Jb)throw new O(\"Tried to invoke ctor of \"+n+\" with invalid number of parameters (\"+arguments.length+\n\") - expected (\"+Object.keys(N.ma).toString()+\") parameters instead!\");return Jb.apply(this,arguments)});var I=Object.create(y,{constructor:{value:q}});q.prototype=I;var N=new pb(n,q,I,u,v,f,k,p);v=new U(n,N,!0,!1);y=new U(n+\"*\",N,!1,!1);var ea=new U(n+\" const*\",N,!1,!0);fb[a]={pointerType:y,Ha:ea};wb(g,q);return[v,y,ea]})},t:function(a,b,c,d,e,f,l){var k=Eb(c,d);b=K(b);f=V(e,f);Q([],[a],function(m){function p(){X(\"Cannot call \"+n+\" due to unbound types\",k)}m=m[0];var n=m.name+\".\"+b;b.startsWith(\"@@\")&&\n(b=Symbol[b.substring(2)]);var r=m.ca.constructor;void 0===r[b]?(p.oa=c-1,r[b]=p):(nb(r,b,n),r[b].fa[c-1]=p);Q([],k,function(u){u=Db(n,[u[0],null].concat(u.slice(1)),null,f,l);void 0===r[b].fa?(u.oa=c-1,r[b]=u):r[b].fa[c-1]=u;return[]});return[]})},z:function(a,b,c,d,e,f,l,k){b=K(b);f=V(e,f);Q([],[a],function(m){m=m[0];var p=m.name+\".\"+b,n={get:function(){X(\"Cannot access \"+p+\" due to unbound types\",[c])},enumerable:!0,configurable:!0};n.set=k?()=>{X(\"Cannot access \"+p+\" due to unbound types\",[c])}:\n()=>{P(p+\" is a read-only property\")};Object.defineProperty(m.ca.constructor,b,n);Q([],[c],function(r){r=r[0];var u={get:function(){return r.fromWireType(f(d))},enumerable:!0};k&&(k=V(l,k),u.set=g=>{var q=[];k(d,r.toWireType(q,g));Cb(q)});Object.defineProperty(m.ca.constructor,b,u);return[]});return[]})},f:function(a,b,c,d,e,f){0<b||z(void 0);var l=Eb(b,c);e=V(d,e);Q([],[a],function(k){k=k[0];var m=\"constructor \"+k.name;void 0===k.ca.ma&&(k.ca.ma=[]);if(void 0!==k.ca.ma[b-1])throw new O(\"Cannot register multiple constructors with identical number of parameters (\"+\n(b-1)+\") for class '\"+k.name+\"'! Overload resolution is currently only performed using the parameter count, not actual type info!\");k.ca.ma[b-1]=()=>{X(\"Cannot construct \"+k.name+\" due to unbound types\",l)};Q([],l,function(p){p.splice(1,0,null);k.ca.ma[b-1]=Db(m,p,null,e,f);return[]});return[]})},c:function(a,b,c,d,e,f,l,k){var m=Eb(c,d);b=K(b);f=V(e,f);Q([],[a],function(p){function n(){X(\"Cannot call \"+r+\" due to unbound types\",m)}p=p[0];var r=p.name+\".\"+b;b.startsWith(\"@@\")&&(b=Symbol[b.substring(2)]);\nk&&p.ca.Sa.push(b);var u=p.ca.la,g=u[b];void 0===g||void 0===g.fa&&g.className!==p.name&&g.oa===c-2?(n.oa=c-2,n.className=p.name,u[b]=n):(nb(u,b,r),u[b].fa[c-2]=n);Q([],m,function(q){q=Db(r,q,p,f,l);void 0===u[b].fa?(q.oa=c-2,u[b]=q):u[b].fa[c-2]=q;return[]});return[]})},u:function(a,b,c,d,e,f,l,k,m,p){b=K(b);e=V(d,e);Q([],[a],function(n){n=n[0];var r=n.name+\".\"+b,u={get:function(){X(\"Cannot access \"+r+\" due to unbound types\",[c,l])},enumerable:!0,configurable:!0};u.set=m?()=>{X(\"Cannot access \"+\nr+\" due to unbound types\",[c,l])}:()=>{P(r+\" is a read-only property\")};Object.defineProperty(n.ca.la,b,u);Q([],m?[c,l]:[c],function(g){var q=g[0],v={get:function(){var I=Fb(this,n,r+\" getter\");return q.fromWireType(e(f,I))},enumerable:!0};if(m){m=V(k,m);var y=g[1];v.set=function(I){var N=Fb(this,n,r+\" setter\"),ea=[];m(p,N,y.toWireType(ea,I));Cb(ea)}}Object.defineProperty(n.ca.la,b,v);return[]});return[]})},D:function(a,b){b=K(b);R(a,{name:b,fromWireType:function(c){var d=Z(c);Hb(c);return d},toWireType:function(c,\nd){return T(d)},argPackAdvance:8,readValueFromPointer:vb,ka:null})},w:function(a,b,c,d){function e(){}c=Ta(c);b=K(b);e.values={};R(a,{name:b,constructor:e,fromWireType:function(f){return this.constructor.values[f]},toWireType:function(f,l){return l.value},argPackAdvance:8,readValueFromPointer:Ib(b,c,d),ka:null});ob(b,e)},q:function(a,b,c){var d=Kb(a,\"enum\");b=K(b);a=d.constructor;d=Object.create(d.constructor.prototype,{value:{value:c},constructor:{value:Xa(d.name+\"_\"+b,function(){})}});a.values[c]=\nd;a[b]=d},y:function(a,b,c){c=Ta(c);b=K(b);R(a,{name:b,fromWireType:function(d){return d},toWireType:function(d,e){return e},argPackAdvance:8,readValueFromPointer:Lb(b,c),ka:null})},p:function(a,b,c,d,e,f){var l=Eb(b,c);a=K(a);e=V(d,e);ob(a,function(){X(\"Cannot call \"+a+\" due to unbound types\",l)},b-1);Q([],l,function(k){wb(a,Db(a,[k[0],null].concat(k.slice(1)),null,e,f),b-1);return[]})},s:function(a,b,c,d,e){b=K(b);-1===e&&(e=4294967295);e=Ta(c);var f=k=>k;if(0===d){var l=32-8*c;f=k=>k<<l>>>l}c=\nb.includes(\"unsigned\")?function(k,m){return m>>>0}:function(k,m){return m};R(a,{name:b,fromWireType:f,toWireType:c,argPackAdvance:8,readValueFromPointer:Mb(b,e,0!==d),ka:null})},o:function(a,b,c){function d(f){f>>=2;var l=F;return new e(za,l[f+1>>>0],l[f>>>0])}var e=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][b];c=K(c);R(a,{name:c,fromWireType:d,argPackAdvance:8,readValueFromPointer:d},{Pa:!0})},A:function(a,b){b=K(b);var c=\"std::string\"===b;R(a,\n{name:b,fromWireType:function(d){var e=F[d>>>2];if(c)for(var f=d+4,l=0;l<=e;++l){var k=d+4+l;if(l==e||0==A[k>>>0]){f=pa(f,k-f);if(void 0===m)var m=f;else m+=String.fromCharCode(0),m+=f;f=k+1}}else{m=Array(e);for(l=0;l<e;++l)m[l]=String.fromCharCode(A[d+4+l>>>0]);m=m.join(\"\")}W(d);return m},toWireType:function(d,e){e instanceof ArrayBuffer&&(e=new Uint8Array(e));var f=\"string\"==typeof e;f||e instanceof Uint8Array||e instanceof Uint8ClampedArray||e instanceof Int8Array||P(\"Cannot pass non-string to std::string\");\nvar l=(c&&f?()=>ra(e):()=>e.length)(),k=hc(4+l+1);k>>>=0;F[k>>>2]=l;if(c&&f)qa(e,A,k+4,l+1);else if(f)for(f=0;f<l;++f){var m=e.charCodeAt(f);255<m&&(W(k),P(\"String has UTF-16 code units that do not fit in 8 bits\"));A[k+4+f>>>0]=m}else for(f=0;f<l;++f)A[k+4+f>>>0]=e[f];null!==d&&d.push(W,k);return k},argPackAdvance:8,readValueFromPointer:vb,ka:function(d){W(d)}})},x:function(a,b,c){c=K(c);if(2===b){var d=ta;var e=ua;var f=va;var l=()=>B;var k=1}else 4===b&&(d=wa,e=xa,f=ya,l=()=>F,k=2);R(a,{name:c,\nfromWireType:function(m){for(var p=F[m>>>2],n=l(),r,u=m+4,g=0;g<=p;++g){var q=m+4+g*b;if(g==p||0==n[q>>>k])u=d(u,q-u),void 0===r?r=u:(r+=String.fromCharCode(0),r+=u),u=q+b}W(m);return r},toWireType:function(m,p){\"string\"!=typeof p&&P(\"Cannot pass non-string to C++ string type \"+c);var n=f(p),r=hc(4+n+b);r>>>=0;F[r>>>2]=n>>k;e(p,r+4,n+b);null!==m&&m.push(W,r);return r},argPackAdvance:8,readValueFromPointer:vb,ka:function(m){W(m)}})},K:function(a,b){b=K(b);R(a,{Qa:!0,name:b,argPackAdvance:0,fromWireType:function(){},\ntoWireType:function(){}})},i:function(a,b,c){a=Z(a);b=Kb(b,\"emval::as\");var d=[],e=T(d);D[c>>>2]=e;return b.toWireType(d,a)},l:function(a,b,c,d){a=Pb[a];b=Z(b);c=Ob(c);a(b,c,null,d)},d:Hb,k:function(a,b){var c=Rb(a,b),d=c[0];b=d.name+\"_$\"+c.slice(1).map(function(n){return n.name}).join(\"_\")+\"$\";var e=Sb[b];if(void 0!==e)return e;e=[\"retType\"];for(var f=[d],l=\"\",k=0;k<a-1;++k)l+=(0!==k?\", \":\"\")+\"arg\"+k,e.push(\"argType\"+k),f.push(c[1+k]);var m=\"return function \"+Wa(\"methodCaller_\"+b)+\"(handle, name, destructors, args) {\\n\",\np=0;for(k=0;k<a-1;++k)m+=\"    var arg\"+k+\" = argType\"+k+\".readValueFromPointer(args\"+(p?\"+\"+p:\"\")+\");\\n\",p+=c[k+1].argPackAdvance;m+=\"    var rv = handle[name](\"+l+\");\\n\";for(k=0;k<a-1;++k)c[k+1].deleteObject&&(m+=\"    argType\"+k+\".deleteObject(arg\"+k+\");\\n\");d.Qa||(m+=\"    return retType.toWireType(destructors, rv);\\n\");e.push(m+\"};\\n\");a=Bb(e).apply(null,f);e=Qb(a);return Sb[b]=e},j:function(a,b){a=Z(a);b=Z(b);return T(a[b])},m:function(a){4<a&&(Y[a].Ba+=1)},r:function(){return T([])},n:function(a){return T(Ob(a))},\nh:function(a){var b=Z(a);Cb(b);Hb(a)},g:function(a,b){a=Kb(a,\"_emval_take_value\");a=a.readValueFromPointer(b);return T(a)},B:function(){z(\"\")},C:function(a,b,c){A.copyWithin(a>>>0,b>>>0,b+c>>>0)},v:function(a){var b=A.length;a>>>=0;if(4294901760<a)return!1;for(var c=1;4>=c;c*=2){var d=b*(1+.2/c);d=Math.min(d,a+100663296);var e=Math;d=Math.max(a,d);e=e.min.call(e,4294901760,d+(65536-d%65536)%65536);a:{try{ma.grow(e-za.byteLength+65535>>>16);Ca();var f=1;break a}catch(l){}f=void 0}if(f)return!0}return!1},\nH:function(a,b){var c=0;Ub().forEach(function(d,e){var f=b+c;e=D[a+4*e>>2>>>0]=f;for(f=0;f<d.length;++f)E[e++>>0>>>0]=d.charCodeAt(f);E[e>>0>>>0]=0;c+=d.length+1});return 0},I:function(a,b){var c=Ub();D[a>>2>>>0]=c.length;var d=0;c.forEach(function(e){d+=e.length+1});D[b>>2>>>0]=d;return 0},F:Xb,G:function(a,b,c,d){return cc(a,b,c,d)}};\n(function(){function a(e){h.asm=e.exports;ma=h.asm.L;Ca();Da=h.asm.R;Fa.unshift(h.asm.M);G--;h.monitorRunDependencies&&h.monitorRunDependencies(G);0==G&&(null!==Ja&&(clearInterval(Ja),Ja=null),H&&(e=H,H=null,e()))}function b(e){a(e.instance)}function c(e){return Na().then(function(f){return WebAssembly.instantiate(f,d)}).then(function(f){return f}).then(e,function(f){w(\"failed to asynchronously prepare wasm: \"+f);z(f)})}var d={a:ic};G++;h.monitorRunDependencies&&h.monitorRunDependencies(G);if(h.instantiateWasm)try{return h.instantiateWasm(d,\na)}catch(e){return w(\"Module.instantiateWasm callback failed with error: \"+e),!1}(function(){return x||\"function\"!=typeof WebAssembly.instantiateStreaming||J.startsWith(Ka)||J.startsWith(\"file://\")||\"function\"!=typeof fetch?c(b):fetch(J,{credentials:\"same-origin\"}).then(function(e){return WebAssembly.instantiateStreaming(e,d).then(b,function(f){w(\"wasm streaming compile failed: \"+f);w(\"falling back to ArrayBuffer instantiation\");return c(b)})})})().catch(ba);return{}})();\nh.___wasm_call_ctors=function(){return(h.___wasm_call_ctors=h.asm.M).apply(null,arguments)};h._main=function(){return(h._main=h.asm.N).apply(null,arguments)};var Ab=h.___getTypeName=function(){return(Ab=h.___getTypeName=h.asm.O).apply(null,arguments)};h.___embind_register_native_and_builtin_types=function(){return(h.___embind_register_native_and_builtin_types=h.asm.P).apply(null,arguments)};\nvar hc=h._malloc=function(){return(hc=h._malloc=h.asm.Q).apply(null,arguments)},W=h._free=function(){return(W=h._free=h.asm.S).apply(null,arguments)};h.dynCall_viij=function(){return(h.dynCall_viij=h.asm.T).apply(null,arguments)};h.dynCall_viiij=function(){return(h.dynCall_viiij=h.asm.U).apply(null,arguments)};h.dynCall_iiiij=function(){return(h.dynCall_iiiij=h.asm.V).apply(null,arguments)};h.dynCall_vij=function(){return(h.dynCall_vij=h.asm.W).apply(null,arguments)};\nh.dynCall_iij=function(){return(h.dynCall_iij=h.asm.X).apply(null,arguments)};h.dynCall_iiij=function(){return(h.dynCall_iiij=h.asm.Y).apply(null,arguments)};h.dynCall_iiiiij=function(){return(h.dynCall_iiiiij=h.asm.Z).apply(null,arguments)};h.dynCall_iiiiijj=function(){return(h.dynCall_iiiiijj=h.asm._).apply(null,arguments)};h.dynCall_iiiiiijj=function(){return(h.dynCall_iiiiiijj=h.asm.$).apply(null,arguments)};h.dynCall_viijii=function(){return(h.dynCall_viijii=h.asm.aa).apply(null,arguments)};\nvar jc;function kc(a){this.name=\"ExitStatus\";this.message=\"Program terminated with exit(\"+a+\")\";this.status=a}H=function lc(){jc||mc();jc||(H=lc)};\nfunction mc(){function a(){if(!jc&&(jc=!0,h.calledRun=!0,!na)){Oa(Fa);Oa(Ga);aa(h);if(h.onRuntimeInitialized)h.onRuntimeInitialized();if(nc){var b=h._main;try{var c=b(0,0);if(!noExitRuntime){if(h.onExit)h.onExit(c);na=!0}fa(c,new kc(c))}catch(d){d instanceof kc||\"unwind\"==d||fa(1,d)}finally{}}if(h.postRun)for(\"function\"==typeof h.postRun&&(h.postRun=[h.postRun]);h.postRun.length;)b=h.postRun.shift(),Ha.unshift(b);Oa(Ha)}}if(!(0<G)){if(h.preRun)for(\"function\"==typeof h.preRun&&(h.preRun=[h.preRun]);h.preRun.length;)Ia();\nOa(Ea);0<G||(h.setStatus?(h.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){h.setStatus(\"\")},1);a()},1)):a())}}h.run=mc;if(h.preInit)for(\"function\"==typeof h.preInit&&(h.preInit=[h.preInit]);0<h.preInit.length;)h.preInit.pop()();var nc=!0;h.noInitialRun&&(nc=!1);mc();\n\n\n  return Module.ready\n}\n);\n})();\nexport default Module;","import {\n  BatchEncoderConstructorOptions,\n  BatchEncoderDependencies\n} from './batch-encoder'\nimport {\n  CipherTextConstructorOptions,\n  CipherTextDependencies\n} from './cipher-text'\nimport {\n  CKKSEncoderConstructorOptions,\n  CKKSEncoderDependencies\n} from './ckks-encoder'\nimport { CoeffModulus, CoeffModulusDependencies } from './coeff-modulus'\nimport { ComprModeType, ComprModeTypeDependencies } from './compr-mode-type'\nimport {\n  ContextDataConstructorOptions,\n  ContextDataDependencies\n} from './context-data'\nimport { ContextConstructorOptions, ContextDependencies } from './context'\nimport { DecryptorConstructorOptions, DecryptorDependencies } from './decryptor'\nimport {\n  EncryptionParameterQualifiersConstructorOptions,\n  EncryptionParameterQualifiersDependencies\n} from './encryption-parameter-qualifiers'\nimport {\n  EncryptionParametersConstructorOptions,\n  EncryptionParametersDependencies\n} from './encryption-parameters'\nimport { EncryptorConstructorOptions, EncryptorDependencies } from './encryptor'\nimport { EvaluatorConstructorOptions, EvaluatorDependencies } from './evaluator'\nimport { Exception, ExceptionDependencies } from './exception'\nimport {\n  GaloisKeysConstructorOptions,\n  GaloisKeysDependencies\n} from './galois-keys'\nimport {\n  MemoryPoolHandle,\n  MemoryPoolHandleDependencies\n} from './memory-pool-handle'\nimport { ModulusConstructorOptions, ModulusDependencies } from './modulus'\nimport {\n  ParmsIdTypeConstructorOptions,\n  ParmsIdTypeDependencies\n} from './parms-id-type'\nimport {\n  PlainTextConstructorOptions,\n  PlainTextDependencies\n} from './plain-text'\nimport { PlainModulus, PlainModulusDependencies } from './plain-modulus'\nimport {\n  PublicKeyConstructorOptions,\n  PublicKeyDependencies\n} from './public-key'\nimport {\n  RelinKeysConstructorOptions,\n  RelinKeysDependencies\n} from './relin-keys'\nimport { SchemeType, SchemeTypeDependencies } from './scheme-type'\nimport {\n  SecretKeyConstructorOptions,\n  SecretKeyDependencies\n} from './secret-key'\nimport { SecurityLevel, SecurityLevelDependencies } from './security-level'\nimport {\n  SerializableConstructorOptions,\n  SerializableDependencies\n} from './serializable'\nimport { VectorConstructorOptions, VectorDependencies } from './vector'\nimport {\n  KeyGeneratorConstructorOptions,\n  KeyGeneratorDependencies\n} from './key-generator'\nimport { version } from '../../package.json'\n\nexport type Instance = any\nexport type Loader = any\nexport type Library = any\nexport type Dependencies = any\nexport type LoaderOptions = {\n  readonly loader: Loader\n}\n\nexport type SEALLibrary = {\n  readonly BatchEncoder: BatchEncoderConstructorOptions\n  readonly CipherText: CipherTextConstructorOptions\n  readonly CKKSEncoder: CKKSEncoderConstructorOptions\n  readonly CoeffModulus: CoeffModulus\n  readonly ComprModeType: ComprModeType\n  readonly ContextData: ContextDataConstructorOptions\n  readonly Context: ContextConstructorOptions\n  readonly Decryptor: DecryptorConstructorOptions\n  readonly EncryptionParameterQualifiers: EncryptionParameterQualifiersConstructorOptions\n  readonly EncryptionParameters: EncryptionParametersConstructorOptions\n  readonly Encryptor: EncryptorConstructorOptions\n  readonly Evaluator: EvaluatorConstructorOptions\n  readonly Exception: Exception\n  readonly GaloisKeys: GaloisKeysConstructorOptions\n  readonly KeyGenerator: KeyGeneratorConstructorOptions\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly Modulus: ModulusConstructorOptions\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly PlainText: PlainTextConstructorOptions\n  readonly PlainModulus: PlainModulus\n  readonly PublicKey: PublicKeyConstructorOptions\n  readonly RelinKeys: RelinKeysConstructorOptions\n  readonly SchemeType: SchemeType\n  readonly SecretKey: SecretKeyConstructorOptions\n  readonly SecurityLevel: SecurityLevel\n  readonly Serializable: SerializableConstructorOptions\n  readonly Vector: VectorConstructorOptions\n  readonly Version: string\n}\ntype SEALConstructorOptions = {\n  readonly BatchEncoder: BatchEncoderDependencies\n  readonly CipherText: CipherTextDependencies\n  readonly CKKSEncoder: CKKSEncoderDependencies\n  readonly CoeffModulus: CoeffModulusDependencies\n  readonly ComprModeType: ComprModeTypeDependencies\n  readonly ContextData: ContextDataDependencies\n  readonly Context: ContextDependencies\n  readonly Decryptor: DecryptorDependencies\n  readonly EncryptionParameterQualifiers: EncryptionParameterQualifiersDependencies\n  readonly EncryptionParameters: EncryptionParametersDependencies\n  readonly Encryptor: EncryptorDependencies\n  readonly Evaluator: EvaluatorDependencies\n  readonly Exception: ExceptionDependencies\n  readonly GaloisKeys: GaloisKeysDependencies\n  readonly KeyGenerator: KeyGeneratorDependencies\n  readonly MemoryPoolHandle: MemoryPoolHandleDependencies\n  readonly Modulus: ModulusDependencies\n  readonly ParmsIdType: ParmsIdTypeDependencies\n  readonly PlainText: PlainTextDependencies\n  readonly PlainModulus: PlainModulusDependencies\n  readonly PublicKey: PublicKeyDependencies\n  readonly RelinKeys: RelinKeysDependencies\n  readonly SchemeType: SchemeTypeDependencies\n  readonly SecretKey: SecretKeyDependencies\n  readonly SecurityLevel: SecurityLevelDependencies\n  readonly Serializable: SerializableDependencies\n  readonly Vector: VectorDependencies\n}\n\n/**\n * @implements SEAL\n */\nexport const SEALConstructor = ({\n  BatchEncoder,\n  CipherText,\n  CKKSEncoder,\n  CoeffModulus,\n  ComprModeType,\n  ContextData,\n  Context,\n  Decryptor,\n  EncryptionParameterQualifiers,\n  EncryptionParameters,\n  Encryptor,\n  Evaluator,\n  Exception,\n  GaloisKeys,\n  KeyGenerator,\n  MemoryPoolHandle,\n  Modulus,\n  ParmsIdType,\n  PlainText,\n  PlainModulus,\n  PublicKey,\n  RelinKeys,\n  SchemeType,\n  SecretKey,\n  SecurityLevel,\n  Serializable,\n  Vector\n}: SEALConstructorOptions): SEALLibrary => {\n  // Unfortunately, this library has nested depenencies\n  // so we need to load them in order.\n\n  // Define our singletons\n  const exception = Exception()()\n  const comprModeType = ComprModeType()()\n  const memoryPoolHandle = MemoryPoolHandle()()\n  const securityLevel = SecurityLevel()()\n  const schemeType = SchemeType()()\n\n  // Define our constructors (ORDER MATTERS)\n  const vector = Vector({ Exception: exception })\n  const coeffModulus = CoeffModulus({\n    Exception: exception,\n    SecurityLevel: securityLevel,\n    Vector: vector\n  })()\n  const modulus = Modulus({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const plainModulus = PlainModulus({\n    Exception: exception,\n    Modulus: modulus,\n    Vector: vector\n  })()\n  const serializable = Serializable({\n    Exception: exception,\n    Vector: vector,\n    ComprModeType: comprModeType\n  })\n  const parmsIdType = ParmsIdType({ Exception: exception })\n  const plainText = PlainText({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    ParmsIdType: parmsIdType,\n    MemoryPoolHandle: memoryPoolHandle,\n    Vector: vector\n  })\n  const cipherText = CipherText({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    ParmsIdType: parmsIdType,\n    MemoryPoolHandle: memoryPoolHandle,\n    Vector: vector\n  })\n  const batchEncoder = BatchEncoder({\n    Exception: exception,\n    MemoryPoolHandle: memoryPoolHandle,\n    PlainText: plainText,\n    Vector: vector\n  })\n  const ckksEncoder = CKKSEncoder({\n    Exception: exception,\n    MemoryPoolHandle: memoryPoolHandle,\n    PlainText: plainText,\n    Vector: vector\n  })\n  const encryptionParameterQualifiers = EncryptionParameterQualifiers()\n  const encryptionParameters = EncryptionParameters({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Modulus: modulus,\n    SchemeType: schemeType,\n    ParmsIdType: parmsIdType,\n    Vector: vector\n  })\n  const contextData = ContextData({\n    Exception: exception,\n    EncryptionParameters: encryptionParameters,\n    ParmsIdType: parmsIdType,\n    EncryptionParameterQualifiers: encryptionParameterQualifiers\n  })\n  const context = Context({\n    ParmsIdType: parmsIdType,\n    ContextData: contextData,\n    SecurityLevel: securityLevel\n  })\n  const decryptor = Decryptor({\n    Exception: exception,\n    PlainText: plainText\n  })\n  const encryptor = Encryptor({\n    Exception: exception,\n    MemoryPoolHandle: memoryPoolHandle,\n    CipherText: cipherText,\n    Serializable: serializable\n  })\n  const evaluator = Evaluator({\n    Exception: exception,\n    MemoryPoolHandle: memoryPoolHandle,\n    CipherText: cipherText,\n    PlainText: plainText\n  })\n  const publicKey = PublicKey({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const secretKey = SecretKey({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const relinKeys = RelinKeys({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const galoisKeys = GaloisKeys({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const keyGenerator = KeyGenerator({\n    Exception: exception,\n    PublicKey: publicKey,\n    SecretKey: secretKey,\n    RelinKeys: relinKeys,\n    GaloisKeys: galoisKeys,\n    Serializable: serializable\n  })\n\n  /**\n   * @interface SEAL\n   */\n  return {\n    BatchEncoder: batchEncoder,\n    CipherText: cipherText,\n    CKKSEncoder: ckksEncoder,\n    CoeffModulus: coeffModulus, // Singleton\n    ComprModeType: comprModeType, // Singleton\n    ContextData: contextData,\n    Context: context,\n    Decryptor: decryptor,\n    EncryptionParameterQualifiers: encryptionParameterQualifiers,\n    EncryptionParameters: encryptionParameters,\n    Encryptor: encryptor,\n    Evaluator: evaluator,\n    Exception: exception, // Singleton\n    GaloisKeys: galoisKeys,\n    KeyGenerator: keyGenerator,\n    MemoryPoolHandle: memoryPoolHandle, // Singleton\n    Modulus: modulus,\n    ParmsIdType: parmsIdType,\n    PlainText: plainText,\n    PlainModulus: plainModulus, // Singleton\n    PublicKey: publicKey,\n    RelinKeys: relinKeys,\n    SchemeType: schemeType,\n    SecretKey: secretKey,\n    SecurityLevel: securityLevel, // Singleton\n    Serializable: serializable,\n    Vector: vector,\n    Version: version\n  }\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { PlainText, PlainTextConstructorOptions } from './plain-text'\nimport { Context } from './context'\nimport { UNSUPPORTED_BATCH_ENCODE_ARRAY_TYPE } from './constants'\n\nexport type BatchEncoderDependencyOptions = {\n  readonly Exception: Exception\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly PlainText: PlainTextConstructorOptions\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type BatchEncoderDependencies = {\n  ({\n    Exception,\n    MemoryPoolHandle,\n    PlainText,\n    Vector\n  }: BatchEncoderDependencyOptions): BatchEncoderConstructorOptions\n}\n\nexport type BatchEncoderConstructorOptions = {\n  (context: Context): BatchEncoder\n}\n\nexport type BatchEncoderTypes =\n  | Int32Array\n  | Uint32Array\n  | BigInt64Array\n  | BigUint64Array\n\nexport type BatchEncoder = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly encode: (\n    array: BatchEncoderTypes,\n    plainText?: PlainText\n  ) => PlainText | void\n  readonly decode: (\n    plainText: PlainText,\n    signed?: boolean,\n    pool?: MemoryPoolHandle\n  ) => Int32Array | Uint32Array\n  readonly decodeBigInt: (\n    plainText: PlainText,\n    signed?: boolean,\n    pool?: MemoryPoolHandle\n  ) => BigInt64Array | BigUint64Array\n  readonly slotCount: number\n}\n\nconst BatchEncoderConstructor =\n  (library: Library): BatchEncoderDependencies =>\n    ({\n      Exception,\n      MemoryPoolHandle,\n      PlainText,\n      Vector\n    }: BatchEncoderDependencyOptions): BatchEncoderConstructorOptions =>\n      (context): BatchEncoder => {\n        const Constructor = library.BatchEncoder\n        let _instance: Instance\n        try {\n          _instance = new Constructor(context.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n        /**\n         * @implements BatchEncoder\n         */\n\n        /**\n         * @interface BatchEncoder\n         */\n        return {\n          /**\n           * Get the underlying WASM instance\n           *\n           * @private\n           * @readonly\n           * @name BatchEncoder#instance\n           * @type {Instance}\n           */\n          get instance() {\n            return _instance\n          },\n\n          /**\n           * Inject this object with a raw WASM instance. No type checking is performed.\n           *\n           * @private\n           * @function\n           * @name BatchEncoder#unsafeInject\n           * @param {Instance} instance WASM instance\n           */\n          unsafeInject(instance: Instance) {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n            _instance = instance\n          },\n\n          /**\n           * Delete the underlying WASM instance.\n           *\n           * Should be called before dereferencing this object to prevent the\n           * WASM heap from growing indefinitely.\n           * @function\n           * @name BatchEncoder#delete\n           */\n          delete() {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n          },\n\n          /**\n           * Creates a PlainText from a given matrix. This function \"batches\" a given matrix\n           * of either signed or unsigned integers modulo the PlainText modulus into a PlainText element, and stores\n           * the result in the destination parameter. The input array must have size at most equal\n           * to the degree of the polynomial modulus. The first half of the elements represent the\n           * first row of the matrix, and the second half represent the second row. The numbers\n           * in the matrix can be at most equal to the PlainText modulus for it to represent\n           * a valid PlainText.\n           *\n           * If the destination PlainText overlaps the input values in memory, the behavior of\n           * this function is undefined.\n           *\n           * @function\n           * @name BatchEncoder#encode\n           * @param {Int32Array|Uint32Array|BigInt64Array|BigUint64Array} array Data to encode\n           * @param {PlainText} [plainText=null] Destination to store the encoded result\n           * @returns {PlainText|void} A new PlainText holding the encoded data or void if one was provided\n           * @example\n           * import SEAL from 'node-seal'\n           * const seal = await SEAL()\n           * ...\n           * const batchEncoder = seal.BatchEncoder(context)\n           *\n           * const plainText = batchEncoder.encode(Int32Array.from([1, -2, 3]))\n           */\n          encode(\n            array: Int32Array | Uint32Array | BigInt64Array | BigUint64Array,\n            plainText?: PlainText\n          ): PlainText | void {\n            try {\n              if (array.constructor === Int32Array) {\n                if (plainText) {\n                  _instance.encode(array, plainText.instance, 'INT32')\n                  return\n                }\n                const plain = PlainText()\n                _instance.encode(array, plain.instance, 'INT32')\n                return plain\n              }\n\n              if (array.constructor === Uint32Array) {\n                if (plainText) {\n                  _instance.encode(array, plainText.instance, 'UINT32')\n                  return\n                }\n                const plain = PlainText()\n                _instance.encode(array, plain.instance, 'UINT32')\n                return plain\n              }\n\n              if (array.constructor === BigInt64Array) {\n                // When embind supports BigInt64Arrays we can remove this hack\n                const stringArray = array.toString().split(',')\n                if (plainText) {\n                  _instance.encode(stringArray, plainText.instance, 'INT64')\n                  return\n                }\n                const plain = PlainText()\n                _instance.encode(stringArray, plain.instance, 'INT64')\n                return plain\n              }\n\n              if (array.constructor === BigUint64Array) {\n                // When embind supports BigInt64Arrays we can remove this hack\n                const stringArray = array.toString().split(',')\n                if (plainText) {\n                  _instance.encode(stringArray, plainText.instance, 'UINT64')\n                  return\n                }\n                const plain = PlainText()\n                _instance.encode(stringArray, plain.instance, 'UINT64')\n                return plain\n              }\n\n              throw new Error(UNSUPPORTED_BATCH_ENCODE_ARRAY_TYPE)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Inverse of encode. This function \"unbatches\" a given PlainText into a matrix\n           * of signed or unsigned integers modulo the PlainText modulus, and stores the result in the destination\n           * parameter. The input PlainText must have degrees less than the polynomial modulus,\n           * and coefficients less than the PlainText modulus, i.e. it must be a valid PlainText\n           * for the encryption parameters. Dynamic memory allocations in the process are\n           * allocated from the memory pool pointed to by the given MemoryPoolHandle.\n           *\n           * @function\n           * @name BatchEncoder#decode\n           * @param {PlainText} plainText Data to decode\n           * @param {boolean} [signed=true] By default, decode as an Int32Array. If false, decode as an Uint32Array\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}]\n           * @returns {Int32Array|Uint32Array} TypedArray containing the decoded data\n           * @example\n           * import SEAL from 'node-seal'\n           * const seal = await SEAL()\n           * ...\n           * const batchEncoder = seal.BatchEncoder(context)\n           *\n           * const plainText = batchEncoder.encode(Int32Array.from([1, -2, 3]))\n           * const plainTextU = batchEncoder.encode(Uint32Array.from([1, 2, 3]))\n           *\n           * const result = batchEncoder.decode(plainText)\n           * const resultU = batchEncoder.decode(plainTextU, false) // To decode as an Uint32Array\n           */\n          decode(\n            plainText: PlainText,\n            signed = true,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): Int32Array | Uint32Array {\n            try {\n              if (signed) {\n                const tempVect = Vector()\n                const instance = _instance.decodeInt32(plainText.instance, pool)\n                tempVect.unsafeInject(instance)\n                tempVect.setType('Int32Array')\n                const tempArr = tempVect.toArray() as Int32Array\n                tempVect.delete()\n                return tempArr\n              }\n              const tempVect = Vector()\n              const instance = _instance.decodeUint32(plainText.instance, pool)\n              tempVect.unsafeInject(instance)\n              tempVect.setType('Uint32Array')\n              const tempArr = tempVect.toArray() as Uint32Array\n              tempVect.delete()\n              return tempArr\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Performs the same function as the 32-bit decode, but supports true\n           * 64-bit values encapsulated by a BigInt.\n           *\n           * There's no official support for sending a BigInt64Array/BigUint64Array\n           * from C++ to JS, therefore this function uses string conversion to\n           * marshal data which is noticably slower. Use this function if you\n           * absolutely need to marshal values larger than 32 bits.\n           *\n           * @see {@link BatchEncoder#decode} for more information about decode.\n           * @function\n           * @name BatchEncoder#decodeBigInt\n           * @param {PlainText} plainText Data to decode\n           * @param {boolean} [signed=true] By default, decode as an BigInt64Array. If false, decode as an BigUint64Array\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}]\n           * @returns {BigInt64Array|BigUint64Array} TypedArray containing the decoded data\n           * @example\n           * import SEAL from 'node-seal'\n           * const seal = await SEAL()\n           * ...\n           * const batchEncoder = seal.BatchEncoder(context)\n           *\n           * const plainText = batchEncoder.encode(BigInt64Array.from([1n, -2n, 3n]))\n           * const plainTextU = batchEncoder.encode(BigUint64Array.from([1n, 2n, 3n]))\n           *\n           * const result = batchEncoder.decodeBigInt(plainText)\n           * const resultU = batchEncoder.decodeBigInt(plainTextU, false) // To decode as an BigUint64Array\n           */\n          decodeBigInt(\n            plainText: PlainText,\n            signed = true,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): BigInt64Array | BigUint64Array {\n            try {\n              if (signed) {\n                const instance = _instance.decodeBigInt(\n                  plainText.instance,\n                  true,\n                  pool\n                )\n                return BigInt64Array.from(instance)\n              }\n              const instance = _instance.decodeBigInt(\n                plainText.instance,\n                false,\n                pool\n              )\n              return BigUint64Array.from(instance)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * The total number of batching slots available to hold data\n           *\n           * @readonly\n           * @name BatchEncoder#slotCount\n           * @type {number}\n           */\n          get slotCount() {\n            return _instance.slotCount()\n          }\n        }\n      }\n\nexport const BatchEncoderInit = ({\n  loader\n}: LoaderOptions): BatchEncoderDependencies => {\n  const library: Library = loader.library\n  return BatchEncoderConstructor(library)\n}\n","export const INSTANCE_DELETED = 'Instance was deleted'\nexport const UNSUPPORTED_VECTOR_TYPE = 'Unsupported vector type'\nexport const UNSUPPORTED_BITSIZES_TYPE =\n  'Unsupported argument type! `bitSizes` must be an Int32Array'\nexport const UNSUPPORTED_BATCH_ENCODE_ARRAY_TYPE =\n  'Unsupported array type! `array` must be of type Int32Array, Uint32Array, BigInt64Array, or BigUint64Array.'\nexport const UNSUPPORTED_CKKS_ENCODE_ARRAY_TYPE =\n  'Unsupported array type! `array` must be of type Float64Array.'\nexport const INVALID_PLAIN_CONSRUCTOR_OPTIONS =\n  'Must specify a (coeffCount), (coeffCount, capacity)'\nexport const INVALID_CIPHER_CONSTRUCTOR_OPTIONS =\n  'Must specify a (context), (context, parmsId), or (context, parmsId, sizeCapacity)'\n","import { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\nimport { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\nimport { VectorConstructorOptions } from './vector'\nimport { INVALID_CIPHER_CONSTRUCTOR_OPTIONS } from './constants'\nexport type CipherTextDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type CipherTextDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    ParmsIdType,\n    MemoryPoolHandle,\n    Vector\n  }: CipherTextDependencyOptions): CipherTextConstructorOptions\n}\n\nexport type CipherTextConstructorOptions = {\n  ({\n    context,\n    parmsId,\n    sizeCapacity,\n    pool\n  }?: {\n    context?: Context\n    parmsId?: ParmsIdType\n    sizeCapacity?: number\n    pool?: MemoryPoolHandle\n  }): CipherText\n}\n\nexport type CipherText = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly reserve: (context: Context, capacity: number) => void\n  readonly resize: (size: number) => void\n  readonly release: () => void\n  readonly coeffModulusSize: number\n  readonly polyModulusDegree: number\n  readonly size: number\n  readonly sizeCapacity: number\n  readonly isTransparent: boolean\n  readonly isNttForm: boolean\n  readonly parmsId: ParmsIdType\n  readonly scale: number\n  readonly setScale: (scale: number) => void\n  readonly pool: MemoryPoolHandle\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (cipher: CipherText) => void\n  readonly clone: () => CipherText\n  readonly move: (cipher: CipherText) => void\n}\n\nconst CipherTextConstructor =\n  (library: Library): CipherTextDependencies =>\n    ({\n      Exception,\n      ComprModeType,\n      ParmsIdType,\n      MemoryPoolHandle,\n      Vector\n    }: CipherTextDependencyOptions): CipherTextConstructorOptions =>\n      ({\n        context,\n        parmsId,\n        sizeCapacity,\n        pool = MemoryPoolHandle.global\n      } = {}): CipherText => {\n        // Static methods\n        const Constructor = library.Ciphertext\n\n        let _instance = construct({\n          context,\n          parmsId,\n          sizeCapacity,\n          pool\n        })\n\n        function construct({\n          context,\n          parmsId,\n          sizeCapacity,\n          pool = MemoryPoolHandle.global\n        }: {\n          context?: Context\n          parmsId?: ParmsIdType\n          sizeCapacity?: number\n          pool?: MemoryPoolHandle\n        }) {\n          try {\n            if (!context && !parmsId && sizeCapacity === undefined) {\n              return new Constructor(pool)\n            } else if (context && !parmsId && sizeCapacity === undefined) {\n              return new Constructor(context.instance, pool)\n            } else if (context && parmsId && sizeCapacity === undefined) {\n              return new Constructor(context.instance, parmsId.instance, pool)\n            } else if (context && parmsId && sizeCapacity !== undefined) {\n              return new Constructor(\n                context.instance,\n                parmsId.instance,\n                sizeCapacity,\n                pool\n              )\n            } else {\n              throw new Error(INVALID_CIPHER_CONSTRUCTOR_OPTIONS)\n            }\n          } catch (e) {\n            throw Exception.safe(e as SealError)\n          }\n        }\n        /**\n         * @implements CipherText\n         */\n\n        /**\n         * @interface CipherText\n         */\n        return {\n          /**\n           * Get the underlying WASM instance\n           *\n           * @private\n           * @readonly\n           * @name CipherText#instance\n           * @type {Instance}\n           */\n          get instance() {\n            return _instance\n          },\n\n          /**\n           * Inject this object with a raw WASM instance. No type checking is performed.\n           *\n           * @private\n           * @function\n           * @name CipherText#unsafeInject\n           * @param {Instance} instance WASM instance\n           */\n          unsafeInject(instance: Instance) {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n            _instance = instance\n          },\n\n          /**\n           * Delete the underlying WASM instance.\n           *\n           * Should be called before dereferencing this object to prevent the\n           * WASM heap from growing indefinitely.\n           * @function\n           * @name CipherText#delete\n           */\n          delete() {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n          },\n\n          /**\n           * Allocates enough memory to accommodate the backing array of a ciphertext\n           * with given capacity. In addition to the capacity, the allocation size is\n           * determined by the current encryption parameters.\n           *\n           * @function\n           * @name CipherText#reserve\n           * @param {Context} context The SEAL Context\n           * @param {number} capacity The capacity to reserve\n           */\n          reserve(context: Context, capacity: number) {\n            try {\n              return _instance.reserve(context.instance, capacity)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Resizes the CipherText to given size, reallocating if the capacity\n           * of the CipherText is too small.\n           *\n           * This function is mainly intended for internal use and is called\n           * automatically by functions such as Evaluator.multiply and\n           * Evaluator.relinearize. A normal user should never have a reason\n           * to manually resize a CipherText.\n           *\n           * @function\n           * @name CipherText#resize\n           * @param {number} size The new size\n           */\n          resize(size: number) {\n            try {\n              return _instance.resize(size)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Resets the CipherText. This function releases any memory allocated\n           * by the CipherText, returning it to the memory pool. It also sets all\n           * encryption parameter specific size information to zero.\n           *\n           * @function\n           * @name CipherText#release\n           */\n          release() {\n            _instance.release()\n          },\n\n          /**\n           * The number of primes in the coefficient modulus of the\n           * associated encryption parameters. This directly affects the\n           * allocation size of the CipherText.\n           *\n           * @readonly\n           * @name CipherText#coeffModulusSize\n           * @type {number}\n           */\n          get coeffModulusSize() {\n            return _instance.coeffModulusSize()\n          },\n\n          /**\n           * The degree of the polynomial modulus of the associated\n           * encryption parameters. This directly affects the allocation size\n           * of the CipherText.\n           *\n           * @readonly\n           * @name CipherText#polyModulusDegree\n           * @type {number}\n           */\n          get polyModulusDegree() {\n            return _instance.polyModulusDegree()\n          },\n\n          /**\n           * The size of the CipherText.\n           *\n           * @readonly\n           * @name CipherText#size\n           * @type {number}\n           */\n          get size() {\n            return _instance.size()\n          },\n\n          /**\n           * The capacity of the allocation. This means the largest size\n           * of the CipherText that can be stored in the current allocation with\n           * the current encryption parameters.\n           *\n           * @readonly\n           * @name CipherText#sizeCapacity\n           * @type {number}\n           */\n          get sizeCapacity() {\n            return _instance.sizeCapacity()\n          },\n\n          /**\n           * Whether the current CipherText is transparent, i.e. does not require\n           * a secret key to decrypt. In typical security models such transparent\n           * CipherTexts would not be considered to be valid. Starting from the second\n           * polynomial in the current CipherText, this function returns true if all\n           * following coefficients are identically zero. Otherwise, returns false.\n           *\n           * @readonly\n           * @name CipherText#isTransparent\n           * @type {boolean}\n           */\n          get isTransparent() {\n            return _instance.isTransparent()\n          },\n\n          /**\n           * Whether the CipherText is in NTT form.\n           *\n           * @readonly\n           * @name CipherText#isNttForm\n           * @type {boolean}\n           */\n          get isNttForm() {\n            return _instance.isNttForm()\n          },\n\n          /**\n           * The reference to parmsId.\n           * @see {@link EncryptionParameters} for more information about parmsId.\n           *\n           * @readonly\n           * @name CipherText#parmsId\n           * @type {ParmsIdType}\n           */\n          get parmsId() {\n            const parms = ParmsIdType()\n            parms.inject(_instance.parmsId())\n            return parms\n          },\n\n          /**\n           * The reference to the scale. This is only needed when using the\n           * CKKS encryption scheme. The user should have little or no reason to ever\n           * change the scale by hand.\n           *\n           * @readonly\n           * @name CipherText#scale\n           * @type {number}\n           */\n          get scale() {\n            return _instance.scale()\n          },\n\n          /**\n           * Sets the CipherText scale. This is only needed when using the\n           * CKKS encryption scheme. The user should have little or no reason to ever\n           * change the scale by hand.\n           *\n           * @function\n           * @name CipherText#setScale\n           * @param {number} scale The scale to set\n           */\n          setScale(scale: number) {\n            _instance.setScale(scale)\n          },\n\n          /**\n           * The currently used MemoryPoolHandle.\n           *\n           * @readonly\n           * @name CipherText#pool\n           * @type {MemoryPoolHandle}\n           */\n          get pool() {\n            return _instance.pool()\n          },\n\n          /**\n           * Save the CipherText to a base64 string\n           *\n           * @function\n           * @name CipherText#save\n           * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n           * @returns {string} Base64 encoded string\n           */\n          save(compression: ComprModeType = ComprModeType.zstd): string {\n            return _instance.saveToString(compression)\n          },\n\n          /**\n           * Save the CipherText as a binary Uint8Array\n           *\n           * @function\n           * @name CipherText#saveArray\n           * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n           * @returns {Uint8Array} A byte array containing the CipherText in binary form\n           */\n          saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n            const tempVect = Vector()\n            const instance = _instance.saveToArray(compression)\n            tempVect.unsafeInject(instance)\n            tempVect.setType('Uint8Array')\n            const tempArr = tempVect.toArray() as Uint8Array\n            tempVect.delete()\n            return tempArr\n          },\n\n          /**\n           * Load a CipherText from a base64 string\n           *\n           * @function\n           * @name CipherText#load\n           * @param {Context} context Encryption context to enforce\n           * @param {string} encoded Base64 encoded string\n           */\n          load(context: Context, encoded: string) {\n            try {\n              _instance.loadFromString(context.instance, encoded)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Load a CipherText from an Uint8Array holding binary data\n           *\n           * @function\n           * @name CipherText#loadArray\n           * @param {Context} context Encryption context to enforce\n           * @param {Uint8Array} array TypedArray containing binary data\n           */\n          loadArray(context: Context, array: Uint8Array) {\n            try {\n              _instance.loadFromArray(context.instance, array)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Copy an existing CipherText and overwrite this instance\n           *\n           * @function\n           * @name CipherText#copy\n           * @param {CipherText} cipher CipherText to copy\n           * @example\n           * const cipherTextA = seal.CipherText()\n           * // ... after encoding some data ...\n           * const cipherTextB = seal.CipherText()\n           * cipherTextB.copy(cipherTextA)\n           * // cipherTextB holds a copy of cipherTextA\n           */\n          copy(cipher: CipherText) {\n            try {\n              _instance.copy(cipher.instance)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Clone and return a new instance of this CipherText\n           *\n           * @function\n           * @name CipherText#clone\n           * @returns {CipherText}\n           * @example\n           * const cipherTextA = seal.CipherText()\n           * // ... after encoding some data ...\n           * const cipherTextB = cipherTextA.clone()\n           * // cipherTextB holds a copy of cipherTextA\n           */\n          clone(): CipherText {\n            try {\n              const clonedInstance = _instance.clone()\n              const cipher = CipherTextConstructor(library)({\n                Exception,\n                ComprModeType,\n                ParmsIdType,\n                MemoryPoolHandle,\n                Vector\n              })()\n              cipher.unsafeInject(clonedInstance)\n              return cipher\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Move a CipherText into this one and delete the old reference\n           *\n           * @function\n           * @name CipherText#move\n           * @param {CipherText} cipher CipherText to move\n           * @example\n           * const cipherTextA = seal.CipherText()\n           * // ... after encoding some data ...\n           * const cipherTextB = seal.CipherText()\n           * cipherTextB.move(cipherTextA)\n           * // cipherTextB holds a the instance of cipherTextA.\n           * // cipherTextA no longer holds an instance\n           */\n          move(cipher: CipherText) {\n            try {\n              _instance.move(cipher.instance)\n              // TODO: find optimization\n              // This method results in a copy instead of a real move.\n              // Therefore, we need to delete the old instance.\n              cipher.delete()\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          }\n        }\n      }\n\nexport const CipherTextInit = ({\n  loader\n}: LoaderOptions): CipherTextDependencies => {\n  const library: Library = loader.library\n  return CipherTextConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { PlainText, PlainTextConstructorOptions } from './plain-text'\nimport { Context } from './context'\nimport { UNSUPPORTED_CKKS_ENCODE_ARRAY_TYPE } from './constants'\n\nexport type CKKSEncoderDependencyOptions = {\n  readonly Exception: Exception\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly PlainText: PlainTextConstructorOptions\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type CKKSEncoderDependencies = {\n  ({\n    Exception,\n    MemoryPoolHandle,\n    PlainText,\n    Vector\n  }: CKKSEncoderDependencyOptions): CKKSEncoderConstructorOptions\n}\n\nexport type CKKSEncoderConstructorOptions = {\n  (context: Context): CKKSEncoder\n}\n\nexport type CKKSEncoderTypes = Float64Array\n\nexport type CKKSEncoder = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly encode: (\n    array: CKKSEncoderTypes,\n    scale: number,\n    plainText?: PlainText,\n    pool?: MemoryPoolHandle\n  ) => PlainText | void\n  readonly decode: (\n    plainText: PlainText,\n    pool?: MemoryPoolHandle\n  ) => CKKSEncoderTypes\n  readonly slotCount: number\n}\n\nconst CKKSEncoderConstructor =\n  (library: Library): CKKSEncoderDependencies =>\n    ({\n      Exception,\n      MemoryPoolHandle,\n      PlainText,\n      Vector\n    }: CKKSEncoderDependencyOptions): CKKSEncoderConstructorOptions =>\n      (context): CKKSEncoder => {\n        const Constructor = library.CKKSEncoder\n        let _instance: Instance\n        try {\n          _instance = new Constructor(context.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n        /**\n         * @implements CKKSEncoder\n         */\n\n        /**\n         * @interface CKKSEncoder\n         */\n        return {\n          /**\n           * Get the underlying WASM instance\n           *\n           * @private\n           * @readonly\n           * @name CKKSEncoder#instance\n           * @type {Instance}\n           */\n          get instance() {\n            return _instance\n          },\n\n          /**\n           * Inject this object with a raw WASM instance. No type checking is performed.\n           *\n           * @private\n           * @function\n           * @name CKKSEncoder#unsafeInject\n           * @param {Instance} instance WASM instance\n           */\n          unsafeInject(instance: Instance) {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n            _instance = instance\n          },\n\n          /**\n           * Delete the underlying WASM instance.\n           *\n           * Should be called before dereferencing this object to prevent the\n           * WASM heap from growing indefinitely.\n           * @function\n           * @name CKKSEncoder#delete\n           */\n          delete() {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n          },\n\n          /**\n           * Encodes a vector of double-precision floating-point real numbers\n           * into a plaintext polynomial. Append zeros if vector size is less than N/2.\n           * Dynamic memory allocations in the process are allocated from the memory\n           * pool pointed to by the given MemoryPoolHandle.\n           *\n           * @function\n           * @name CKKSEncoder#encode\n           * @param {Float64Array} array Data to encode\n           * @param {number} scale Scaling parameter defining encoding precision\n           * @param {PlainText} [plainText] Destination to store the encoded result\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {PlainText|void} A new PlainText holding the encoded data or void if one was provided\n           * @example\n           * import SEAL from 'node-seal'\n           * const seal = await SEAL()\n           * ...\n           * const ckksEncoder = seal.CKKSEncoder(context)\n           *\n           * const plainText = ckksEncoder.encode(Float64Array.from([1.11, -2.222, 3.333]), Math.pow(2, 20))\n           */\n          encode(\n            array: Float64Array,\n            scale: number,\n            plainText?: PlainText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): PlainText | void {\n            try {\n              if (array.constructor === Float64Array) {\n                if (plainText) {\n                  _instance.encode(array, scale, plainText.instance, pool)\n                  return\n                }\n                const plain = PlainText()\n                _instance.encode(array, scale, plain.instance, pool)\n                return plain\n              } else {\n                throw new Error(UNSUPPORTED_CKKS_ENCODE_ARRAY_TYPE)\n              }\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Decodes a plaintext polynomial into double-precision floating-point\n           * real numbers. Dynamic memory allocations in the process are\n           * allocated from the memory pool pointed to by the given MemoryPoolHandle.\n           *\n           * @function\n           * @name CKKSEncoder#decode\n           * @param {PlainText} plainText Data to decode\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {Float64Array} TypedArray containing the decoded data\n           * @example\n           * import SEAL from 'node-seal'\n           * const seal = await SEAL()\n           * ...\n           * const ckksEncoder = seal.CKKSEncoder(context)\n           *\n           * const plainText = ckksEncoder.encode(Float64Array.from([1, 2, 3]))\n           *\n           * const result = ckksEncoder.decode(plainText)\n           */\n          decode(\n            plainText: PlainText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): Float64Array {\n            try {\n              const tempVect = Vector()\n              const instance = _instance.decodeDouble(plainText.instance, pool)\n              tempVect.unsafeInject(instance)\n              tempVect.setType('Float64Array')\n              const tempArr = tempVect.toArray() as Float64Array\n              tempVect.delete()\n              return tempArr\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * The total number of CKKS slots available to hold data\n           *\n           * @readonly\n           * @name CKKSEncoder#slotCount\n           * @type {number}\n           */\n          get slotCount() {\n            return _instance.slotCount()\n          }\n        }\n      }\n\nexport const CKKSEncoderInit = ({\n  loader\n}: LoaderOptions): CKKSEncoderDependencies => {\n  const library: Library = loader.library\n  return CKKSEncoderConstructor(library)\n}\n","import { LoaderOptions, Library } from './seal'\nimport { Exception, SealError } from './exception'\nimport { SecurityLevel } from './security-level'\nimport { Vector, VectorConstructorOptions } from './vector'\nimport { UNSUPPORTED_BITSIZES_TYPE } from './constants'\n\nexport type CoeffModulusDependencyOptions = {\n  readonly Exception: Exception\n  readonly SecurityLevel: SecurityLevel\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type CoeffModulusDependencies = {\n  ({\n    Exception,\n    SecurityLevel,\n    Vector\n  }: CoeffModulusDependencyOptions): CoeffModulusConstructorOptions\n}\n\nexport type CoeffModulusConstructorOptions = {\n  (): CoeffModulus\n}\n\nexport type CoeffModulus = {\n  readonly MaxBitCount: (\n    polyModulusDegree: number,\n    securityLevel?: SecurityLevel\n  ) => number\n  readonly BFVDefault: (\n    polyModulusDegree: number,\n    securityLevel?: SecurityLevel\n  ) => Vector\n  readonly Create: (polyModulusDegree: number, bitSizes: Int32Array) => Vector\n}\n\nconst CoeffModulusConstructor =\n  (library: Library): CoeffModulusDependencies =>\n    ({\n      Exception,\n      SecurityLevel,\n      Vector\n    }: CoeffModulusDependencyOptions): CoeffModulusConstructorOptions =>\n      (): CoeffModulus => {\n        // Static methods\n        const _MaxBitCount = library.CoeffModulus.MaxBitCount\n        const _BFVDefault = library.CoeffModulus.BFVDefault\n        const _CreateFromArray = library.CoeffModulus.CreateFromArray\n\n        /**\n         * @implements CoeffModulus\n         */\n\n        /**\n         * @interface CoeffModulus\n         */\n        return {\n          /**\n           * Returns the Maximum Bit Count for the specified polyModulusDegree and securityLevel\n           *\n           * @function\n           * @name CoeffModulus.MaxBitCount\n           * @param {number} polyModulusDegree Degree of the polynomial modulus\n           * @param {SecurityLevel} [securityLevel={@link SecurityLevel.tc128}] Security Level\n           * @returns {number} Maximum bit count\n           */\n          MaxBitCount(\n            polyModulusDegree: number,\n            securityLevel: SecurityLevel = SecurityLevel.tc128\n          ): number {\n            return _MaxBitCount(polyModulusDegree, securityLevel)\n          },\n\n          /**\n           * Returns a default vector of primes for the BFV CoeffModulus parameter\n           *\n           * @function\n           * @name CoeffModulus.BFVDefault\n           * @param {number} polyModulusDegree Degree of the polynomial modulus\n           * @param {SecurityLevel} [securityLevel={@link SecurityLevel.tc128}] Security Level\n           * @returns {Vector} Vector containing Modulus primes\n           */\n          BFVDefault(\n            polyModulusDegree: number,\n            securityLevel: SecurityLevel = SecurityLevel.tc128\n          ): Vector {\n            try {\n              const vectorModulus = Vector()\n              const instance = _BFVDefault(polyModulusDegree, securityLevel)\n              vectorModulus.unsafeInject(instance)\n              vectorModulus.setType('Modulus')\n              return vectorModulus\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Creates a vector of primes for a given polyModulusDegree and bitSizes\n           *\n           * @function\n           * @name CoeffModulus.Create\n           * @param {number} polyModulusDegree Degree of the polynomial modulus\n           * @param {Int32Array} bitSizes Int32Array containing values representing\n           * bit-sizes of primes\n           * @returns {Vector} Vector containing Modulus primes\n           */\n          Create(polyModulusDegree: number, bitSizes: Int32Array): Vector {\n            try {\n              if (bitSizes.constructor !== Int32Array) {\n                throw new Error(UNSUPPORTED_BITSIZES_TYPE)\n              }\n              const vectorModulus = Vector()\n              const instance = _CreateFromArray(polyModulusDegree, bitSizes)\n              vectorModulus.unsafeInject(instance)\n              vectorModulus.setType('Modulus')\n              return vectorModulus\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          }\n        }\n      }\n\nexport const CoeffModulusInit = ({\n  loader\n}: LoaderOptions): CoeffModulusDependencies => {\n  const library: Library = loader.library\n  return CoeffModulusConstructor(library)\n}\n","import { LoaderOptions, Library } from './seal'\n\nexport type ComprModeTypeDependencies = {\n  (): ComprModeTypeConstructorOptions\n}\n\nexport type ComprModeTypeConstructorOptions = {\n  (): ComprModeType\n}\n\nexport type ComprModeType = {\n  readonly none: any\n  readonly zlib: any\n  readonly zstd: any\n}\n\nconst ComprModeTypeConstructor =\n  (library: Library): ComprModeTypeDependencies =>\n    (): ComprModeTypeConstructorOptions =>\n      (): ComprModeType => {\n        // Static methods\n        const _none = library.ComprModeType.none\n        const _zlib = library.ComprModeType.zlib\n        const _zstd = library.ComprModeType.zstd\n\n        /**\n         * @implements ComprModeType\n         */\n\n        /**\n         * @interface ComprModeType\n         */\n        return {\n          /**\n           * The `none` Compression Mode Type\n           *\n           * @readonly\n           * @name ComprModeType.none\n           * @type {ComprModeType.none}\n           */\n          get none() {\n            /**\n             * @typedef {ComprModeType.none} ComprModeType.none\n             */\n            return _none\n          },\n\n          /**\n           * The `zlib` Compression Mode Type\n           *\n           * @readonly\n           * @name ComprModeType.zlib\n           * @type {ComprModeType.zlib}\n           */\n          get zlib() {\n            /**\n             * @typedef {ComprModeType.zlib} ComprModeType.zlib\n             */\n            return _zlib\n          },\n\n          /**\n           * The `zstd` Compression Mode Type\n           *\n           * @readonly\n           * @name ComprModeType.zstd\n           * @type {ComprModeType.zstd}\n           */\n          get zstd() {\n            /**\n             * @typedef {ComprModeType.zstd} ComprModeType.zstd\n             */\n            return _zstd\n          }\n        }\n      }\n\nexport const ComprModeTypeInit = ({\n  loader\n}: LoaderOptions): ComprModeTypeDependencies => {\n  const library: Library = loader.library\n  return ComprModeTypeConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception } from './exception'\nimport {\n  EncryptionParameters,\n  EncryptionParametersConstructorOptions\n} from './encryption-parameters'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\nimport {\n  EncryptionParameterQualifiers,\n  EncryptionParameterQualifiersConstructorOptions\n} from './encryption-parameter-qualifiers'\n\nexport type ContextDataDependencyOptions = {\n  readonly Exception: Exception\n  readonly EncryptionParameters: EncryptionParametersConstructorOptions\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly EncryptionParameterQualifiers: EncryptionParameterQualifiersConstructorOptions\n}\n\nexport type ContextDataDependencies = {\n  ({\n    Exception,\n    EncryptionParameters,\n    ParmsIdType,\n    EncryptionParameterQualifiers\n  }: ContextDataDependencyOptions): ContextDataConstructorOptions\n}\n\nexport type ContextDataConstructorOptions = {\n  (): ContextData\n}\n\nexport type ContextData = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly parms: EncryptionParameters\n  readonly parmsId: ParmsIdType\n  readonly qualifiers: EncryptionParameterQualifiers\n  readonly totalCoeffModulusBitCount: number\n  readonly prevContextData: ContextData\n  readonly nextContextData: ContextData\n  readonly chainIndex: number\n}\n\nconst ContextDataConstructor =\n  (library: Library): ContextDataDependencies =>\n    ({\n      Exception,\n      EncryptionParameters,\n      ParmsIdType,\n      EncryptionParameterQualifiers\n    }: ContextDataDependencyOptions): ContextDataConstructorOptions =>\n      (): ContextData => {\n        let _instance: Instance\n        /**\n         * @implements ContextData\n         */\n\n        /**\n         * @interface ContextData\n         */\n        return {\n          /**\n           * Get the underlying WASM instance\n           *\n           * @private\n           * @readonly\n           * @name ContextData#instance\n           * @type {Instance}\n           */\n          get instance() {\n            return _instance\n          },\n\n          /**\n           * Inject this object with a raw WASM instance. No type checking is performed.\n           *\n           * @private\n           * @function\n           * @name ContextData#unsafeInject\n           * @param {Instance} instance WASM instance\n           */\n          unsafeInject(instance: Instance) {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n            _instance = instance\n          },\n\n          /**\n           * Delete the underlying WASM instance.\n           *\n           * Should be called before dereferencing this object to prevent the\n           * WASM heap from growing indefinitely.\n           * @function\n           * @name ContextData#delete\n           */\n          delete() {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n          },\n\n          /**\n           * Returns a const reference to the underlying encryption parameters.\n           *\n           * @readonly\n           * @name ContextData#parms\n           * @type {EncryptionParameters}\n           */\n          get parms() {\n            const instance = _instance.parms()\n            const encryptionParameters = EncryptionParameters()\n            encryptionParameters.unsafeInject(instance)\n            return encryptionParameters\n          },\n\n          /**\n           * Returns the parmsId of the current parameters.\n           *\n           * @readonly\n           * @name ContextData#parmsId\n           * @type {ParmsIdType}\n           */\n          get parmsId() {\n            const parms = ParmsIdType()\n            parms.inject(_instance.parmsId())\n            return parms\n          },\n\n          /**\n           * Returns a copy of EncryptionParameterQualifiers corresponding to the\n           * current encryption parameters. Note that to change the qualifiers it is\n           * necessary to create a new instance of SEALContext once appropriate changes\n           * to the encryption parameters have been made.\n           *\n           * @readonly\n           * @name ContextData#qualifiers\n           * @type {EncryptionParameterQualifiers}\n           */\n          get qualifiers() {\n            const encParmQualifiers = EncryptionParameterQualifiers()\n            encParmQualifiers.unsafeInject(_instance.qualifiers())\n            return encParmQualifiers\n          },\n\n          /**\n           * Returns the significant bit count of the total coefficient modulus.\n           *\n           * @readonly\n           * @name ContextData#totalCoeffModulusBitCount\n           * @type {number}\n           */\n          get totalCoeffModulusBitCount() {\n            return _instance.totalCoeffModulusBitCount()\n          },\n\n          /**\n           * Returns a shared_ptr to the context data corresponding to the previous parameters\n           * in the modulus switching chain. If the current data is the first one in the\n           * chain, then the result is nullptr.\n           *\n           * @readonly\n           * @name ContextData#prevContextData\n           * @type {ContextData}\n           */\n          get prevContextData() {\n            const cxtData = ContextDataConstructor(library)({\n              Exception,\n              EncryptionParameters,\n              ParmsIdType,\n              EncryptionParameterQualifiers\n            })()\n            cxtData.unsafeInject(_instance.prevContextData())\n            return cxtData\n          },\n\n          /**\n           * Returns a shared_ptr to the context data corresponding to the next parameters\n           * in the modulus switching chain. If the current data is the last one in the\n           * chain, then the result is nullptr.\n           *\n           * @readonly\n           * @name ContextData#nextContextData\n           * @type {ContextData}\n           */\n          get nextContextData() {\n            const cxtData = ContextDataConstructor(library)({\n              Exception,\n              EncryptionParameters,\n              ParmsIdType,\n              EncryptionParameterQualifiers\n            })()\n            cxtData.unsafeInject(_instance.nextContextData())\n            return cxtData\n          },\n\n          /**\n           * Returns the index of the parameter set in a chain. The initial parameters\n           * have index 0 and the index increases sequentially in the parameter chain.\n           *\n           * @readonly\n           * @name EncryptionParameterQualifiers#chainIndex\n           * @type {number}\n           */\n          get chainIndex() {\n            return _instance.chainIndex()\n          }\n        }\n      }\n\nexport const ContextDataInit = ({\n  loader\n}: LoaderOptions): ContextDataDependencies => {\n  const library: Library = loader.library\n  return ContextDataConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\nimport { ContextData, ContextDataConstructorOptions } from './context-data'\nimport { EncryptionParameters } from './encryption-parameters'\nimport { SecurityLevel } from './security-level'\n\nexport type ContextDependencyOptions = {\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly ContextData: ContextDataConstructorOptions\n  readonly SecurityLevel: SecurityLevel\n}\n\nexport type ContextDependencies = {\n  ({\n    ParmsIdType,\n    ContextData,\n    SecurityLevel\n  }: ContextDependencyOptions): ContextConstructorOptions\n}\n\nexport type ContextConstructorOptions = {\n  (\n    encryptionParams: EncryptionParameters,\n    expandModChain?: boolean,\n    securityLevel?: SecurityLevel\n  ): Context\n}\n\nexport type Context = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly toHuman: () => string\n  readonly getContextData: (parmsId: ParmsIdType) => ContextData\n  readonly keyContextData: ContextData\n  readonly firstContextData: ContextData\n  readonly lastContextData: ContextData\n  readonly parametersSet: () => boolean\n  readonly keyParmsId: ParmsIdType\n  readonly firstParmsId: ParmsIdType\n  readonly lastParmsId: ParmsIdType\n  readonly usingKeyswitching: boolean\n}\n\nconst ContextConstructor =\n  (library: Library): ContextDependencies =>\n    ({\n      ParmsIdType,\n      ContextData,\n      SecurityLevel\n    }: ContextDependencyOptions): ContextConstructorOptions =>\n      (\n        encryptionParams,\n        expandModChain = true,\n        securityLevel = SecurityLevel.tc128\n      ): Context => {\n        // Static methods\n        const Constructor = library.SEALContext\n\n        let _instance = new Constructor(\n          encryptionParams.instance,\n          expandModChain,\n          securityLevel\n        ) as Instance\n\n        /**\n         * @implements Context\n         */\n\n        /**\n         * @interface Context\n         */\n        return {\n          /**\n           * Get the underlying WASM instance\n           *\n           * @private\n           * @readonly\n           * @name Context#instance\n           * @type {Instance}\n           */\n          get instance() {\n            return _instance\n          },\n\n          /**\n           * Inject this object with a raw WASM instance. No type checking is performed.\n           *\n           * @private\n           * @function\n           * @name Context#unsafeInject\n           * @param {Instance} instance WASM instance\n           */\n          unsafeInject(instance: Instance) {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n            _instance = instance\n          },\n\n          /**\n           * Delete the underlying WASM instance.\n           *\n           * Should be called before dereferencing this object to prevent the\n           * WASM heap from growing indefinitely.\n           * @function\n           * @name Context#delete\n           */\n          delete() {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n          },\n\n          /**\n           * Returns the context parameters in a human readable string format.\n           *\n           * @private\n           * @function\n           * @name Context#toString\n           * @returns {string} Context details as a string\n           */\n          toHuman(): string {\n            return _instance.toHuman()\n          },\n\n          /**\n           * Returns the ContextData corresponding to encryption parameters with a given\n           * parmsId. If parameters with the given parmsId are not found then the\n           * function returns nullptr.\n           *\n           * @function\n           * @name Context#getContextData\n           * @param {ParmsIdType} parmsId Specific id to return ContextData for\n           * @returns {ContextData} ContextData corresponding to encryption parameters\n           */\n          getContextData(parmsId: ParmsIdType): ContextData {\n            const instance = _instance.getContextData(parmsId.instance)\n            const contextData = ContextData()\n            contextData.unsafeInject(instance)\n            return contextData\n          },\n\n          /**\n           * The ContextData corresponding to encryption parameters that are used for keys.\n           *\n           * @readonly\n           * @name Context#keyContextData\n           * @type {ContextData}\n           */\n          get keyContextData() {\n            const instance = _instance.keyContextData()\n            const contextData = ContextData()\n            contextData.unsafeInject(instance)\n            return contextData\n          },\n\n          /**\n           * The ContextData corresponding to the first encryption parameters that are used for data.\n           *\n           * @readonly\n           * @name Context#firstContextData\n           * @type {ContextData}\n           */\n          get firstContextData() {\n            const instance = _instance.firstContextData()\n            const contextData = ContextData()\n            contextData.unsafeInject(instance)\n            return contextData\n          },\n\n          /**\n           * Returns the ContextData corresponding to the last encryption parameters that are used for data.\n           *\n           * @readonly\n           * @name Context#lastContextData\n           * @type {ContextData}\n           */\n          get lastContextData() {\n            const instance = _instance.lastContextData()\n            const contextData = ContextData()\n            contextData.unsafeInject(instance)\n            return contextData\n          },\n\n          /**\n           * Whether the encryption parameters are set in a way that is considered valid by\n           * Microsoft SEAL, the variable parameters_set is set to true.\n           *\n           * @function\n           * @name Context#parametersSet\n           * @type {boolean}\n           */\n          parametersSet() {\n            return _instance.parametersSet()\n          },\n\n          /**\n           * Returns a ParmsIdType corresponding to the set of encryption parameters that are used for keys.\n           *\n           * @readonly\n           * @name Context#keyParmsId\n           * @type {ParmsIdType}\n           */\n          get keyParmsId() {\n            const instance = _instance.keyParmsId()\n            const parmsId = ParmsIdType()\n            parmsId.inject(instance)\n            return parmsId\n          },\n\n          /**\n           * Returns a ParmsIdType corresponding to the first encryption parameters that are used for data.\n           *\n           * @readonly\n           * @name Context#firstParmsId\n           * @type {ParmsIdType}\n           */\n          get firstParmsId() {\n            const instance = _instance.firstParmsId()\n            const parmsId = ParmsIdType()\n            parmsId.inject(instance)\n            return parmsId\n          },\n\n          /**\n           * The ParmsIdType corresponding to the last encryption parameters that are used for data.\n           *\n           * @readonly\n           * @name Context#lastParmsId\n           * @type {ParmsIdType}\n           */\n          get lastParmsId() {\n            const instance = _instance.lastParmsId()\n            const parmsId = ParmsIdType()\n            parmsId.inject(instance)\n            return parmsId\n          },\n\n          /**\n           * Whether the coefficient modulus supports keyswitching. In practice,\n           * support for keyswitching is required by Evaluator.relinearize,\n           * Evaluator.applyGalois, and all rotation and conjugation operations. For\n           * keyswitching to be available, the coefficient modulus parameter must consist\n           * of at least two prime number factors.\n           *\n           * @readonly\n           * @name Context#usingKeyswitching\n           * @type {boolean}\n           */\n          get usingKeyswitching() {\n            return _instance.usingKeyswitching()\n          }\n        }\n      }\n\nexport const ContextInit = ({ loader }: LoaderOptions): ContextDependencies => {\n  const library: Library = loader.library\n  return ContextConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { CipherText } from './cipher-text'\nimport { Context } from './context'\nimport { SecretKey } from './secret-key'\nimport { PlainText, PlainTextConstructorOptions } from './plain-text'\n\nexport type DecryptorDependencyOptions = {\n  readonly Exception: Exception\n  readonly PlainText: PlainTextConstructorOptions\n}\n\nexport type DecryptorDependencies = {\n  ({\n    Exception,\n    PlainText\n  }: DecryptorDependencyOptions): DecryptorConstructorOptions\n}\n\nexport type DecryptorConstructorOptions = {\n  (context: Context, secretKey: SecretKey): Decryptor\n}\n\nexport type Decryptor = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly decrypt: (\n    cipherText: CipherText,\n    plainText?: PlainText\n  ) => PlainText | void\n  readonly invariantNoiseBudget: (cipherText: CipherText) => number\n}\n\nconst DecryptorConstructor =\n  (library: Library): DecryptorDependencies =>\n    ({\n      Exception,\n      PlainText\n    }: DecryptorDependencyOptions): DecryptorConstructorOptions =>\n      (context, secretKey): Decryptor => {\n        const Constructor = library.Decryptor\n        let _instance: Instance\n        try {\n          _instance = new Constructor(context.instance, secretKey.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n        /**\n         * @implements Decryptor\n         */\n\n        /**\n         * @interface Decryptor\n         */\n        return {\n          /**\n           * Get the underlying WASM instance\n           *\n           * @private\n           * @readonly\n           * @name Decryptor#instance\n           * @type {Instance}\n           */\n          get instance() {\n            return _instance\n          },\n\n          /**\n           * Inject this object with a raw WASM instance. No type checking is performed.\n           *\n           * @private\n           * @function\n           * @name Decryptor#unsafeInject\n           * @param {Instance} instance WASM instance\n           */\n          unsafeInject(instance: Instance) {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n            _instance = instance\n          },\n\n          /**\n           * Delete the underlying WASM instance.\n           *\n           * Should be called before dereferencing this object to prevent the\n           * WASM heap from growing indefinitely.\n           * @function\n           * @name Decryptor#delete\n           */\n          delete() {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n          },\n\n          /**\n           * Decrypts a CipherText and stores the result in the destination parameter.\n           *\n           * @function\n           * @name Decryptor#decrypt\n           * @param {CipherText} cipherText CipherText to decrypt\n           * @param {PlainText} [plainText] PlainText destination to store the decrypted result\n           * @returns {PlainText|void} Returns undefined if a PlainText was specified. Otherwise returns a\n           * PlainText containng the decrypted result\n           */\n          decrypt(cipherText: CipherText, plainText?: PlainText): PlainText | void {\n            try {\n              if (plainText) {\n                _instance.decrypt(cipherText.instance, plainText.instance)\n                return\n              }\n              const plain = PlainText()\n              _instance.decrypt(cipherText.instance, plain.instance)\n              return plain\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Computes the invariant noise budget (in bits) of a CipherText. The invariant\n           * noise budget measures the amount of room there is for the noise to grow while\n           * ensuring correct decryptions. This function works only with the BFV scheme.\n           *\n           * @par Invariant Noise Budget\n           * The invariant noise polynomial of a CipherText is a rational coefficient\n           * polynomial, such that a CipherText decrypts correctly as long as the\n           * coefficients of the invariantnoise polynomial are of absolute value less\n           * than 1/2. Thus, we call the infinity-norm of the invariant noise polynomial\n           * the invariant noise, and for correct decryption requireit to be less than\n           * 1/2. If v denotes the invariant noise, we define the invariant noise budget\n           * as -log2(2v). Thus, the invariant noise budget starts from some initial\n           * value, which depends on the encryption parameters, and decreases when\n           * computations are performed. When the budget reaches zero, the CipherText\n           * becomes too noisy to decrypt correctly.\n           *\n           * @function\n           * @name Decryptor#invariantNoiseBudget\n           * @param {CipherText} cipherText CipherText to measure\n           * @returns {number} Invariant noise budget (in bits)\n           */\n          invariantNoiseBudget(cipherText: CipherText): number {\n            try {\n              return _instance.invariantNoiseBudget(cipherText.instance)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          }\n        }\n      }\n\nexport const DecryptorInit = ({\n  loader\n}: LoaderOptions): DecryptorDependencies => {\n  const library: Library = loader.library\n  return DecryptorConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Vector, VectorConstructorOptions } from './vector'\nimport { ComprModeType } from './compr-mode-type'\nimport { SchemeType } from './scheme-type'\nimport { Exception, SealError } from './exception'\nimport { Modulus, ModulusConstructorOptions } from './modulus'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\n\nexport type EncryptionParametersDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Modulus: ModulusConstructorOptions\n  readonly SchemeType: SchemeType\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type EncryptionParametersDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Modulus,\n    SchemeType,\n    Vector\n  }: EncryptionParametersDependencyOptions): EncryptionParametersConstructorOptions\n}\n\nexport type EncryptionParametersConstructorOptions = {\n  (schemeType?: SchemeType): EncryptionParameters\n}\n\nexport type EncryptionParameters = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly setPolyModulusDegree: (polyModulusDegree: number) => void\n  readonly setCoeffModulus: (coeffModulus: Vector) => void\n  readonly setPlainModulus: (plainModulus: Modulus) => void\n  readonly scheme: SchemeType\n  readonly polyModulusDegree: number\n  readonly coeffModulus: BigUint64Array\n  readonly plainModulus: Modulus\n  readonly parmsId: ParmsIdType\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (encoded: string) => void\n  readonly loadArray: (array: Uint8Array) => void\n}\n\nconst EncryptionParametersConstructor =\n  (library: Library): EncryptionParametersDependencies =>\n    ({\n      Exception,\n      ComprModeType,\n      Modulus,\n      SchemeType,\n      ParmsIdType,\n      Vector\n    }: EncryptionParametersDependencyOptions): EncryptionParametersConstructorOptions =>\n      (schemeType: SchemeType = SchemeType.none): EncryptionParameters => {\n        const Constructor = library.EncryptionParameters\n        let _instance = new Constructor(schemeType)\n\n        /**\n         * @implements EncryptionParameters\n         */\n\n        /**\n         * @interface EncryptionParameters\n         */\n        return {\n          /**\n           * Get the underlying WASM instance\n           *\n           * @private\n           * @readonly\n           * @name EncryptionParameters#instance\n           * @type {Instance}\n           */\n          get instance() {\n            return _instance\n          },\n\n          /**\n           * Inject this object with a raw WASM instance. No type checking is performed.\n           *\n           * @private\n           * @function\n           * @name EncryptionParameters#unsafeInject\n           * @param {Instance} instance WASM instance\n           */\n          unsafeInject(instance: Instance) {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n            _instance = instance\n          },\n\n          /**\n           * Delete the underlying WASM instance.\n           *\n           * Should be called before dereferencing this object to prevent the\n           * WASM heap from growing indefinitely.\n           * @function\n           * @name EncryptionParameters#delete\n           */\n          delete() {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n          },\n\n          /**\n           * Sets the degree of the polynomial modulus parameter to the specified value.\n           * The polynomial modulus directly affects the number of coefficients in\n           * PlainText polynomials, the size of CipherText elements, the computational\n           * performance of the scheme (bigger is worse), and the security level (bigger\n           * is better). In Microsoft SEAL the degree of the polynomial modulus must be a power\n           * of 2 (e.g.  1024, 2048, 4096, 8192, 16384, or 32768).\n           *\n           * @function\n           * @name EncryptionParameters#setPolyModulusDegree\n           * @param {number} polyModulusDegree The degree of the polynomial modulus\n           */\n          setPolyModulusDegree(polyModulusDegree: number) {\n            try {\n              _instance.setPolyModulusDegree(polyModulusDegree)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Sets the coefficient modulus parameter. The coefficient modulus consists\n           * of a list of distinct prime numbers, and is represented by a vector of\n           * Modulus objects. The coefficient modulus directly affects the size\n           * of CipherText elements, the amount of computation that the scheme can perform\n           * (bigger is better), and the security level (bigger is worse). In Microsoft SEAL each\n           * of the prime numbers in the coefficient modulus must be at most 60 bits,\n           * and must be congruent to 1 modulo 2*degree(poly_modulus).\n           *\n           * @function\n           * @name EncryptionParameters#setCoeffModulus\n           * @param {Vector} coeffModulus Vector of Modulus primes\n           */\n          setCoeffModulus(coeffModulus: Vector) {\n            try {\n              _instance.setCoeffModulus(coeffModulus.instance)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Sets the PlainText modulus parameter. The PlainText modulus is an integer\n           * modulus represented by the Modulus class. The PlainText modulus\n           * determines the largest coefficient that PlainText polynomials can represent.\n           * It also affects the amount of computation that the scheme can perform\n           * (bigger is worse). In Microsoft SEAL the PlainText modulus can be at most 60 bits\n           * long, but can otherwise be any integer. Note, however, that some features\n           * (e.g. batching) require the PlainText modulus to be of a particular form.\n           *\n           * @function\n           * @name EncryptionParameters#setPlainModulus\n           * @param {Modulus} plainModulus PlainText modulus parameter\n           */\n          setPlainModulus(plainModulus: Modulus) {\n            try {\n              _instance.setPlainModulus(plainModulus.instance)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * The encryption scheme type.\n           *\n           * @readonly\n           * @name EncryptionParameters#scheme\n           * @type {SchemeType.none|SchemeType.bfv|SchemeType.ckks}\n           */\n          get scheme() {\n            return _instance.scheme()\n          },\n\n          /**\n           * The degree of the polynomial modulus parameter.\n           *\n           * @readonly\n           * @name EncryptionParameters#polyModulusDegree\n           * @type {number}\n           */\n          get polyModulusDegree() {\n            return _instance.polyModulusDegree()\n          },\n\n          /**\n           * Returns the currently set coefficient modulus parameter.\n           *\n           * @readonly\n           * @name EncryptionParameters#coeffModulus\n           * @type {BigUint64Array}\n           */\n          get coeffModulus() {\n            const tempVect = Vector()\n            const instance = _instance.coeffModulus()\n            tempVect.unsafeInject(instance)\n            tempVect.setType('Modulus')\n            const tempArr = tempVect.toArray() as BigUint64Array\n            tempVect.delete()\n            return tempArr\n          },\n\n          /**\n           * Returns the currently set PlainText modulus parameter.\n           *\n           * @readonly\n           * @name EncryptionParameters#plainModulus\n           * @type {Modulus}\n           */\n          get plainModulus() {\n            const instance = _instance.plainModulus()\n            const smallModulus = Modulus(BigInt(0))\n            smallModulus.inject(instance)\n            return smallModulus\n          },\n\n          /**\n           * Returns the ParmsId of the current parameters.\n           *\n           * @readonly\n           * @name EncryptionParameters#parmsId\n           * @type {ParmsIdType}\n           */\n          get parmsId() {\n            const parms = ParmsIdType()\n            parms.inject(_instance.parmsId())\n            return parms\n          },\n\n          /**\n           * Save the Encryption Parameters to a base64 string\n           *\n           * @function\n           * @name EncryptionParameters#save\n           * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n           * @returns {string} base64 encoded string\n           */\n          save(compression: ComprModeType = ComprModeType.zstd): string {\n            return _instance.saveToString(compression)\n          },\n\n          /**\n           * Save the Encryption Parameters as a binary Uint8Array\n           *\n           * @function\n           * @name EncryptionParameters#saveArray\n           * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n           * @returns {Uint8Array} A byte array containing the CipherText in binary form\n           */\n          saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n            const tempVect = Vector()\n            const instance = _instance.saveToArray(compression)\n            tempVect.unsafeInject(instance)\n            tempVect.setType('Uint8Array')\n            const tempArr = tempVect.toArray() as Uint8Array\n            tempVect.delete()\n            return tempArr\n          },\n\n          /**\n           * Load the Encryption Parameters from a base64 string\n           *\n           * @function\n           * @name EncryptionParameters#load\n           * @param {string} encoded base64 encoded string\n           */\n          load(encoded: string) {\n            try {\n              _instance.loadFromString(encoded)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Load the Encryption Parameters from an Uint8Array holding binary data\n           *\n           * @function\n           * @name EncryptionParameters#loadArray\n           * @param {Uint8Array} array TypedArray containing binary data\n           */\n          loadArray(array: Uint8Array) {\n            try {\n              _instance.loadFromArray(array)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          }\n        }\n      }\n\nexport const EncryptionParametersInit = ({\n  loader\n}: LoaderOptions): EncryptionParametersDependencies => {\n  const library: Library = loader.library\n  return EncryptionParametersConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { CipherText, CipherTextConstructorOptions } from './cipher-text'\nimport { Context } from './context'\nimport { Serializable, SerializableConstructorOptions } from './serializable'\nimport { PublicKey } from './public-key'\nimport { SecretKey } from './secret-key'\nimport { PlainText } from './plain-text'\n\nexport type EncryptorDependencyOptions = {\n  readonly Exception: Exception\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly CipherText: CipherTextConstructorOptions\n  readonly Serializable: SerializableConstructorOptions\n}\n\nexport type EncryptorDependencies = {\n  ({\n    Exception,\n    MemoryPoolHandle,\n    CipherText,\n    Serializable\n  }: EncryptorDependencyOptions): EncryptorConstructorOptions\n}\n\nexport type EncryptorConstructorOptions = {\n  (context: Context, publicKey: PublicKey, secretKey?: SecretKey): Encryptor\n}\n\nexport type Encryptor = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly encrypt: (\n    plainText: PlainText,\n    cipherText?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly encryptSerializable: (\n    plainText: PlainText,\n    pool?: MemoryPoolHandle\n  ) => Serializable\n  readonly encryptSymmetric: (\n    plainText: PlainText,\n    cipherText?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly encryptSymmetricSerializable: (\n    plainText: PlainText,\n    pool?: MemoryPoolHandle\n  ) => Serializable\n  readonly encryptZero: (\n    cipherText?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly encryptZeroSerializable: (pool?: MemoryPoolHandle) => Serializable\n}\n\nconst EncryptorConstructor =\n  (library: Library): EncryptorDependencies =>\n    ({\n      Exception,\n      MemoryPoolHandle,\n      CipherText,\n      Serializable\n    }: EncryptorDependencyOptions): EncryptorConstructorOptions =>\n      (context, publicKey, secretKey): Encryptor => {\n        const Constructor = library.Encryptor\n        let _instance = constructInstance(context, publicKey, secretKey)\n\n        function constructInstance(\n          context: Context,\n          publicKey: PublicKey,\n          secretKey?: SecretKey\n        ) {\n          try {\n            if (secretKey) {\n              return new Constructor(\n                context.instance,\n                publicKey.instance,\n                secretKey.instance\n              )\n            }\n            return new Constructor(context.instance, publicKey.instance)\n          } catch (e) {\n            throw Exception.safe(e as SealError)\n          }\n        }\n        /**\n         * @implements Encryptor\n         */\n\n        /**\n         * @interface Encryptor\n         */\n        return {\n          /**\n           * Get the underlying WASM instance\n           *\n           * @private\n           * @readonly\n           * @name Encryptor#instance\n           * @type {Instance}\n           */\n          get instance() {\n            return _instance\n          },\n\n          /**\n           * Inject this object with a raw WASM instance. No type checking is performed.\n           *\n           * @private\n           * @function\n           * @name Encryptor#unsafeInject\n           * @param {Instance} instance WASM instance\n           */\n          unsafeInject(instance: Instance) {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n            _instance = instance\n          },\n\n          /**\n           * Delete the underlying WASM instance.\n           *\n           * Should be called before dereferencing this object to prevent the\n           * WASM heap from growing indefinitely.\n           * @function\n           * @name Encryptor#delete\n           */\n          delete() {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n          },\n\n          /**\n           * Encrypts a PlainText and stores the result in the destination parameter.\n           * Dynamic memory allocations in the process are allocated from the memory\n           * pool pointed to by the given MemoryPoolHandle.\n           *\n           * @function\n           * @name Encryptor#encrypt\n           * @param {PlainText} plainText PlainText to encrypt\n           * @param {CipherText} [cipherText] CipherText destination to store the encrypted result\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {CipherText|void} Returns undefined if a CipherText was specified. Otherwise returns a\n           * CipherText containing the encrypted result\n           */\n          encrypt(\n            plainText: PlainText,\n            cipherText?: CipherText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): CipherText | void {\n            try {\n              if (cipherText) {\n                _instance.encrypt(plainText.instance, cipherText.instance, pool)\n                return\n              }\n              const cipher = CipherText()\n              _instance.encrypt(plainText.instance, cipher.instance, pool)\n              return cipher\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Encrypts a PlainText and returns a CipherText as a Serializable object.\n           * Dynamic memory allocations in the process are allocated from the memory\n           * pool pointed to by the given MemoryPoolHandle.\n           *\n           * @function\n           * @name Encryptor#encryptSerializable\n           * @param {PlainText} plainText PlainText to encrypt\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {Serializable<CipherText>} A Serializable containing the encrypted result\n           */\n          encryptSerializable(\n            plainText: PlainText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): Serializable {\n            try {\n              const temp = Serializable()\n              const instance = _instance.encryptSerializable(\n                plainText.instance,\n                pool\n              )\n              temp.unsafeInject(instance)\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Encrypts a PlainText with the secret key and stores the result in\n           * destination.\n           *\n           * The encryption parameters for the resulting CipherText\n           * correspond to:\n           * 1) in BFV or BGV, the highest (data) level in the modulus switching chain,\n           * 2) in CKKS, the encryption parameters of the plaintext.\n           * Dynamic memory allocations in the process are allocated from the memory\n           * pool pointed to by the given MemoryPoolHandle.\n           *\n           * @function\n           * @name Encryptor#encryptSymmetric\n           * @param {PlainText} plainText PlainText to encrypt\n           * @param {CipherText} [cipherText] CipherText destination to store the encrypted result.\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {CipherText|void} Returns undefined if a CipherText was specified. Otherwise returns a\n           * CipherText containing the encrypted result\n           */\n          encryptSymmetric(\n            plainText: PlainText,\n            cipherText?: CipherText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): CipherText | void {\n            try {\n              if (cipherText) {\n                _instance.encryptSymmetric(\n                  plainText.instance,\n                  cipherText.instance,\n                  pool\n                )\n                return\n              }\n              const cipher = CipherText()\n              _instance.encryptSymmetric(plainText.instance, cipher.instance, pool)\n              return cipher\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Encrypts a plaintext with the secret key and returns the ciphertext as\n           * a serializable object.\n           *\n           * The encryption parameters for the resulting CipherText\n           * correspond to:\n           * 1) in BFV or BGV, the highest (data) level in the modulus switching chain,\n           * 2) in CKKS, the encryption parameters of the plaintext.\n           * Dynamic memory allocations in the process are allocated from the memory\n           * pool pointed to by the given MemoryPoolHandle.\n           *\n           * Half of the ciphertext data is pseudo-randomly generated from a seed to\n           * reduce the object size. The resulting serializable object cannot be used\n           * directly and is meant to be serialized for the size reduction to have an\n           * impact.\n           *\n           * @function\n           * @name Encryptor#encryptSymmetricSerializable\n           * @param {PlainText} plainText PlainText to encrypt\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {Serializable<CipherText>} Returns a Serializable containing the encrypted result\n           */\n          encryptSymmetricSerializable(\n            plainText: PlainText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): Serializable {\n            try {\n              const serialized = Serializable()\n              const instance = _instance.encryptSymmetricSerializable(\n                plainText.instance,\n                pool\n              )\n              serialized.unsafeInject(instance)\n              return serialized\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Encrypts a zero plaintext with the public key and returns the ciphertext\n           * as a serializable object.\n           *\n           * The encryption parameters for the resulting ciphertext correspond to the\n           * highest (data) level in the modulus switching chain. Dynamic memory\n           * allocations in the process are allocated from the memory pool pointed to\n           * by the given MemoryPoolHandle.\n           *\n           * @function\n           * @name Encryptor#encryptZero\n           * @param {CipherText} [cipherText] A CipherText to overwrite.\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {CipherText|void} Returns undefined if a CipherText was specified. Otherwise returns a\n           * CipherText containing the encrypted result\n           */\n          encryptZero(\n            cipherText?: CipherText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): CipherText | void {\n            try {\n              if (cipherText) {\n                _instance.encryptZero(cipherText.instance, pool)\n                return\n              }\n              const cipher = CipherText()\n              _instance.encryptZero(cipher.instance, pool)\n              return cipher\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Encrypts a zero plaintext with the public key and stores the result in\n           * destination.\n           *\n           * The encryption parameters for the resulting ciphertext correspond to the\n           * highest (data) level in the modulus switching chain. Dynamic memory\n           * allocations in the process are allocated from the memory pool pointed to\n           * by the given MemoryPoolHandle.\n           * \n           * @function\n           * @name Encryptor#encryptZeroSerializable\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {Serializable<CipherText>} A CipherText as a serialized object containing the encrypted result\n           */\n          encryptZeroSerializable(\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): Serializable {\n            try {\n              const serialized = Serializable()\n              const instance = _instance.encryptZeroSerializable(pool)\n              serialized.unsafeInject(instance)\n              return serialized\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          }\n        }\n      }\n\nexport const EncryptorInit = ({\n  loader\n}: LoaderOptions): EncryptorDependencies => {\n  const library: Library = loader.library\n  return EncryptorConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { CipherText, CipherTextConstructorOptions } from './cipher-text'\nimport { Context } from './context'\nimport { PlainText, PlainTextConstructorOptions } from './plain-text'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { RelinKeys } from './relin-keys'\nimport { ParmsIdType } from './parms-id-type'\nimport { GaloisKeys } from './galois-keys'\nimport { SchemeType } from './scheme-type'\n\nexport type EvaluatorDependencyOptions = {\n  readonly Exception: Exception\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly CipherText: CipherTextConstructorOptions\n  readonly PlainText: PlainTextConstructorOptions\n}\n\nexport type EvaluatorDependencies = {\n  ({\n    Exception,\n    MemoryPoolHandle,\n    CipherText,\n    PlainText\n  }: EvaluatorDependencyOptions): EvaluatorConstructorOptions\n}\n\nexport type EvaluatorConstructorOptions = {\n  (context: Context): Evaluator\n}\n\nexport type Evaluator = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly negate: (\n    encrypted: CipherText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly add: (\n    a: CipherText,\n    b: CipherText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly sub: (\n    a: CipherText,\n    b: CipherText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly multiply: (\n    a: CipherText,\n    b: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly square: (\n    encrypted: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly relinearize: (\n    encrypted: CipherText,\n    relinKeys: RelinKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly cipherModSwitchToNext: (\n    encrypted: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly cipherModSwitchTo: (\n    encrypted: CipherText,\n    parmsId: ParmsIdType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly plainModSwitchToNext: (\n    plain: PlainText,\n    destination?: PlainText\n  ) => PlainText | void\n  readonly plainModSwitchTo: (\n    plain: PlainText,\n    parmsId: ParmsIdType,\n    destination?: PlainText\n  ) => PlainText | void\n  readonly rescaleToNext: (\n    encrypted: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly rescaleTo: (\n    encrypted: CipherText,\n    parmsId: ParmsIdType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly exponentiate: (\n    encrypted: CipherText,\n    exponent: number,\n    relinKeys: RelinKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly addPlain: (\n    encrypted: CipherText,\n    plain: PlainText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly subPlain: (\n    encrypted: CipherText,\n    plain: PlainText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly multiplyPlain: (\n    encrypted: CipherText,\n    plain: PlainText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly plainTransformToNtt: (\n    plain: PlainText,\n    parmsId: ParmsIdType,\n    destinationNtt?: PlainText,\n    pool?: MemoryPoolHandle\n  ) => PlainText | void\n  readonly cipherTransformToNtt: (\n    encrypted: CipherText,\n    destinationNtt?: CipherText\n  ) => CipherText | void\n  readonly cipherTransformFromNtt: (\n    encryptedNtt: CipherText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly applyGalois: (\n    encrypted: CipherText,\n    galoisElt: number,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly rotateRows: (\n    encrypted: CipherText,\n    steps: number,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly rotateColumns: (\n    encrypted: CipherText,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly rotateVector: (\n    encrypted: CipherText,\n    steps: number,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly complexConjugate: (\n    encrypted: CipherText,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly sumElements: (\n    encrypted: CipherText,\n    galoisKeys: GaloisKeys,\n    scheme: SchemeType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly dotProduct: (\n    a: CipherText,\n    b: CipherText,\n    relinKeys: RelinKeys,\n    galoisKeys: GaloisKeys,\n    scheme: SchemeType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly dotProductPlain: (\n    a: CipherText,\n    b: PlainText,\n    galoisKeys: GaloisKeys,\n    scheme: SchemeType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n}\n\nconst EvaluatorConstructor =\n  (library: Library): EvaluatorDependencies =>\n    ({\n      Exception,\n      MemoryPoolHandle,\n      CipherText,\n      PlainText\n    }: EvaluatorDependencyOptions): EvaluatorConstructorOptions =>\n      (context): Evaluator => {\n        const Constructor = library.Evaluator\n        let _instance: Instance\n        try {\n          _instance = new Constructor(context.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n        /**\n         * @implements Evaluator\n         */\n\n        /**\n         * @interface Evaluator\n         */\n        return {\n          /**\n           * Get the underlying WASM instance\n           *\n           * @private\n           * @readonly\n           * @name Evaluator#instance\n           * @type {Instance}\n           */\n          get instance() {\n            return _instance\n          },\n\n          /**\n           * Inject this object with a raw WASM instance. No type checking is performed.\n           *\n           * @private\n           * @function\n           * @name Evaluator#unsafeInject\n           * @param {Instance} instance WASM instance\n           */\n          unsafeInject(instance: Instance) {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n            _instance = instance\n          },\n\n          /**\n           * Delete the underlying WASM instance.\n           *\n           * Should be called before dereferencing this object to prevent the\n           * WASM heap from growing indefinitely.\n           * @function\n           * @name Evaluator#delete\n           */\n          delete() {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n          },\n\n          /**\n           * Negates a CipherText and stores the result in the destination parameter.\n           *\n           * @function\n           * @name Evaluator#negate\n           * @param {CipherText} encrypted CipherText to negate\n           * @param {CipherText} [destination] CipherText to store the negated results\n           * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n           * @example\n           * const cipherText = seal.CipherText()\n           * // ... after encrypting some data ...\n           * const resultCipher = evaluator.negate(cipherText)\n           * // or\n           * const cipherDest = seal.CipherText()\n           * evaluator.negate(encrypted, cipherDest)\n           */\n          negate(\n            encrypted: CipherText,\n            destination?: CipherText\n          ): CipherText | void {\n            try {\n              if (destination) {\n                _instance.negate(encrypted.instance, destination.instance)\n                return\n              }\n              const temp = CipherText()\n              _instance.negate(encrypted.instance, temp.instance)\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Adds two CipherTexts. This function adds together a and b\n           * and stores the result in the destination parameter.\n           *\n           * @function\n           * @name Evaluator#add\n           * @param {CipherText} a CipherText operand A\n           * @param {CipherText} b CipherText operand B\n           * @param {CipherText} [destination] CipherText destination to store the sum\n           * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n           * @example\n           * const cipherTextA = seal.CipherText()\n           * const cipherTextB = seal.CipherText()\n           * // ... after encrypting some data ...\n           * const resultCipher = evaluator.add(cipherTextA, cipherTextB)\n           * // or\n           * const cipherDest = seal.CipherText()\n           * evaluator.add(cipherTextA, cipherTextB, cipherDest)\n           */\n          add(\n            a: CipherText,\n            b: CipherText,\n            destination?: CipherText\n          ): CipherText | void {\n            try {\n              if (destination) {\n                _instance.add(a.instance, b.instance, destination.instance)\n                return\n              }\n              const temp = CipherText()\n              _instance.add(a.instance, b.instance, temp.instance)\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Subtracts two CipherTexts. This function computes the difference of a\n           * and b and stores the result in the destination parameter.\n           *\n           * @function\n           * @name Evaluator#sub\n           * @param {CipherText} a CipherText operand A\n           * @param {CipherText} b CipherText operand B\n           * @param {CipherText} [destination] CipherText destination to store the difference\n           * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n           * @example\n           * const cipherTextA = seal.CipherText()\n           * const cipherTextB = seal.CipherText()\n           * // ... after encrypting some data ...\n           * const resultCipher = evaluator.sub(cipherTextA, cipherTextB)\n           * // or\n           * const cipherDest = seal.CipherText()\n           * evaluator.sub(cipherTextA, cipherTextB, cipherDest)\n           */\n          sub(\n            a: CipherText,\n            b: CipherText,\n            destination?: CipherText\n          ): CipherText | void {\n            try {\n              if (destination) {\n                _instance.sub(a.instance, b.instance, destination.instance)\n                return\n              }\n              const temp = CipherText()\n              _instance.sub(a.instance, b.instance, temp.instance)\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Multiplies two CipherTexts. This functions computes the product of a\n           * and b and stores the result in the destination parameter. Dynamic\n           * memory allocations in the process are allocated from the memory pool pointed\n           * to by the given MemoryPoolHandle.\n           *\n           * @function\n           * @name Evaluator#multiply\n           * @param {CipherText} a CipherText operand A\n           * @param {CipherText} b CipherText operand B\n           * @param {CipherText} [destination] CipherText destination to store the product\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n           * @example\n           * const cipherTextA = seal.CipherText()\n           * const cipherTextB = seal.CipherText()\n           * // ... after encrypting some data ...\n           * const resultCipher = evaluator.multiply(cipherTextA, cipherTextB)\n           * // or\n           * const cipherDest = seal.CipherText()\n           * evaluator.multiply(cipherTextA, cipherTextB, cipherDest)\n           */\n          multiply(\n            a: CipherText,\n            b: CipherText,\n            destination?: CipherText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): CipherText | void {\n            try {\n              if (destination) {\n                _instance.multiply(\n                  a.instance,\n                  b.instance,\n                  destination.instance,\n                  pool\n                )\n                return\n              }\n              const temp = CipherText()\n              _instance.multiply(a.instance, b.instance, temp.instance, pool)\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Squares a CipherText. This functions computes the square of encrypted and\n           * stores the result in the destination parameter. Dynamic memory allocations\n           * in the process are allocated from the memory pool pointed to by the given\n           * MemoryPoolHandle.\n           *\n           * @function\n           * @name Evaluator#square\n           * @param {CipherText} encrypted CipherText to square\n           * @param {CipherText} [destination] CipherText destination to store the squared result\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n           * @example\n           * const cipherTextA = seal.CipherText()\n           * // ... after encrypting some data ...\n           * const resultCipher = evaluator.square(cipherTextA, cipherTextB)\n           * // or\n           * const cipherDest = seal.CipherText()\n           * evaluator.square(cipherTextA, cipherDest)\n           */\n          square(\n            encrypted: CipherText,\n            destination?: CipherText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): CipherText | void {\n            try {\n              if (destination) {\n                _instance.square(encrypted.instance, destination.instance, pool)\n                return\n              }\n              const temp = CipherText()\n              _instance.square(encrypted.instance, temp.instance, pool)\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Relinearizes a CipherText. This functions relinearizes encrypted, reducing\n           * its size down to 2, and stores the result in the destination parameter.\n           * If the size of encrypted is K+1, the given relinearization keys need to\n           * have size at least K-1. Dynamic memory allocations in the process are allocated\n           * from the memory pool pointed to by the given MemoryPoolHandle.\n           *\n           * @function\n           * @name Evaluator#relinearize\n           * @param {CipherText} encrypted CipherText to relinearize\n           * @param {RelinKeys} relinKeys RelinKey used to perform relinearization\n           * @param {CipherText} [destination] CipherText destination to store the relinearized result\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n           * @example\n           * const relinKeys = keyGenerator.createRelinKeys()\n           * const cipherTextA = seal.CipherText()\n           * // ... after encrypting some data ...\n           * const resultCipher = evaluator.relinearize(cipherTextA, relinKeys)\n           * // or\n           * const cipherDest = seal.CipherText()\n           * evaluator.relinearize(cipherTextA, relinKeys, cipherDest)\n           */\n          relinearize(\n            encrypted: CipherText,\n            relinKeys: RelinKeys,\n            destination?: CipherText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): CipherText | void {\n            try {\n              if (destination) {\n                _instance.relinearize(\n                  encrypted.instance,\n                  relinKeys.instance,\n                  destination.instance,\n                  pool\n                )\n                return\n              }\n              const temp = CipherText()\n              _instance.relinearize(\n                encrypted.instance,\n                relinKeys.instance,\n                temp.instance,\n                pool\n              )\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Given a CipherText encrypted modulo q_1...q_k, this function switches the\n           * modulus down to q_1...q_{k-1} and stores the result in the destination\n           * parameter. Dynamic memory allocations in the process are allocated from\n           * the memory pool pointed to by the given MemoryPoolHandle.\n           *\n           * @function\n           * @name Evaluator#cipherModSwitchToNext\n           * @param {CipherText} encrypted CipherText to switch its modulus down\n           * @param {CipherText} [destination] CipherText destination to store the switched result\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n           * @example\n           * const cipherTextA = seal.CipherText()\n           * // ... after encrypting some data ...\n           * const resultCipher = evaluator.cipherModSwitchToNext(cipherTextA)\n           * // or\n           * const cipherDest = seal.CipherText()\n           * evaluator.cipherModSwitchToNext(cipherTextA, cipherDest)\n           */\n          cipherModSwitchToNext(\n            encrypted: CipherText,\n            destination?: CipherText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): CipherText | void {\n            try {\n              if (destination) {\n                _instance.cipherModSwitchToNext(\n                  encrypted.instance,\n                  destination.instance,\n                  pool\n                )\n                return\n              }\n              const temp = CipherText()\n              _instance.cipherModSwitchToNext(\n                encrypted.instance,\n                temp.instance,\n                pool\n              )\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Given a CipherText encrypted modulo q_1...q_k, this function switches the\n           * modulus down until the parameters reach the given parmsId and stores the\n           * result in the destination parameter. Dynamic memory allocations in the process\n           * are allocated from the memory pool pointed to by the given MemoryPoolHandle.\n           *\n           * @function\n           * @name Evaluator#cipherModSwitchTo\n           * @param {CipherText} encrypted CipherText to switch its modulus down\n           * @param {ParmsIdType} parmsId Target parmsId to switch to\n           * @param {CipherText} [destination] CipherText destination to store the switched result\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n           * @example\n           * const context = seal.Context(encParms, true)\n           * const cipherTextA = seal.CipherText()\n           * // ... after encrypting some data ...\n           * const parmsId = context.lastParmsId\n           * const resultCipher = evaluator.cipherModSwitchTo(cipherTextA, parmsId)\n           * // or\n           * const cipherDest = seal.CipherText()\n           * evaluator.cipherModSwitchTo(cipherTextA, parmsId, cipherDest)\n           */\n          cipherModSwitchTo(\n            encrypted: CipherText,\n            parmsId: ParmsIdType,\n            destination?: CipherText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): CipherText | void {\n            try {\n              if (destination) {\n                _instance.cipherModSwitchTo(\n                  encrypted.instance,\n                  parmsId.instance,\n                  destination.instance,\n                  pool\n                )\n                return\n              }\n              const temp = CipherText()\n              _instance.cipherModSwitchTo(\n                encrypted.instance,\n                parmsId.instance,\n                temp.instance,\n                pool\n              )\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Modulus switches an NTT transformed PlainText from modulo q_1...q_k down\n           * to modulo q_1...q_{k-1} and stores the result in the destination parameter.\n           *\n           * @function\n           * @name Evaluator#plainModSwitchToNext\n           * @param {PlainText} plain PlainText to switch its modulus down\n           * @param {PlainText} [destination] PlainText destination to store the switched result\n           * @returns {PlainText|void} PlainText containing the result or void if a destination was supplied\n           * @example\n           * const plainTextA = seal.PlainText()\n           * // ... after encoding some data ...\n           * const resultCipher = evaluator.plainModSwitchToNext(plainTextA)\n           * // or\n           * const plainDest = seal.PlainText()\n           * evaluator.plainModSwitchToNext(plainTextA, plainDest)\n           */\n          plainModSwitchToNext(\n            plain: PlainText,\n            destination?: PlainText\n          ): PlainText | void {\n            try {\n              if (destination) {\n                _instance.plainModSwitchToNext(plain.instance, destination.instance)\n                return\n              }\n              const temp = PlainText()\n              _instance.plainModSwitchToNext(plain.instance, temp.instance)\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Given an NTT transformed PlainText modulo q_1...q_k, this function switches\n           * the modulus down until the parameters reach the given parmsId and stores\n           * the result in the destination parameter.\n           *\n           * @function\n           * @name Evaluator#plainModSwitchTo\n           * @param {PlainText} plain PlainText to switch its modulus down\n           * @param {ParmsIdType} parmsId Target parmsId to switch to\n           * @param {PlainText} [destination] PlainText destination to store the switched result\n           * @returns {PlainText|void} PlainText containing the result or void if a destination was supplied\n           * @example\n           * const context = seal.Context(encParms, true)\n           * const plainTextA = seal.PlainText()\n           * // ... after encoding some data ...\n           * const parmsId = context.lastParmsId\n           * const resultCipher = evaluator.plainModSwitchTo(plainTextA, parmsId)\n           * // or\n           * const plainDest = seal.PlainText()\n           * evaluator.plainModSwitchTo(plainTextA, parmsId, plainDest)\n           */\n          plainModSwitchTo(\n            plain: PlainText,\n            parmsId: ParmsIdType,\n            destination?: PlainText\n          ): PlainText | void {\n            try {\n              if (destination) {\n                _instance.plainModSwitchTo(\n                  plain.instance,\n                  parmsId.instance,\n                  destination.instance\n                )\n                return\n              }\n              const temp = PlainText()\n              _instance.plainModSwitchTo(\n                plain.instance,\n                parmsId.instance,\n                temp.instance\n              )\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Given a CipherText encrypted modulo q_1...q_k, this function switches the\n           * modulus down to q_1...q_{k-1}, scales the message down accordingly, and\n           * stores the result in the destination parameter. Dynamic memory allocations\n           * in the process are allocated from the memory pool pointed to by the given\n           * MemoryPoolHandle.\n           *\n           * @function\n           * @name Evaluator#rescaleToNext\n           * @param {CipherText} encrypted CipherText to rescale\n           * @param {CipherText} [destination] CipherText destination to store the rescaled result\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n           * @example\n           * const cipherTextA = seal.CipherText()\n           * // ... after encrypting some data ...\n           * const resultCipher = evaluator.rescaleToNext(cipherTextA)\n           * // or\n           * const cipherDest = seal.CipherText()\n           * evaluator.rescaleToNext(cipherTextA, cipherDest)\n           */\n          rescaleToNext(\n            encrypted: CipherText,\n            destination?: CipherText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): CipherText | void {\n            try {\n              if (destination) {\n                _instance.rescaleToNext(\n                  encrypted.instance,\n                  destination.instance,\n                  pool\n                )\n                return\n              }\n              const temp = CipherText()\n              _instance.rescaleToNext(encrypted.instance, temp.instance, pool)\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Given a CipherText encrypted modulo q_1...q_k, this function switches the\n           * modulus down until the parameters reach the given parmsId, scales the message\n           * down accordingly, and stores the result in the destination parameter. Dynamic\n           * memory allocations in the process are allocated from the memory pool pointed\n           * to by the given MemoryPoolHandle.\n           *\n           * @function\n           * @name Evaluator#rescaleTo\n           * @param {CipherText} encrypted CipherText to rescale\n           * @param {ParmsIdType} parmsId Target parmsId to rescale to\n           * @param {CipherText} [destination] CipherText destination to store the rescaled result\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n           * @example\n           * const context = seal.Context(encParms, true)\n           * const cipherTextA = seal.CipherText()\n           * // ... after encrypting some data ...\n           * const parmsId = context.lastParmsId\n           * const resultCipher = evaluator.rescaleTo(cipherTextA, parmsId)\n           * // or\n           * const cipherDest = seal.CipherText()\n           * evaluator.rescaleTo(cipherTextA, parmsId, cipherDest)\n           */\n          rescaleTo(\n            encrypted: CipherText,\n            parmsId: ParmsIdType,\n            destination?: CipherText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): CipherText | void {\n            try {\n              if (destination) {\n                _instance.rescaleTo(\n                  encrypted.instance,\n                  parmsId.instance,\n                  destination.instance,\n                  pool\n                )\n                return\n              }\n              const temp = CipherText()\n              _instance.rescaleTo(\n                encrypted.instance,\n                parmsId.instance,\n                temp.instance,\n                pool\n              )\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Exponentiates a CipherText. This functions raises encrypted to a power and\n           * stores the result in the destination parameter. Dynamic memory allocations\n           * in the process are allocated from the memory pool pointed to by the given\n           * MemoryPoolHandle. The exponentiation is done in a depth-optimal order, and\n           * relinearization is performed automatically after every multiplication in\n           * the process. In relinearization the given relinearization keys are used.\n           *\n           * @function\n           * @name Evaluator#exponentiate\n           * @param {CipherText} encrypted CipherText to exponentiate\n           * @param {number} exponent Positive integer to exponentiate the CipherText\n           * @param {RelinKeys} relinKeys RelinKeys used to perform relinearization after each exponentiation\n           * @param {CipherText} [destination] CipherText destination to store the exponentiated result\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n           * @example\n           * const relinKeys = keyGenerator.createRelinKeys()\n           * const cipherTextA = seal.CipherText()\n           * // ... after encrypting some data ...\n           * const resultCipher = evaluator.exponentiate(cipherTextA, 3, relinKeys)\n           * // or\n           * const cipherDest = seal.CipherText()\n           * evaluator.exponentiate(cipherTextA, 3, relinKeys, cipherDest)\n           */\n          exponentiate(\n            encrypted: CipherText,\n            exponent: number,\n            relinKeys: RelinKeys,\n            destination?: CipherText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): CipherText | void {\n            try {\n              if (destination) {\n                _instance.exponentiate(\n                  encrypted.instance,\n                  exponent,\n                  relinKeys.instance,\n                  destination.instance,\n                  pool\n                )\n                return\n              }\n              const temp = CipherText()\n              _instance.exponentiate(\n                encrypted.instance,\n                exponent,\n                relinKeys.instance,\n                temp.instance,\n                pool\n              )\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Adds a CipherText and a PlainText. This function adds a CipherText and\n           * a PlainText and stores the result in the destination parameter. The PlainText\n           * must be valid for the current encryption parameters.\n           *\n           * @function\n           * @name Evaluator#addPlain\n           * @param {CipherText} encrypted CipherText operand A\n           * @param {PlainText} plain PlainText operand B\n           * @param {CipherText} [destination] CipherText destination to store the sum\n           * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n           * @example\n           * const cipherTextA = seal.CipherText()\n           * const plainTextB = seal.PlainText()\n           * // ... after encrypting/encoding some data ...\n           * const resultCipher = evaluator.addPlain(cipherTextA, plainTextB)\n           * // or\n           * const cipherDest = seal.CipherText()\n           * evaluator.addPlain(cipherTextA, plainTextB, cipherDest)\n           */\n          addPlain(\n            encrypted: CipherText,\n            plain: PlainText,\n            destination?: CipherText\n          ): CipherText | void {\n            try {\n              if (destination) {\n                _instance.addPlain(\n                  encrypted.instance,\n                  plain.instance,\n                  destination.instance\n                )\n                return\n              }\n              const temp = CipherText()\n              _instance.addPlain(encrypted.instance, plain.instance, temp.instance)\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Subtracts a PlainText from a CipherText. This function subtracts a PlainText\n           * from a CipherText and stores the result in the destination parameter. The\n           * PlainText must be valid for the current encryption parameters.\n           *\n           * @function\n           * @name Evaluator#subPlain\n           * @param {CipherText} encrypted CipherText operand A\n           * @param {PlainText} plain PlainText operand B\n           * @param {CipherText} [destination] CipherText destination to store the difference\n           * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n           * @example\n           * const cipherTextA = seal.CipherText()\n           * const plainTextB = seal.PlainText()\n           * // ... after encrypting/encoding some data ...\n           * const resultCipher = evaluator.subPlain(cipherTextA, plainTextB)\n           * // or\n           * const cipherDest = seal.CipherText()\n           * evaluator.subPlain(cipherTextA, plainTextB, cipherDest)\n           */\n          subPlain(\n            encrypted: CipherText,\n            plain: PlainText,\n            destination?: CipherText\n          ): CipherText | void {\n            try {\n              if (destination) {\n                _instance.subPlain(\n                  encrypted.instance,\n                  plain.instance,\n                  destination.instance\n                )\n                return\n              }\n              const temp = CipherText()\n              _instance.subPlain(encrypted.instance, plain.instance, temp.instance)\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Multiplies a CipherText with a PlainText. This function multiplies\n           * a CipherText with a PlainText and stores the result in the destination\n           * parameter. The PlainText must be a valid for the current encryption parameters,\n           * and cannot be identially 0. Dynamic memory allocations in the process are\n           * allocated from the memory pool pointed to by the given MemoryPoolHandle.\n           *\n           * @function\n           * @name Evaluator#multiplyPlain\n           * @param {CipherText} encrypted CipherText operand A\n           * @param {PlainText} plain PlainText operand B\n           * @param {CipherText} [destination] CipherText destination to store the product\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {CipherText?} CipherText containing the result or void if a destination was supplied\n           * @example\n           * const cipherTextA = seal.CipherText()\n           * const plainTextB = seal.PlainText()\n           * // ... after encrypting/encoding some data ...\n           * const resultCipher = evaluator.multiplyPlain(cipherTextA, plainTextB)\n           * // or\n           * const cipherDest = seal.CipherText()\n           * evaluator.multiplyPlain(cipherTextA, plainTextB, cipherDest)\n           */\n          multiplyPlain(\n            encrypted: CipherText,\n            plain: PlainText,\n            destination?: CipherText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): CipherText | void {\n            try {\n              if (destination) {\n                _instance.multiplyPlain(\n                  encrypted.instance,\n                  plain.instance,\n                  destination.instance,\n                  pool\n                )\n                return\n              }\n              const temp = CipherText()\n              _instance.multiplyPlain(\n                encrypted.instance,\n                plain.instance,\n                temp.instance,\n                pool\n              )\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Transforms a PlainText to NTT domain. This functions applies the number\n           * Theoretic Transform to a PlainText by first embedding integers modulo the\n           * PlainText modulus to integers modulo the coefficient modulus and then\n           * performing David Harvey's NTT on the resulting polynomial. The transformation\n           * is done with respect to encryption parameters corresponding to a given\n           * parmsId. The result is stored in the destinationNtt parameter. For the\n           * operation to be valid, the PlainText must have degree less than PolyModulusDegree\n           * and each coefficient must be less than the PlainText modulus, i.e., the PlainText\n           * must be a valid PlainText under the current encryption parameters. Dynamic\n           * memory allocations in the process are allocated from the memory pool pointed\n           * to by the given MemoryPoolHandle.\n           *\n           * @function\n           * @name Evaluator#plainTransformToNtt\n           * @param {PlainText} plain PlainText to transform\n           * @param {ParmsIdType} parmsId target parmsId to perform NTT transformation\n           * @param {PlainText} [destinationNtt] PlainText destination to store the transformed result\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {PlainText|void} PlainText containing the result or void if a destination was supplied\n           * @example\n           * const context = seal.Context(encParms, true)\n           * const plainTextA = seal.PlainText()\n           * // ... after encoding some data ...\n           * const parmsId = context.lastParmsId\n           * const resultCipher = evaluator.plainTransformToNtt(plainTextA, parmsId)\n           * // or\n           * const plainDest = seal.PlainText()\n           * evaluator.plainTransformToNtt(plainTextA, parmsId, plainDest)\n           */\n          plainTransformToNtt(\n            plain: PlainText,\n            parmsId: ParmsIdType,\n            destinationNtt?: PlainText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): PlainText | void {\n            try {\n              if (destinationNtt) {\n                _instance.plainTransformToNtt(\n                  plain.instance,\n                  parmsId.instance,\n                  destinationNtt.instance,\n                  pool\n                )\n                return\n              }\n              const temp = PlainText()\n              _instance.plainTransformToNtt(\n                plain.instance,\n                parmsId.instance,\n                temp.instance,\n                pool\n              )\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Transforms a CipherText to NTT domain. This functions applies David Harvey's\n           * number Theoretic Transform separately to each polynomial of a CipherText.\n           * The result is stored in the destinationNtt parameter.\n           *\n           * @function\n           * @name Evaluator#cipherTransformToNtt\n           * @param {CipherText} encrypted CipherText to transform\n           * @param {CipherText} [destinationNtt] CipherText destination to store the transformed result\n           * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n           * @example\n           * const cipherTextA = seal.CipherText()\n           * // ... after encrypting some data ...\n           * const resultCipher = evaluator.cipherTransformToNtt(cipherTextA)\n           * // or\n           * const cipherDest = seal.CipherText()\n           * evaluator.cipherTransformToNtt(cipherTextA, cipherDest)\n           */\n          cipherTransformToNtt(\n            encrypted: CipherText,\n            destinationNtt?: CipherText\n          ): CipherText | void {\n            try {\n              if (destinationNtt) {\n                _instance.cipherTransformToNtt(\n                  encrypted.instance,\n                  destinationNtt.instance\n                )\n                return\n              }\n              const temp = CipherText()\n              _instance.cipherTransformToNtt(encrypted.instance, temp.instance)\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Transforms a CipherText back from NTT domain. This functions applies the\n           * inverse of David Harvey's number Theoretic Transform separately to each\n           * polynomial of a CipherText. The result is stored in the destination parameter.\n           *\n           * @function\n           * @name Evaluator#cipherTransformFromNtt\n           * @param {CipherText} encryptedNtt CipherText to transform\n           * @param {CipherText} [destination] CipherText destination to store the transformed result\n           * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n           * @example\n           * // ... after cipherTransformToNtt ...\n           * const resultCipher = evaluator.cipherTransformFromNtt(cipherTextANtt)\n           * // or\n           * const cipherDest = seal.CipherText()\n           * evaluator.cipherTransformFromNtt(cipherTextANtt, cipherDest)\n           */\n          cipherTransformFromNtt(\n            encryptedNtt: CipherText,\n            destination?: CipherText\n          ): CipherText | void {\n            try {\n              if (destination) {\n                _instance.cipherTransformFromNtt(\n                  encryptedNtt.instance,\n                  destination.instance\n                )\n                return\n              }\n              const temp = CipherText()\n              _instance.cipherTransformFromNtt(encryptedNtt.instance, temp.instance)\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Applies a Galois automorphism to a CipherText and writes the result to the\n           * destination parameter. To evaluate the Galois automorphism, an appropriate\n           * set of Galois keys must also be provided. Dynamic memory allocations in\n           * the process are allocated from the memory pool pointed to by the given\n           * MemoryPoolHandle.\n           *\n           * The desired Galois automorphism is given as a Galois element, and must be\n           * an odd integer in the interval [1, M-1], where M = 2*N, and N = degree(poly_modulus).\n           * Used with batching, a Galois element 3^i % M corresponds to a cyclic row\n           * rotation i steps to the left, and a Galois element 3^(N/2-i) % M corresponds\n           * to a cyclic row rotation i steps to the right. The Galois element M-1 corresponds\n           * to a column rotation (row swap) in BFV, and complex conjugation in CKKS.\n           * In the polynomial view (not batching), a Galois automorphism by a Galois\n           * element p changes Enc(plain(x)) to Enc(plain(x^p)).\n           *\n           * @function\n           * @name Evaluator#applyGalois\n           * @param {CipherText} encrypted CipherText to apply the automorphism\n           * @param {number} galoisElt number representing the Galois element\n           * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n           * @param {CipherText} [destination] CipherText destination to store the result\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n           * @example\n           * ...\n           * const evaluator = seal.Evaluator(context)\n           * const arr = Int32Array.from({ length: encoder.slotCount }, (_, i) => i)\n           * const plain = encoder.encode(arr)\n           * const cipher = encryptor.encrypt(plain)\n           * const cipherDest = seal.CipherText()\n           * const galElt = 2 * parms.polyModulusDegree - 1\n           * evaluator.applyGalois(cipher, galElt, galoisKeys, cipherDest)\n           */\n          applyGalois(\n            encrypted: CipherText,\n            galoisElt: number,\n            galoisKeys: GaloisKeys,\n            destination?: CipherText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): CipherText | void {\n            try {\n              if (destination) {\n                _instance.applyGalois(\n                  encrypted.instance,\n                  galoisElt,\n                  galoisKeys.instance,\n                  destination.instance,\n                  pool\n                )\n                return\n              }\n              const temp = CipherText()\n              _instance.applyGalois(\n                encrypted.instance,\n                galoisElt,\n                galoisKeys.instance,\n                temp.instance,\n                pool\n              )\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Rotates PlainText matrix rows cyclically. When batching is used with the\n           * BFV/BGV scheme, this function rotates the encrypted PlainText matrix rows\n           * cyclically to the left (steps > 0) or to the right (steps < 0) and writes\n           * the result to the destination parameter. Since the size of the batched\n           * matrix is 2-by-(N/2), where N is the degree of the polynomial modulus,\n           * the number of steps to rotate must have absolute value at most N/2-1. Dynamic\n           * memory allocations in the process are allocated from the memory pool pointed\n           * to by the given MemoryPoolHandle.\n           *\n           * @function\n           * @name Evaluator#rotateRows\n           * @param {CipherText} encrypted CipherText to rotate rows\n           * @param {number} steps Int representing steps to rotate (negative = right, positive = left)\n           * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n           * @param {CipherText} [destination] CipherText destination to store the rotated result\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n           * @example\n           * const galoisKeys = keyGenerator.createGaloisKeys()\n           * const cipherTextA = seal.CipherText()\n           * // ... after encrypting some data ...\n           * const resultCipher = evaluator.rotateRows(cipherTextA, 3, galoisKeys)\n           * // or\n           * const cipherDest = seal.CipherText()\n           * evaluator.rotateRows(cipherTextA, 3, galoisKeys, cipherDest)\n           */\n          rotateRows(\n            encrypted: CipherText,\n            steps: number,\n            galoisKeys: GaloisKeys,\n            destination?: CipherText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): CipherText | void {\n            try {\n              if (destination) {\n                _instance.rotateRows(\n                  encrypted.instance,\n                  steps,\n                  galoisKeys.instance,\n                  destination.instance,\n                  pool\n                )\n                return\n              }\n              const temp = CipherText()\n              _instance.rotateRows(\n                encrypted.instance,\n                steps,\n                galoisKeys.instance,\n                temp.instance,\n                pool\n              )\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Rotates PlainText matrix columns cyclically. When batching is used with\n           * the BFV scheme, this function rotates the encrypted PlainText matrix columns\n           * cyclically, and writes the result to the destination parameter. Since the\n           * size of the batched matrix is 2-by-(N/2), where N is the degree of the\n           * polynomial modulus, this means simply swapping the two rows. Dynamic memory\n           * allocations in the process are allocated from the memory pool pointed to\n           * by the given MemoryPoolHandle.\n           *\n           * @function\n           * @name Evaluator#rotateColumns\n           * @param {CipherText} encrypted CipherText to rotate columns\n           * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n           * @param {CipherText} [destination] CipherText destination to store the rotated result\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n           * @example\n           * const galoisKeys = keyGenerator.createGaloisKeys()\n           * const cipherTextA = seal.CipherText()\n           * // ... after encrypting some data ...\n           * const resultCipher = evaluator.rotateColumns(cipherTextA, galoisKeys)\n           * // or\n           * const cipherDest = seal.CipherText()\n           * evaluator.rotateColumns(cipherTextA, galoisKeys, cipherDest)\n           */\n          rotateColumns(\n            encrypted: CipherText,\n            galoisKeys: GaloisKeys,\n            destination?: CipherText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): CipherText | void {\n            try {\n              if (destination) {\n                _instance.rotateColumns(\n                  encrypted.instance,\n                  galoisKeys.instance,\n                  destination.instance,\n                  pool\n                )\n                return\n              }\n              const temp = CipherText()\n              _instance.rotateColumns(\n                encrypted.instance,\n                galoisKeys.instance,\n                temp.instance,\n                pool\n              )\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Rotates PlainText vector cyclically. When using the CKKS scheme, this function\n           * rotates the encrypted PlainText vector cyclically to the left (steps > 0)\n           * or to the right (steps < 0) and writes the result to the destination parameter.\n           * Since the size of the batched matrix is 2-by-(N/2), where N is the degree\n           * of the polynomial modulus, the number of steps to rotate must have absolute\n           * value at most N/2-1. Dynamic memory allocations in the process are allocated\n           * from the memory pool pointed to by the given MemoryPoolHandle.\n           *\n           * @function\n           * @name Evaluator#rotateVector\n           * @param {CipherText} encrypted CipherText to rotate the entire vector\n           * @param {number} steps Int representing steps to rotate (negative = right, positive = left)\n           * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n           * @param {CipherText} [destination] CipherText destination to store the rotated result\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n           * @example\n           * const galoisKeys = keyGenerator.createGaloisKeys()\n           * const cipherTextA = seal.CipherText()\n           * // ... after encrypting some data ...\n           * const resultCipher = evaluator.rotateVector(cipherTextA, 3, galoisKeys)\n           * // or\n           * const cipherDest = seal.CipherText()\n           * evaluator.rotateVector(cipherTextA, 3, galoisKeys, cipherDest)\n           */\n          rotateVector(\n            encrypted: CipherText,\n            steps: number,\n            galoisKeys: GaloisKeys,\n            destination?: CipherText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): CipherText | void {\n            try {\n              if (destination) {\n                _instance.rotateVector(\n                  encrypted.instance,\n                  steps,\n                  galoisKeys.instance,\n                  destination.instance,\n                  pool\n                )\n                return\n              }\n              const temp = CipherText()\n              _instance.rotateVector(\n                encrypted.instance,\n                steps,\n                galoisKeys.instance,\n                temp.instance,\n                pool\n              )\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Complex conjugates PlainText slot values. When using the CKKS scheme, this\n           * function complex conjugates all values in the underlying PlainText, and\n           * writes the result to the destination parameter. Dynamic memory allocations\n           * in the process are allocated from the memory pool pointed to by the given\n           * MemoryPoolHandle.\n           *\n           * @function\n           * @name Evaluator#complexConjugate\n           * @param {CipherText} encrypted CipherText to complex conjugate\n           * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n           * @param {CipherText} [destination] CipherText destination to store the conjugated result\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n           * @example\n           * const galoisKeys = keyGenerator.createGaloisKeys()\n           * const cipherTextA = seal.CipherText()\n           * // ... after encrypting some data ...\n           * const resultCipher = evaluator.complexConjugate(cipherTextA, galoisKeys)\n           * // or\n           * const cipherDest = seal.CipherText()\n           * evaluator.complexConjugate(cipherTextA, galoisKeys, cipherDest)\n           */\n          complexConjugate(\n            encrypted: CipherText,\n            galoisKeys: GaloisKeys,\n            destination?: CipherText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): CipherText | void {\n            try {\n              if (destination) {\n                _instance.complexConjugate(\n                  encrypted.instance,\n                  galoisKeys.instance,\n                  destination.instance,\n                  pool\n                )\n                return\n              }\n              const temp = CipherText()\n              _instance.complexConjugate(\n                encrypted.instance,\n                galoisKeys.instance,\n                temp.instance,\n                pool\n              )\n              return temp\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Sum all elements in the encrypted CipherText. The resulting CipherText contains the sum in every element.\n           *\n           * @function\n           * @name Evaluator#sumElements\n           * @param {CipherText} encrypted CipherText to sum elements\n           * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n           * @param {SchemeType} scheme Scheme that was used for encryption\n           * @param {CipherText} [destination] CipherText destination to store the result\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n           * @example\n           * const galoisKeys = keyGenerator.createGaloisKeys()\n           * const cipherTextA = seal.CipherText()\n           * // ... after encrypting some data ...\n           * const resultCipher = evaluator.sumElements(cipherTextA, galoisKeys, seal.SchemeTypes.BFV)\n           * // or\n           * const cipherDest = seal.CipherText()\n           * evaluator.sumElements(cipherTextA, galoisKeys, seal.SchemeTypes.BFV, cipherDest)\n           */\n          sumElements(\n            encrypted: CipherText,\n            galoisKeys: GaloisKeys,\n            scheme: SchemeType,\n            destination?: CipherText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): CipherText | void {\n            try {\n              if (destination) {\n                _instance.sumElements(\n                  encrypted.instance,\n                  galoisKeys.instance,\n                  scheme,\n                  destination.instance,\n                  pool\n                )\n                return\n              }\n\n              const newDest = CipherText()\n              _instance.sumElements(\n                encrypted.instance,\n                galoisKeys.instance,\n                scheme,\n                newDest.instance,\n                pool\n              )\n              return newDest\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Perform the dot product (A.B) of two CipherTexts The resulting CipherText contains the dot product in every\n           * element.\n           *\n           * @function\n           * @name Evaluator#dotProduct\n           * @param {CipherText} a CipherText operand A\n           * @param {CipherText} b CipherText operand B\n           * @param {RelinKeys} relinKeys RelinKeys used to perform relinearization after multiplication\n           * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n           * @param {SchemeType} scheme Scheme that was used for encryption\n           * @param {CipherText} [destination] CipherText destination to store the result\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n           * @example\n           * const relinKeys = keyGenerator.createRelinKeys()\n           * const galoisKeys = keyGenerator.createGaloisKeys()\n           * const cipherTextA = seal.CipherText()\n           * const cipherTextB = seal.CipherText()\n           * // ... after encrypting some data ...\n           * const resultCipher = evaluator.dotProduct(cipherTextA, cipherTextB, relinKeys, galoisKeys, seal.SchemeTypes.BFV)\n           * // or\n           * const cipherDest = seal.CipherText()\n           * evaluator.dotProduct(cipherTextA, cipherTextB, relinKeys, galoisKeys, seal.SchemeTypes.BFV, cipherDest)\n           */\n          dotProduct(\n            a: CipherText,\n            b: CipherText,\n            relinKeys: RelinKeys,\n            galoisKeys: GaloisKeys,\n            scheme: SchemeType,\n            destination?: CipherText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): CipherText | void {\n            try {\n              if (destination) {\n                _instance.multiply(\n                  a.instance,\n                  b.instance,\n                  destination.instance,\n                  pool\n                )\n                _instance.relinearize(\n                  destination.instance,\n                  relinKeys.instance,\n                  destination.instance,\n                  pool\n                )\n                _instance.sumElements(\n                  destination.instance,\n                  galoisKeys.instance,\n                  scheme,\n                  destination.instance,\n                  pool\n                )\n                return\n              }\n\n              const newDest = CipherText()\n              _instance.multiply(a.instance, b.instance, newDest.instance, pool)\n              _instance.relinearize(\n                newDest.instance,\n                relinKeys.instance,\n                newDest.instance,\n                pool\n              )\n              _instance.sumElements(\n                newDest.instance,\n                galoisKeys.instance,\n                scheme,\n                newDest.instance,\n                pool\n              )\n              return newDest\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Perform the dot product (A.B) of CipherText (A) and PlainText (B). The resulting CipherText contains the dot\n           * product in every element.\n           *\n           * @function\n           * @name Evaluator#dotProductPlain\n           * @param {CipherText} a CipherText operand A\n           * @param {PlainText} b PlainText operand B\n           * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n           * @param {SchemeType} scheme Scheme that was used for encryption\n           * @param {CipherText} [destination] CipherText destination to store the result\n           * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n           * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n           * @example\n           * const galoisKeys = keyGenerator.createGaloisKeys()\n           * const cipherTextA = seal.CipherText()\n           * const plainTextB = seal.PlainText()\n           * // ... after encoding / encrypting some data ...\n           * const resultCipher = evaluator.dotProductPlain(cipherTextA, plainTextB, galoisKeys, seal.SchemeTypes.BFV)\n           * // or\n           * const cipherDest = seal.CipherText()\n           * evaluator.dotProductPlain(cipherTextA, plainTextB, galoisKeys, seal.SchemeTypes.BFV, cipherDest)\n           */\n          dotProductPlain(\n            a: CipherText,\n            b: PlainText,\n            galoisKeys: GaloisKeys,\n            scheme: SchemeType,\n            destination?: CipherText,\n            pool: MemoryPoolHandle = MemoryPoolHandle.global\n          ): CipherText | void {\n            try {\n              if (destination) {\n                _instance.multiplyPlain(\n                  a.instance,\n                  b.instance,\n                  destination.instance,\n                  pool\n                )\n                _instance.sumElements(\n                  destination.instance,\n                  galoisKeys.instance,\n                  scheme,\n                  destination.instance,\n                  pool\n                )\n                return\n              }\n\n              const newDest = CipherText()\n              _instance.multiplyPlain(\n                a.instance,\n                b.instance,\n                newDest.instance,\n                pool\n              )\n              _instance.sumElements(\n                newDest.instance,\n                galoisKeys.instance,\n                scheme,\n                newDest.instance,\n                pool\n              )\n              return newDest\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          }\n        }\n      }\n\nexport const EvaluatorInit = ({\n  loader\n}: LoaderOptions): EvaluatorDependencies => {\n  const library: Library = loader.library\n  return EvaluatorConstructor(library)\n}\n","import { LoaderOptions, Library } from './seal'\n\nexport type ExceptionDependencies = {\n  (): ExceptionConstructorOptions\n}\n\nexport type ExceptionConstructorOptions = {\n  (): Exception\n}\n\nexport type SealError = number | Error | string\n\nexport type Exception = {\n  readonly safe: (e: SealError) => Error\n}\n\nconst ExceptionConstructor =\n  (library: Library): ExceptionDependencies =>\n    (): ExceptionConstructorOptions =>\n      (): Exception => {\n        // Static methods\n        const _getException = library.getException\n\n        /**\n         * @implements Exception\n         */\n\n        /**\n         * @interface Exception\n         */\n        return {\n          /**\n           * Takes a caught exception in SEAL library and gets a safe error string\n           *\n           * @function\n           * @name Exception.safe\n           * @param {(number|Error|string)} error Unsafe error to normalize\n           * @returns {Error}\n           */\n          safe(error: number | Error | string): Error {\n            if (typeof error === 'number') {\n              return new Error(_getException(error))\n            }\n\n            if (error instanceof Error) {\n              return error\n            }\n            return new Error(error || 'Unknown Error!')\n          }\n        }\n      }\n\nexport const ExceptionInit = ({\n  loader\n}: LoaderOptions): ExceptionDependencies => {\n  const library: Library = loader.library\n  return ExceptionConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\n\nexport type GaloisKeysDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type GaloisKeysDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: GaloisKeysDependencyOptions): GaloisKeysConstructorOptions\n}\n\nexport type GaloisKeysConstructorOptions = {\n  (): GaloisKeys\n}\n\nexport type GaloisKeys = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly size: number\n  readonly getIndex: (galoisElt: number) => number\n  readonly hasKey: (galoisElt: number) => boolean\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (key: GaloisKeys) => void\n  readonly clone: () => GaloisKeys\n  readonly move: (key: GaloisKeys) => void\n}\n\nconst GaloisKeysConstructor =\n  (library: Library): GaloisKeysDependencies =>\n    ({\n      Exception,\n      ComprModeType,\n      Vector\n    }: GaloisKeysDependencyOptions): GaloisKeysConstructorOptions =>\n      (): GaloisKeys => {\n        const Constructor = library.GaloisKeys\n        let _instance = new Constructor()\n\n        /**\n         * @implements GaloisKeys\n         */\n\n        /**\n         * @interface GaloisKeys\n         */\n        return {\n          /**\n           * Get the underlying WASM instance\n           *\n           * @private\n           * @readonly\n           * @name GaloisKeys#instance\n           * @type {Instance}\n           */\n          get instance() {\n            return _instance\n          },\n\n          /**\n           * Inject this object with a raw WASM instance\n           *\n           * @private\n           * @function\n           * @name GaloisKeys#inject\n           * @param {Instance} instance WASM instance\n           */\n          inject(instance: Instance) {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n            _instance = new Constructor(instance)\n            instance.delete()\n          },\n\n          /**\n           * Delete the underlying WASM instance.\n           *\n           * Should be called before dereferencing this object to prevent the\n           * WASM heap from growing indefinitely.\n           * @function\n           * @name GaloisKeys#delete\n           */\n          delete() {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n          },\n\n          /**\n           * Returns the current number of keyswitching keys. Only keys that are\n           * non-empty are counted.\n           *\n           * @readonly\n           * @name GaloisKeys#size\n           * @type {number}\n           */\n          get size() {\n            return _instance.size()\n          },\n\n          /**\n           * Returns the index of a Galois key in the backing KSwitchKeys instance that\n           * corresponds to the given Galois element, assuming that it exists in the\n           * backing KSwitchKeys.\n           *\n           * @function\n           * @name GaloisKeys#getIndex\n           * @param {number} galoisElt The Galois element\n           * @returns {number} The index of the galois element\n           */\n          getIndex(galoisElt: number): number {\n            try {\n              return _instance.getIndex(galoisElt)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Returns whether a Galois key corresponding to a given Galois element exists.\n           *\n           * @function\n           * @name GaloisKeys#hasKey\n           * @param {number} galoisElt The Galois element\n           * @returns {boolean} True if the key exists\n           */\n          hasKey(galoisElt: number): boolean {\n            try {\n              return _instance.hasKey(galoisElt)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n          /**\n           * Save the Encryption Parameters to a base64 string\n           *\n           * @function\n           * @name GaloisKeys#save\n           * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n           * @returns {string} Base64 encoded string\n           */\n          save(compression: ComprModeType = ComprModeType.zstd): string {\n            try {\n              return _instance.saveToString(compression)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Save the GaloisKeys as a binary Uint8Array\n           *\n           * @function\n           * @name GaloisKeys#saveArray\n           * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n           * @returns {Uint8Array} A byte array containing the GaloisKeys in binary form\n           */\n          saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n            const tempVect = Vector()\n            const instance = _instance.saveToArray(compression)\n            tempVect.unsafeInject(instance)\n            tempVect.setType('Uint8Array')\n            const tempArr = tempVect.toArray() as Uint8Array\n            tempVect.delete()\n            return tempArr\n          },\n\n          /**\n           * Load a GaloisKeys from a base64 string\n           *\n           * @function\n           * @name GaloisKeys#load\n           * @param {Context} context Encryption context to enforce\n           * @param {string} encoded Base64 encoded string\n           */\n          load(context: Context, encoded: string) {\n            try {\n              _instance.loadFromString(context.instance, encoded)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Load a GaloisKeys from an Uint8Array holding binary data\n           *\n           * @function\n           * @name GaloisKeys#loadArray\n           * @param {Context} context Encryption context to enforce\n           * @param {Uint8Array} array TypedArray containing binary data\n           */\n          loadArray(context: Context, array: Uint8Array) {\n            try {\n              _instance.loadFromArray(context.instance, array)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Copy an existing GaloisKeys and overwrite this instance\n           *\n           * @function\n           * @name GaloisKeys#copy\n           * @param {GaloisKeys} key GaloisKeys to copy\n           * @example\n           * const keyA = keyGenerator.createGaloisKeys()\n           * const keyB = seal.GaloisKeys()\n           * keyB.copy(keyA)\n           * // keyB holds a copy of keyA\n           */\n          copy(key: GaloisKeys) {\n            try {\n              _instance.copy(key.instance)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Clone and return a new instance of this GaloisKeys\n           *\n           * @function\n           * @name GaloisKeys#clone\n           * @returns {GaloisKeys}\n           * @example\n           * const keyA = keyGenerator.createGaloisKeys()\n           * const keyB = keyA.clone()\n           * // keyB holds a copy of keyA\n           */\n          clone(): GaloisKeys {\n            try {\n              const clonedInstance = _instance.clone()\n              const key = GaloisKeysConstructor(library)({\n                Exception,\n                ComprModeType,\n                Vector\n              })()\n              key.inject(clonedInstance)\n              return key\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Move a GaloisKeys into this one and delete the old reference\n           *\n           * @function\n           * @name GaloisKeys#move\n           * @param {GaloisKeys} key GaloisKeys to move\n           * @example\n           * const keyA = keyGenerator.createGaloisKeys()\n           * const keyB = seal.GaloisKeys()\n           * keyB.move(keyA)\n           * // keyB holds a the instance of keyA.\n           * // keyA no longer holds an instance\n           */\n          move(key: GaloisKeys) {\n            try {\n              _instance.move(key.instance)\n              // TODO: find optimization\n              // This method results in a copy instead of a real move.\n              // Therefore, we need to delete the old instance.\n              key.delete()\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          }\n        }\n      }\n\nexport const GaloisKeysInit = ({\n  loader\n}: LoaderOptions): GaloisKeysDependencies => {\n  const library: Library = loader.library\n  return GaloisKeysConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { Context } from './context'\nimport { SecretKey, SecretKeyConstructorOptions } from './secret-key'\nimport { RelinKeys, RelinKeysConstructorOptions } from './relin-keys'\nimport { Serializable, SerializableConstructorOptions } from './serializable'\nimport { PublicKey, PublicKeyConstructorOptions } from './public-key'\nimport { GaloisKeys, GaloisKeysConstructorOptions } from './galois-keys'\n\nexport type KeyGeneratorDependencyOptions = {\n  readonly Exception: Exception\n  readonly PublicKey: PublicKeyConstructorOptions\n  readonly SecretKey: SecretKeyConstructorOptions\n  readonly RelinKeys: RelinKeysConstructorOptions\n  readonly GaloisKeys: GaloisKeysConstructorOptions\n  readonly Serializable: SerializableConstructorOptions\n}\n\nexport type KeyGeneratorDependencies = {\n  ({\n    Exception,\n    PublicKey,\n    SecretKey,\n    RelinKeys,\n    GaloisKeys,\n    Serializable\n  }: KeyGeneratorDependencyOptions): KeyGeneratorConstructorOptions\n}\n\nexport type KeyGeneratorConstructorOptions = {\n  (context: Context, secretKey?: SecretKey): KeyGenerator\n}\n\nexport type KeyGenerator = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly secretKey: () => SecretKey\n  readonly createPublicKeySerializable: () => Serializable\n  readonly createPublicKey: () => PublicKey\n  readonly createRelinKeysSerializable: () => Serializable\n  readonly createRelinKeys: () => RelinKeys\n  readonly createGaloisKeysSerializable: (steps?: Int32Array) => Serializable\n  readonly createGaloisKeys: (steps?: Int32Array) => GaloisKeys\n}\n\nconst KeyGeneratorConstructor =\n  (library: Library): KeyGeneratorDependencies =>\n    ({\n      Exception,\n      PublicKey,\n      SecretKey,\n      RelinKeys,\n      GaloisKeys,\n      Serializable\n    }: KeyGeneratorDependencyOptions): KeyGeneratorConstructorOptions =>\n      (context, secretKey): KeyGenerator => {\n        const Constructor = library.KeyGenerator\n        let _instance = constructInstance(context, secretKey)\n\n        function constructInstance(context: Context, secretKey?: SecretKey) {\n          try {\n            if (secretKey) {\n              return new Constructor(context.instance, secretKey.instance)\n            }\n            return new Constructor(context.instance)\n          } catch (e) {\n            throw Exception.safe(e as SealError)\n          }\n        }\n        /**\n         * @implements KeyGenerator\n         */\n\n        /**\n         * @interface KeyGenerator\n         */\n        return {\n          /**\n           * Get the underlying WASM instance\n           *\n           * @private\n           * @readonly\n           * @name KeyGenerator#instance\n           * @type {Instance}\n           */\n          get instance() {\n            return _instance\n          },\n\n          /**\n           * Inject this object with a raw WASM instance. No type checking is performed.\n           *\n           * @private\n           * @function\n           * @name KeyGenerator#unsafeInject\n           * @param {Instance} instance WASM instance\n           */\n          unsafeInject(instance: Instance) {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n            _instance = instance\n          },\n\n          /**\n           * Delete the underlying WASM instance.\n           *\n           * Should be called before dereferencing this object to prevent the\n           * WASM heap from growing indefinitely.\n           * @function\n           * @name KeyGenerator#delete\n           */\n          delete() {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n          },\n\n          /**\n           * Return the generated SecretKey\n           *\n           * @function\n           * @name KeyGenerator#secretKey\n           * @returns {SecretKey} The secret key that was generated upon instantiation of this KeyGenerator\n           */\n          secretKey(): SecretKey {\n            try {\n              const key = SecretKey()\n              const instance = _instance.secretKey()\n              key.inject(instance)\n              return key\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Create a new PublicKey instance\n           *\n           * @function\n           * @name KeyGenerator#createPublicKey\n           * @returns {PublicKey} A new PublicKey instance\n           */\n          createPublicKey(): PublicKey {\n            try {\n              const key = PublicKey()\n              _instance.createPublicKey(key.instance)\n              return key\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Create a new, Serializable PublicKey instance\n           *\n           * @function\n           * @name KeyGenerator#createPublicKeySerializable\n           * @returns {Serializable<PublicKey>} A new, serializable, PublicKey instance\n           */\n          createPublicKeySerializable(): Serializable {\n            try {\n              const serialized = Serializable()\n              const instance = _instance.createPublicKeySerializable()\n              serialized.unsafeInject(instance)\n              return serialized\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Generates and returns relinearization keys. This function returns\n           * relinearization keys in a fully expanded form and is meant to be used\n           * primarily for demo, testing, and debugging purposes.\n           *\n           * @function\n           * @name KeyGenerator#createRelinKeys\n           * @returns {RelinKeys} New RelinKeys from the KeyGenerator's internal secret key\n           */\n          createRelinKeys(): RelinKeys {\n            try {\n              const keys = RelinKeys()\n              _instance.createRelinKeys(keys.instance)\n              return keys\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Generates and returns relinearization keys as a serializable object.\n           *\n           * Half of the key data is pseudo-randomly generated from a seed to reduce\n           * the object size. The resulting serializable object cannot be used\n           * directly and is meant to be serialized for the size reduction to have an\n           * impact.\n           *\n           *\n           * @function\n           * @name KeyGenerator#createRelinKeysSerializable\n           * @returns {Serializable<RelinKeys>} New, serializable RelinKeys from the KeyGenerator's internal secret key\n           */\n          createRelinKeysSerializable(): Serializable {\n            try {\n              const serialized = Serializable()\n              const instance = _instance.createRelinKeysSerializable()\n              serialized.unsafeInject(instance)\n              return serialized\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Generates and returns Galois keys. This function returns Galois keys in\n           * a fully expanded form and is meant to be used primarily for demo, testing,\n           * and debugging purposes. The user can optionally give an input a vector of desired\n           * Galois rotation step counts, where negative step counts correspond to\n           * rotations to the right and positive step counts correspond to rotations to\n           * the left. A step count of zero can be used to indicate a column rotation\n           * in the BFV scheme complex conjugation in the CKKS scheme.\n           *\n           * @function\n           * @name KeyGenerator#createGaloisKeys\n           * @param {Int32Array} [steps=Int32Array.from([])] Specific Galois Elements to generate\n           * @returns {GaloisKeys} New GaloisKeys from the KeyGenerator's internal secret key\n           */\n          createGaloisKeys(steps: Int32Array = Int32Array.from([])): GaloisKeys {\n            try {\n              const keys = GaloisKeys()\n              _instance.createGaloisKeys(steps, keys.instance)\n              return keys\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Generates and returns Galois keys as a serializable object. This function\n           * creates specific Galois keys that can be used to apply specific Galois\n           * automorphisms on encrypted data. The user can optionally give an input a vector\n           * of desired Galois rotation step counts, where negative step counts\n           * correspond to rotations to the right and positive step counts correspond\n           * to rotations to the left. A step count of zero can be used to indicate\n           * a column rotation in the BFV scheme complex conjugation in the CKKS scheme.\n           * Half of the key data is pseudo-randomly generated from a seed to reduce\n           * the object size. The resulting serializable object cannot be used\n           * directly and is meant to be serialized for the size reduction to have an\n           * impact.\n           *\n           * @function\n           * @name KeyGenerator#createGaloisKeysSerializable\n           * @param {Int32Array} [steps=Int32Array.from([])] Specific Galois Elements to generate\n           * @returns {Serializable<GaloisKeys>} Base64 encoded string\n           */\n          createGaloisKeysSerializable(\n            steps: Int32Array = Int32Array.from([])\n          ): Serializable {\n            try {\n              const serialized = Serializable()\n              const instance = _instance.createGaloisKeysSerializable(steps)\n              serialized.unsafeInject(instance)\n              return serialized\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          }\n        }\n      }\n\nexport const KeyGeneratorInit = ({\n  loader\n}: LoaderOptions): KeyGeneratorDependencies => {\n  const library: Library = loader.library\n  return KeyGeneratorConstructor(library)\n}\n","import { LoaderOptions, Library } from './seal'\n\nexport type MemoryPoolHandleDependencies = {\n  (): MemoryPoolHandleConstructorOptions\n}\n\nexport type MemoryPoolHandleConstructorOptions = {\n  (): MemoryPoolHandle\n}\n\nexport type MemoryPoolHandle = {\n  readonly global: any\n  readonly threadLocal: any\n}\n\nconst MemoryPoolHandleConstructor =\n  (library: Library): MemoryPoolHandleDependencies =>\n    (): MemoryPoolHandleConstructorOptions =>\n      (): MemoryPoolHandle => {\n        // Static methods\n        const _global = library.MemoryPoolHandle.MemoryPoolHandleGlobal\n        const _threadLocal = library.MemoryPoolHandle.MemoryPoolHandleThreadLocal\n\n        /**\n         * @implements MemoryPoolHandle\n         */\n\n        /**\n         * @interface MemoryPoolHandle\n         */\n        return {\n          /**\n           * The MemoryPoolHandle pointing to the global memory pool.\n           *\n           * @readonly\n           * @name MemoryPoolHandle.global\n           * @type {MemoryPoolHandle.global}\n           */\n          get global() {\n            /**\n             * @typedef {MemoryPoolHandle.global} MemoryPoolHandle.global\n             */\n            return _global()\n          },\n\n          /**\n           * The MemoryPoolHandle pointing to the thread-local memory pool.\n           *\n           * @readonly\n           * @name MemoryPoolHandle.threadLocal\n           * @type {MemoryPoolHandle.threadLocal}\n           */\n          get threadLocal() {\n            /**\n             * @typedef {MemoryPoolHandle.threadLocal} MemoryPoolHandle.threadLocal\n             */\n            return _threadLocal()\n          }\n        }\n      }\n\nexport const MemoryPoolHandleInit = ({\n  loader\n}: LoaderOptions): MemoryPoolHandleDependencies => {\n  const library: Library = loader.library\n  return MemoryPoolHandleConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { ComprModeType } from './compr-mode-type'\n\nexport type ModulusDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type ModulusDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: ModulusDependencyOptions): ModulusConstructorOptions\n}\n\nexport type ModulusConstructorOptions = {\n  (value: BigInt): Modulus\n}\n\nexport type Modulus = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly setValue: (value: BigInt) => void\n  readonly value: BigInt\n  readonly bitCount: number\n  readonly isZero: boolean\n  readonly isPrime: boolean\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (encoded: string) => void\n  readonly loadArray: (array: Uint8Array) => void\n}\n\nconst ModulusConstructor =\n  (library: Library): ModulusDependencies =>\n    ({\n      Exception,\n      ComprModeType,\n      Vector\n    }: ModulusDependencyOptions): ModulusConstructorOptions =>\n      (value: BigInt): Modulus => {\n        // Static methods\n        const Constructor = library.Modulus\n\n        let _instance = createModulus(value)\n\n        function createModulus(value: BigInt) {\n          try {\n            const inst = new Constructor()\n            inst.setValue(value.toString())\n            return inst\n          } catch (e) {\n            throw Exception.safe(e as SealError)\n          }\n        }\n\n        /**\n         * @implements Modulus\n         */\n\n        /**\n         * @interface Modulus\n         */\n        return {\n          /**\n           * Get the underlying WASM instance\n           *\n           * @private\n           * @readonly\n           * @name Modulus#instance\n           * @type {Instance}\n           */\n          get instance() {\n            return _instance\n          },\n\n          /**\n           * Inject this object with a raw WASM instance\n           *\n           * @private\n           * @function\n           * @name Modulus#inject\n           * @param {Instance} instance WASM instance\n           */\n          inject(instance: Instance) {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n            _instance = new Constructor(instance)\n            instance.delete()\n          },\n\n          /**\n           * Delete the underlying WASM instance.\n           *\n           * Should be called before dereferencing this object to prevent the\n           * WASM heap from growing indefinitely.\n           * @function\n           * @name Modulus#delete\n           */\n          delete() {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n          },\n\n          /**\n           * Loads a Modulus from a string representing an uint64 value.\n           *\n           * @function\n           * @name Modulus#setValue\n           * @param {BigInt} value BigInt value to set\n           */\n          setValue(value: BigInt) {\n            try {\n              _instance.setValue(value.toString())\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * The value of the current Modulus as a BigInt.\n           *\n           * @readonly\n           * @name Modulus#value\n           * @type {BigInt}\n           */\n          get value() {\n            // eslint-disable-next-line no-undef\n            return BigInt(_instance.value())\n          },\n\n          /**\n           * The significant bit count of the value of the current Modulus.\n           *\n           * @readonly\n           * @name Modulus#bitCount\n           * @type {number}\n           */\n          get bitCount() {\n            return _instance.bitCount()\n          },\n\n          /**\n           * Whether the value of the current Modulus is zero.\n           *\n           * @readonly\n           * @name Modulus#isZero\n           * @type {boolean}\n           */\n          get isZero() {\n            return _instance.isZero()\n          },\n\n          /**\n           * Whether the value of the current Modulus is a prime number.\n           *\n           * @readonly\n           * @name Modulus#isPrime\n           * @type {boolean}\n           */\n          get isPrime() {\n            return _instance.isPrime()\n          },\n\n          /**\n           * Save the Modulus as a base64 string\n           *\n           * @function\n           * @name Modulus#save\n           * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n           * @returns {string} Base64 encoded string\n           */\n          save(compression: ComprModeType = ComprModeType.zstd): string {\n            return _instance.saveToString(compression)\n          },\n\n          /**\n           * Save the Modulus as a binary Uint8Array\n           *\n           * @function\n           * @name Modulus#saveArray\n           * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n           * @returns {Uint8Array} A byte array containing the Modulus in binary form\n           */\n          saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n            const tempVect = Vector()\n            const instance = _instance.saveToArray(compression)\n            tempVect.unsafeInject(instance)\n            tempVect.setType('Uint8Array')\n            const tempArr = tempVect.toArray() as Uint8Array\n            tempVect.delete()\n            return tempArr\n          },\n\n          /**\n           * Load a Modulus from a base64 string\n           *\n           * @function\n           * @name Modulus#load\n           * @param {string} encoded Base64 encoded string\n           */\n          load(encoded: string) {\n            try {\n              _instance.loadFromString(encoded)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Load a Modulus from an Uint8Array holding binary data\n           *\n           * @function\n           * @name Modulus#loadArray\n           * @param {Uint8Array} array TypedArray containing binary data\n           */\n          loadArray(array: Uint8Array) {\n            try {\n              _instance.loadFromArray(array)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          }\n        }\n      }\n\nexport const ModulusInit = ({ loader }: LoaderOptions): ModulusDependencies => {\n  const library: Library = loader.library\n  return ModulusConstructor(library)\n}\n","import { LoaderOptions, Instance, Library } from './seal'\nimport { Exception, SealError } from './exception'\n\nexport type ParmsIdTypeDependencyOptions = {\n  readonly Exception: Exception\n}\n\nexport type ParmsIdTypeDependencies = {\n  ({ Exception }: ParmsIdTypeDependencyOptions): ParmsIdTypeConstructorOptions\n}\n\nexport type ParmsIdTypeConstructorOptions = {\n  (): ParmsIdType\n}\n\nexport type ParmsIdType = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly values: BigUint64Array\n}\n\nconst ParmsIdTypeConstructor =\n  (library: Library): ParmsIdTypeDependencies =>\n    ({\n      Exception\n    }: ParmsIdTypeDependencyOptions): ParmsIdTypeConstructorOptions =>\n      (): ParmsIdType => {\n        const Constructor = library.ParmsIdType\n\n        let _instance: Instance\n\n        /**\n         * @implements ParmsIdType\n         */\n\n        /**\n         * @interface ParmsIdType\n         */\n        return {\n          /**\n           * Get the underlying WASM instance\n           *\n           * @private\n           * @readonly\n           * @name ParmsIdType#instance\n           * @type {Instance}\n           */\n          get instance() {\n            return _instance\n          },\n\n          /**\n           * Inject this object with a raw WASM instance\n           *\n           * @private\n           * @function\n           * @name ParmsIdType#inject\n           * @param {Instance} instance WASM instance\n           */\n          inject(instance: Instance) {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n            _instance = new Constructor(instance)\n            instance.delete()\n          },\n\n          /**\n           * Delete the underlying WASM instance.\n           *\n           * Should be called before dereferencing this object to prevent the\n           * WASM heap from growing indefinitely.\n           * @function\n           * @name ParmsIdType#delete\n           */\n          delete() {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n          },\n\n          /**\n           * The values of the current ParmsIdType as an Array of BigInts.\n           *\n           * @readonly\n           * @name ParmsIdType#values\n           * @type {BigUint64Array}\n           */\n          get values() {\n            try {\n              const instance = _instance.values()\n              return BigUint64Array.from(instance)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          }\n        }\n      }\n\nexport const ParmsIdTypeInit = ({\n  loader\n}: LoaderOptions): ParmsIdTypeDependencies => {\n  const library: Library = loader.library\n  return ParmsIdTypeConstructor(library)\n}\n","import { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\nimport { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\nimport { VectorConstructorOptions } from './vector'\nimport { INVALID_PLAIN_CONSRUCTOR_OPTIONS } from './constants'\nexport type PlainTextDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type PlainTextDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    ParmsIdType,\n    MemoryPoolHandle,\n    Vector\n  }: PlainTextDependencyOptions): PlainTextConstructorOptions\n}\n\nexport type PlainTextConstructorOptions = {\n  ({\n    capacity,\n    coeffCount,\n    pool\n  }?: {\n    capacity?: number\n    coeffCount?: number\n    pool?: MemoryPoolHandle\n  }): PlainText\n}\n\nexport type PlainText = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly reserve: (capacity: number) => void\n  readonly shrinkToFit: () => void\n  readonly release: () => void\n  readonly resize: (coeffCount: number) => void\n  readonly setZero: () => void\n  readonly isZero: boolean\n  readonly capacity: number\n  readonly coeffCount: number\n  readonly significantCoeffCount: number\n  readonly nonzeroCoeffCount: number\n  readonly toPolynomial: () => string\n  readonly isNttForm: boolean\n  readonly parmsId: ParmsIdType\n  readonly scale: number\n  readonly setScale: (scale: number) => void\n  readonly pool: MemoryPoolHandle\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (plain: PlainText) => void\n  readonly clone: () => PlainText\n  readonly move: (plain: PlainText) => void\n}\n\nconst PlainTextConstructor =\n  (library: Library): PlainTextDependencies =>\n    ({\n      Exception,\n      ComprModeType,\n      ParmsIdType,\n      MemoryPoolHandle,\n      Vector\n    }: PlainTextDependencyOptions): PlainTextConstructorOptions =>\n      ({\n        capacity,\n        coeffCount,\n        pool = MemoryPoolHandle.global\n      } = {}): PlainText => {\n        // Static methods\n        const Constructor = library.Plaintext\n\n        let _instance = construct({\n          capacity,\n          coeffCount,\n          pool\n        })\n\n        function construct({\n          capacity,\n          coeffCount,\n          pool = MemoryPoolHandle.global\n        }: {\n          capacity?: number\n          coeffCount?: number\n          pool?: MemoryPoolHandle\n        }) {\n          try {\n            if (capacity === undefined && coeffCount === undefined) {\n              return new Constructor(pool)\n            } else if (capacity === undefined && coeffCount !== undefined) {\n              return new Constructor(coeffCount, pool)\n            } else if (capacity !== undefined && coeffCount !== undefined) {\n              return new Constructor(capacity, coeffCount, pool)\n            } else {\n              throw new Error(INVALID_PLAIN_CONSRUCTOR_OPTIONS)\n            }\n          } catch (e) {\n            throw Exception.safe(e as SealError)\n          }\n        }\n        /**\n         * @implements PlainText\n         */\n\n        /**\n         * @interface PlainText\n         */\n        return {\n          /**\n           * Get the underlying WASM instance\n           *\n           * @private\n           * @readonly\n           * @name PlainText#instance\n           * @type {Instance}\n           */\n          get instance() {\n            return _instance\n          },\n\n          /**\n           * Inject this object with a raw WASM instance. No type checking is performed.\n           *\n           * @private\n           * @function\n           * @name PlainText#unsafeInject\n           * @param {Instance} instance WASM instance\n           */\n          unsafeInject(instance: Instance) {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n            _instance = instance\n          },\n\n          /**\n           * Delete the underlying WASM instance.\n           *\n           * Should be called before dereferencing this object to prevent the\n           * WASM heap from growing indefinitely.\n           * @function\n           * @name PlainText#delete\n           */\n          delete() {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n          },\n\n          /**\n           * Allocates enough memory to accommodate the backing array of a plaintext\n           * with given capacity.\n           *\n           * @function\n           * @name PlainText#reserve\n           * @param {number} capacity The capacity to reserve\n           */\n          reserve(capacity: number) {\n            try {\n              return _instance.reserve(capacity)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Allocates enough memory to accommodate the backing array of the current\n           * PlainText and copies it over to the new location. This function is meant\n           * to reduce the memory use of the PlainText to smallest possible and can be\n           * particularly important after modulus switching.\n           *\n           * @function\n           * @name PlainText#shrinkToFit\n           */\n          shrinkToFit() {\n            _instance.shrinkToFit()\n          },\n\n          /**\n           * Resets the PlainText. This function releases any memory allocated by the\n           * PlainText, returning it to the memory pool.\n           *\n           * @function\n           * @name PlainText#release\n           */\n          release() {\n            _instance.release()\n          },\n\n          /**\n           * Resizes the PlainText to have a given coefficient count. The PlainText\n           * is automatically reallocated if the new coefficient count does not fit in\n           * the current capacity.\n           *\n           * @function\n           * @name PlainText#resize\n           * @param {number} coeffCount The number of coefficients in the plaintext polynomial\n           */\n          resize(coeffCount: number) {\n            try {\n              _instance.resize(coeffCount)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Sets the PlainText polynomial to zero.\n           *\n           * @function\n           * @name PlainText#setZero\n           */\n          setZero() {\n            _instance.setZero()\n          },\n\n          /**\n           * Whether the current PlainText polynomial has all zero coefficients.\n           *\n           * @readonly\n           * @name PlainText#isZero\n           * @type {boolean}\n           */\n          get isZero() {\n            return _instance.isZero()\n          },\n\n          /**\n           * The capacity of the current allocation.\n           *\n           * @readonly\n           * @name PlainText#capacity\n           * @type {number}\n           */\n          get capacity() {\n            return _instance.capacity()\n          },\n\n          /**\n           * The coefficient count of the current PlainText polynomial.\n           *\n           * @readonly\n           * @name PlainText#coeffCount\n           * @type {number}\n           */\n          get coeffCount() {\n            return _instance.coeffCount()\n          },\n\n          /**\n           * The significant coefficient count of the current PlainText polynomial.\n           *\n           * @readonly\n           * @name PlainText#significantCoeffCount\n           * @type {number}\n           */\n          get significantCoeffCount() {\n            return _instance.significantCoeffCount()\n          },\n\n          /**\n           * Returns the non-zero coefficient count of the current PlainText polynomial.\n           *\n           * @readonly\n           * @name PlainText#nonzeroCoeffCount\n           * @type {number}\n           */\n          get nonzeroCoeffCount() {\n            return _instance.nonzeroCoeffCount()\n          },\n\n          /**\n           * Returns a human-readable string description of the PlainText polynomial.\n           *\n           * The returned string is of the form \"7FFx^3 + 1x^1 + 3\" with a format\n           * summarized by the following:\n           * 1. Terms are listed in order of strictly decreasing exponent\n           * 2. Coefficient values are non-negative and in hexadecimal format (hexadecimal\n           * letters are in upper-case)\n           * 3. Exponents are positive and in decimal format\n           * 4. Zero coefficient terms (including the constant term) are omitted unless\n           * the polynomial is exactly 0 (see rule 9)\n           * 5. Term with the exponent value of one is written as x^1\n           * 6. Term with the exponent value of zero (the constant term) is written as\n           * just a hexadecimal number without x or exponent\n           * 7. Terms are separated exactly by <space>+<space>\n           * 8. Other than the +, no other terms have whitespace\n           * 9. If the polynomial is exactly 0, the string \"0\" is returned\n           *\n           * @function\n           * @name PlainText#toPolynomial\n           * @throws std::invalid_argument if the PlainText is in NTT transformed form\n           * @returns {string} Polynomial string\n           */\n          toPolynomial(): string {\n            try {\n              return _instance.toPolynomial()\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Whether the PlainText is in NTT form.\n           *\n           * @readonly\n           * @name PlainText#isNttForm\n           * @type {boolean}\n           */\n          get isNttForm() {\n            return _instance.isNttForm()\n          },\n\n          /**\n           * The reference to parmsId of the PlainText. The parmsId must remain zero unless the\n           * PlainText polynomial is in NTT form.\n           *\n           * @see {@link EncryptionParameters} for more information about parmsId.\n           *\n           * @readonly\n           * @name PlainText#parmsId\n           * @type {ParmsIdType}\n           */\n          get parmsId() {\n            const parms = ParmsIdType()\n            parms.inject(_instance.parmsId())\n            return parms\n          },\n\n          /**\n           * The reference to the scale. This is only needed when using the CKKS\n           * encryption scheme. The user should have little or no reason to ever change\n           * the scale by hand.\n           *\n           * @readonly\n           * @name PlainText#scale\n           * @type {number}\n           */\n          get scale() {\n            return _instance.scale()\n          },\n\n          /**\n           * Sets the PlainText scale. This is only needed when using the\n           * CKKS encryption scheme. The user should have little or no reason to ever\n           * change the scale by hand.\n           *\n           * @function\n           * @name PlainText#setScale\n           * @param {number} scale The scale to set\n           */\n          setScale(scale: number) {\n            _instance.setScale(scale)\n          },\n\n          /**\n           * The currently used MemoryPoolHandle.\n           *\n           * @readonly\n           * @name PlainText#pool\n           * @type {MemoryPoolHandle}\n           */\n          get pool() {\n            return _instance.pool()\n          },\n\n          /**\n           * Save the PlainText to a base64 string\n           *\n           * @function\n           * @name PlainText#save\n           * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n           * @returns {string} Base64 encoded string\n           */\n          save(compression: ComprModeType = ComprModeType.zstd): string {\n            return _instance.saveToString(compression)\n          },\n\n          /**\n           * Save the PlainText as a binary Uint8Array\n           *\n           * @function\n           * @name PlainText#saveArray\n           * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n           * @returns {Uint8Array} A byte array containing the PlainText in binary form\n           */\n          saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n            const tempVect = Vector()\n            const instance = _instance.saveToArray(compression)\n            tempVect.unsafeInject(instance)\n            tempVect.setType('Uint8Array')\n            const tempArr = tempVect.toArray() as Uint8Array\n            tempVect.delete()\n            return tempArr\n          },\n\n          /**\n           * Load a PlainText from a base64 string\n           *\n           * @function\n           * @name PlainText#load\n           * @param {Context} context Encryption context to enforce\n           * @param {string} encoded Base64 encoded string\n           */\n          load(context: Context, encoded: string) {\n            try {\n              _instance.loadFromString(context.instance, encoded)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Load a PlainText from an Uint8Array holding binary data\n           *\n           * @function\n           * @name PlainText#loadArray\n           * @param {Context} context Encryption context to enforce\n           * @param {Uint8Array} array TypedArray containing binary data\n           */\n          loadArray(context: Context, array: Uint8Array) {\n            try {\n              _instance.loadFromArray(context.instance, array)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Copy an existing PlainText and overwrite this instance\n           *\n           * @function\n           * @name PlainText#copy\n           * @param {PlainText} plain PlainText to copy\n           * @example\n           * const plainTextA = seal.PlainText()\n           * // ... after encoding some data ...\n           * const plainTextB = seal.PlainText()\n           * plainTextB.copy(plainTextA)\n           * // plainTextB holds a copy of plainTextA\n           */\n          copy(plain: PlainText) {\n            try {\n              _instance.copy(plain.instance)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Clone and return a new instance of this PlainText\n           *\n           * @function\n           * @name PlainText#clone\n           * @returns {PlainText}\n           * @example\n           * const plainTextA = seal.PlainText()\n           * // ... after encoding some data ...\n           * const plainTextB = plainTextA.clone()\n           * // plainTextB holds a copy of plainTextA\n           */\n          clone(): PlainText {\n            try {\n              const clonedInstance = _instance.clone()\n              const plain = PlainTextConstructor(library)({\n                Exception,\n                ComprModeType,\n                ParmsIdType,\n                MemoryPoolHandle,\n                Vector\n              })()\n              plain.unsafeInject(clonedInstance)\n              return plain\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Move a PlainText into this one and delete the old reference\n           *\n           * @function\n           * @name PlainText#move\n           * @param {PlainText} plain PlainText to move\n           * @example\n           * const plainTextA = seal.PlainText()\n           * // ... after encoding some data ...\n           * const plainTextB = seal.PlainText()\n           * plainTextB.move(plainTextA)\n           * // plainTextB holds a the instance of plainTextA.\n           * // plainTextA no longer holds an instance\n           */\n          move(plain: PlainText) {\n            try {\n              _instance.move(plain.instance)\n              // TODO: find optimization\n              // This method results in a copy instead of a real move.\n              // Therefore, we need to delete the old instance.\n              plain.delete()\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          }\n        }\n      }\n\nexport const PlainTextInit = ({\n  loader\n}: LoaderOptions): PlainTextDependencies => {\n  const library: Library = loader.library\n  return PlainTextConstructor(library)\n}\n","import { LoaderOptions, Library } from './seal'\nimport { Exception, SealError } from './exception'\nimport { Modulus, ModulusConstructorOptions } from './modulus'\nimport { Vector, VectorConstructorOptions } from './vector'\n\nexport type PlainModulusDependencyOptions = {\n  readonly Exception: Exception\n  readonly Modulus: ModulusConstructorOptions\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type PlainModulusDependencies = {\n  ({\n    Exception,\n    Modulus,\n    Vector\n  }: PlainModulusDependencyOptions): PlainModulusConstructorOptions\n}\n\nexport type PlainModulusConstructorOptions = {\n  (): PlainModulus\n}\n\nexport type PlainModulus = {\n  readonly Batching: (polyModulusDegree: number, bitSize: number) => Modulus\n  readonly BatchingVector: (\n    polyModulusDegree: number,\n    bitSizes: Int32Array\n  ) => Vector\n}\n\nconst PlainModulusConstructor =\n  (library: Library): PlainModulusDependencies =>\n    ({\n      Exception,\n      Modulus,\n      Vector\n    }: PlainModulusDependencyOptions): PlainModulusConstructorOptions =>\n      (): PlainModulus => {\n        // Static methods\n        const _Batching = library.PlainModulus.Batching\n        const _BatchingVector = library.PlainModulus.BatchingVector\n\n        /**\n         * @implements PlainModulus\n         */\n\n        /**\n         * @interface PlainModulus\n         */\n        return {\n          /**\n           * Creates a prime number PlainModulus for use as plainPlainModulus encryption\n           * parameter that supports batching with a given polyPlainModulusDegree.\n           *\n           * @function\n           * @name PlainModulus.Batching\n           * @param {number} polyModulusDegree The degree of the polynomial modulus\n           * @param {number} bitSize The bit-size of the desired prime number\n           * @returns {Modulus} A PlainModulus containing the prime number\n           */\n          Batching(polyModulusDegree: number, bitSize: number): Modulus {\n            try {\n              const smallMod = Modulus(BigInt(0))\n              smallMod.inject(_Batching(polyModulusDegree, bitSize))\n              return smallMod\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Creates several prime number PlainModulus elements that can be used as\n           * plainPlainModulus encryption parameters, each supporting batching with a given\n           * polyPlainModulusDegree.\n           *\n           * @function\n           * @name PlainModulus.BatchingVector\n           * @param {Number} polyPlainModulusDegree The degree of the polynomial modulus\n           * @param {Int32Array} bitSizes Int32Array containing values representing bit-sizes of primes\n           * @returns {Vector} Vector of Modulus containing prime numbers\n           */\n          BatchingVector(\n            polyPlainModulusDegree: number,\n            bitSizes: Int32Array\n          ): Vector {\n            try {\n              const vectBitSizes = Vector()\n              vectBitSizes.from(bitSizes)\n              const vect = _BatchingVector(\n                polyPlainModulusDegree,\n                vectBitSizes.instance\n              )\n              vectBitSizes.delete()\n              return vect\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          }\n        }\n      }\n\nexport const PlainModulusInit = ({\n  loader\n}: LoaderOptions): PlainModulusDependencies => {\n  const library: Library = loader.library\n  return PlainModulusConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\n\nexport type PublicKeyDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type PublicKeyDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: PublicKeyDependencyOptions): PublicKeyConstructorOptions\n}\n\nexport type PublicKeyConstructorOptions = {\n  (): PublicKey\n}\n\nexport type PublicKey = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (key: PublicKey) => void\n  readonly clone: () => PublicKey\n  readonly move: (key: PublicKey) => void\n}\n\nconst PublicKeyConstructor =\n  (library: Library): PublicKeyDependencies =>\n    ({\n      Exception,\n      ComprModeType,\n      Vector\n    }: PublicKeyDependencyOptions): PublicKeyConstructorOptions =>\n      (): PublicKey => {\n        const Constructor = library.PublicKey\n        let _instance = new Constructor()\n\n        /**\n         * @implements PublicKey\n         */\n\n        /**\n         * @interface PublicKey\n         */\n        return {\n          /**\n           * Get the underlying WASM instance\n           *\n           * @private\n           * @readonly\n           * @name PublicKey#instance\n           * @type {Instance}\n           */\n          get instance() {\n            return _instance\n          },\n\n          /**\n           * Inject this object with a raw WASM instance\n           *\n           * @private\n           * @function\n           * @name PublicKey#inject\n           * @param {Instance} instance WASM instance\n           */\n          inject(instance: Instance) {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n            _instance = new Constructor(instance)\n            instance.delete()\n          },\n\n          /**\n           * Delete the underlying WASM instance.\n           *\n           * Should be called before dereferencing this object to prevent the\n           * WASM heap from growing indefinitely.\n           * @function\n           * @name PublicKey#delete\n           */\n          delete() {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n          },\n\n          /**\n           * Save the Encryption Parameters to a base64 string\n           *\n           * @function\n           * @name PublicKey#save\n           * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n           * @returns {string} Base64 encoded string\n           */\n          save(compression: ComprModeType = ComprModeType.zstd): string {\n            try {\n              return _instance.saveToString(compression)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Save the PublicKey as a binary Uint8Array\n           *\n           * @function\n           * @name PublicKey#saveArray\n           * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n           * @returns {Uint8Array} A byte array containing the PublicKey in binary form\n           */\n          saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n            const tempVect = Vector()\n            const instance = _instance.saveToArray(compression)\n            tempVect.unsafeInject(instance)\n            tempVect.setType('Uint8Array')\n            const tempArr = tempVect.toArray() as Uint8Array\n            tempVect.delete()\n            return tempArr\n          },\n\n          /**\n           * Load a PublicKey from a base64 string\n           *\n           * @function\n           * @name PublicKey#load\n           * @param {Context} context Encryption context to enforce\n           * @param {string} encoded Base64 encoded string\n           */\n          load(context: Context, encoded: string) {\n            try {\n              _instance.loadFromString(context.instance, encoded)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Load a PublicKey from an Uint8Array holding binary data\n           *\n           * @function\n           * @name PublicKey#loadArray\n           * @param {Context} context Encryption context to enforce\n           * @param {Uint8Array} array TypedArray containing binary data\n           */\n          loadArray(context: Context, array: Uint8Array) {\n            try {\n              _instance.loadFromArray(context.instance, array)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Copy an existing PublicKey and overwrite this instance\n           *\n           * @function\n           * @name PublicKey#copy\n           * @param {PublicKey} key PublicKey to copy\n           * @example\n           * const keyA = keyGenerator.createPublicKey()\n           * const keyB = seal.PublicKey()\n           * keyB.copy(keyA)\n           * // keyB holds a copy of keyA\n           */\n          copy(key: PublicKey) {\n            try {\n              _instance.copy(key.instance)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Clone and return a new instance of this PublicKey\n           *\n           * @function\n           * @name PublicKey#clone\n           * @returns {PublicKey}\n           * @example\n           * const keyA = keyGenerator.createPublicKey()\n           * const keyB = keyA.clone()\n           * // keyB holds a copy of keyA\n           */\n          clone(): PublicKey {\n            try {\n              const clonedInstance = _instance.clone()\n              const key = PublicKeyConstructor(library)({\n                Exception,\n                ComprModeType,\n                Vector\n              })()\n              key.inject(clonedInstance)\n              return key\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Move a PublicKey into this one and delete the old reference\n           *\n           * @function\n           * @name PublicKey#move\n           * @param {PublicKey} key PublicKey to move\n           * @example\n           * const keyA = keyGenerator.createPublicKey()\n           * const keyB = seal.PublicKey()\n           * keyB.move(keyA)\n           * // keyB holds a the instance of keyA.\n           * // keyA no longer holds an instance\n           */\n          move(key: PublicKey) {\n            try {\n              _instance.move(key.instance)\n              // TODO: find optimization\n              // This method results in a copy instead of a real move.\n              // Therefore, we need to delete the old instance.\n              key.delete()\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          }\n        }\n      }\n\nexport const PublicKeyInit = ({\n  loader\n}: LoaderOptions): PublicKeyDependencies => {\n  const library: Library = loader.library\n  return PublicKeyConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\n\nexport type RelinKeysDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type RelinKeysDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: RelinKeysDependencyOptions): RelinKeysConstructorOptions\n}\n\nexport type RelinKeysConstructorOptions = {\n  (): RelinKeys\n}\n\nexport type RelinKeys = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly size: number\n  readonly getIndex: (keyPower: number) => number\n  readonly hasKey: (keyPower: number) => boolean\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (key: RelinKeys) => void\n  readonly clone: () => RelinKeys\n  readonly move: (key: RelinKeys) => void\n}\n\nconst RelinKeysConstructor =\n  (library: Library): RelinKeysDependencies =>\n    ({\n      Exception,\n      ComprModeType,\n      Vector\n    }: RelinKeysDependencyOptions): RelinKeysConstructorOptions =>\n      (): RelinKeys => {\n        const Constructor = library.RelinKeys\n        let _instance = new Constructor()\n\n        /**\n         * @implements RelinKeys\n         */\n\n        /**\n         * @interface RelinKeys\n         */\n        return {\n          /**\n           * Get the underlying WASM instance\n           *\n           * @private\n           * @readonly\n           * @name RelinKeys#instance\n           * @type {Instance}\n           */\n          get instance() {\n            return _instance\n          },\n\n          /**\n           * Inject this object with a raw WASM instance\n           *\n           * @private\n           * @function\n           * @name RelinKeys#inject\n           * @param {Instance} instance WASM instance\n           */\n          inject(instance: Instance) {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n            _instance = new Constructor(instance)\n            instance.delete()\n          },\n\n          /**\n           * Delete the underlying WASM instance.\n           *\n           * Should be called before dereferencing this object to prevent the\n           * WASM heap from growing indefinitely.\n           * @function\n           * @name RelinKeys#delete\n           */\n          delete() {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n          },\n\n          /**\n           * Returns the current number of keyswitching keys. Only keys that are\n           * non-empty are counted.\n           *\n           * @readonly\n           * @name RelinKeys#size\n           * @type {number}\n           */\n          get size() {\n            return _instance.size()\n          },\n\n          /**\n           * Returns the index of a relinearization key in the backing KSwitchKeys\n           * instance that corresponds to the given secret key power, assuming that\n           * it exists in the backing KSwitchKeys.\n           *\n           * @function\n           * @name RelinKeys#getIndex\n           * @param {number} keyPower The power of the secret key\n           * @returns {number} The index of the relin key\n           */\n          getIndex(keyPower: number): number {\n            try {\n              return _instance.getIndex(keyPower)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Returns whether a relinearization key corresponding to a given power of\n           * the secret key exists.\n           *\n           * @function\n           * @name RelinKeys#hasKey\n           * @param {number} keyPower The power of the secret key\n           * @returns {boolean} True if the power exists\n           */\n          hasKey(keyPower: number): boolean {\n            try {\n              return _instance.hasKey(keyPower)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Save the Encryption Parameters to a base64 string\n           *\n           * @function\n           * @name RelinKeys#save\n           * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n           * @returns {string} Base64 encoded string\n           */\n          save(compression: ComprModeType = ComprModeType.zstd): string {\n            try {\n              return _instance.saveToString(compression)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Save the RelinKeys as a binary Uint8Array\n           *\n           * @function\n           * @name RelinKeys#saveArray\n           * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n           * @returns {Uint8Array} A byte array containing the RelinKeys in binary form\n           */\n          saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n            const tempVect = Vector()\n            const instance = _instance.saveToArray(compression)\n            tempVect.unsafeInject(instance)\n            tempVect.setType('Uint8Array')\n            const tempArr = tempVect.toArray() as Uint8Array\n            tempVect.delete()\n            return tempArr\n          },\n\n          /**\n           * Load a RelinKeys from a base64 string\n           *\n           * @function\n           * @name RelinKeys#load\n           * @param {Context} context Encryption context to enforce\n           * @param {string} encoded Base64 encoded string\n           */\n          load(context: Context, encoded: string) {\n            try {\n              _instance.loadFromString(context.instance, encoded)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Load a RelinKeys from an Uint8Array holding binary data\n           *\n           * @function\n           * @name RelinKeys#loadArray\n           * @param {Context} context Encryption context to enforce\n           * @param {Uint8Array} array TypedArray containing binary data\n           */\n          loadArray(context: Context, array: Uint8Array) {\n            try {\n              _instance.loadFromArray(context.instance, array)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Copy an existing RelinKeys and overwrite this instance\n           *\n           * @function\n           * @name RelinKeys#copy\n           * @param {RelinKeys} key RelinKeys to copy\n           * @example\n           * const keyA = keyGenerator.createRelinKeys()\n           * const keyB = seal.RelinKeys()\n           * keyB.copy(keyA)\n           * // keyB holds a copy of keyA\n           */\n          copy(key: RelinKeys) {\n            try {\n              _instance.copy(key.instance)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Clone and return a new instance of this RelinKeys\n           *\n           * @function\n           * @name RelinKeys#clone\n           * @returns {RelinKeys}\n           * @example\n           * const keyA = keyGenerator.createRelinKeys()\n           * const keyB = keyA.clone()\n           * // keyB holds a copy of keyA\n           */\n          clone(): RelinKeys {\n            try {\n              const clonedInstance = _instance.clone()\n              const key = RelinKeysConstructor(library)({\n                Exception,\n                ComprModeType,\n                Vector\n              })()\n              key.inject(clonedInstance)\n              return key\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Move a RelinKeys into this one and delete the old reference\n           *\n           * @function\n           * @name RelinKeys#move\n           * @param {RelinKeys} key RelinKeys to move\n           * @example\n           * const keyA = keyGenerator.createRelinKeys()\n           * const keyB = seal.RelinKeys()\n           * keyB.move(keyA)\n           * // keyB holds a the instance of keyA.\n           * // keyA no longer holds an instance\n           */\n          move(key: RelinKeys) {\n            try {\n              _instance.move(key.instance)\n              // TODO: find optimization\n              // This method results in a copy instead of a real move.\n              // Therefore, we need to delete the old instance.\n              key.delete()\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          }\n        }\n      }\n\nexport const RelinKeysInit = ({\n  loader\n}: LoaderOptions): RelinKeysDependencies => {\n  const library: Library = loader.library\n  return RelinKeysConstructor(library)\n}\n","import { LoaderOptions, Library } from './seal'\n\nexport type SchemeTypeDependencies = {\n  (): SchemeTypeConstructorOptions\n}\n\nexport type SchemeTypeConstructorOptions = {\n  (): SchemeType\n}\n\nexport type SchemeType = {\n  readonly none: any\n  readonly bfv: any\n  readonly ckks: any\n  readonly bgv: any\n}\n\nconst SchemeTypeConstructor =\n  (library: Library): SchemeTypeDependencies =>\n    (): SchemeTypeConstructorOptions =>\n      (): SchemeType => {\n        // Static methods\n        const _none = library.SchemeType.none\n        const _bfv = library.SchemeType.bfv\n        const _ckks = library.SchemeType.ckks\n        const _bgv = library.SchemeType.bgv\n\n        /**\n         * @implements SchemeType\n         */\n\n        /**\n         * @interface SchemeType\n         */\n        return {\n          /**\n           * Return the 'none' scheme type\n           *\n           * @readonly\n           * @name SchemeType.none\n           * @type {SchemeType.none}\n           */\n          get none() {\n            /**\n             * @typedef {SchemeType.none} SchemeType.none\n             */\n            return _none\n          },\n\n          /**\n           * Return the 'bfv' scheme type\n           *\n           * @readonly\n           * @name SchemeType.bfv\n           * @type {SchemeType.bfv}\n           */\n          get bfv() {\n            /**\n             * @typedef {SchemeType.bfv} SchemeType.bfv\n             */\n            return _bfv\n          },\n\n          /**\n           * Return the 'ckks' scheme type\n           *\n           * @readonly\n           * @name SchemeType.ckks\n           * @type {SchemeType.ckks}\n           */\n          get ckks() {\n            /**\n             * @typedef {SchemeType.ckks} SchemeType.ckks\n             */\n            return _ckks\n          },\n\n          /**\n           * Return the 'ckks' scheme type\n           *\n           * @readonly\n           * @name SchemeType.bgv\n           * @type {SchemeType.bgv}\n           */\n          get bgv() {\n            /**\n             * @typedef {SchemeType.bgv} SchemeType.bgv\n             */\n            return _bgv\n          }\n        }\n      }\n\nexport const SchemeTypeInit = ({\n  loader\n}: LoaderOptions): SchemeTypeDependencies => {\n  const library: Library = loader.library\n  return SchemeTypeConstructor(library)\n}\n","import { LoaderOptions, Library, Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\n\nexport type SecretKeyDependencyOptions = {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport type SecretKeyDependencies = {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: SecretKeyDependencyOptions): SecretKeyConstructorOptions\n}\n\nexport type SecretKeyConstructorOptions = {\n  (): SecretKey\n}\n\nexport type SecretKey = {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (key: SecretKey) => void\n  readonly clone: () => SecretKey\n  readonly move: (key: SecretKey) => void\n}\n\nconst SecretKeyConstructor =\n  (library: Library): SecretKeyDependencies =>\n    ({\n      Exception,\n      ComprModeType,\n      Vector\n    }: SecretKeyDependencyOptions): SecretKeyConstructorOptions =>\n      (): SecretKey => {\n        const Constructor = library.SecretKey\n        let _instance = new Constructor()\n\n        /**\n         * @implements SecretKey\n         */\n\n        /**\n         * @interface SecretKey\n         */\n        return {\n          /**\n           * Get the underlying WASM instance\n           *\n           * @private\n           * @readonly\n           * @name SecretKey#instance\n           * @type {Instance}\n           */\n          get instance() {\n            return _instance\n          },\n\n          /**\n           * Inject this object with a raw WASM instance\n           *\n           * @private\n           * @function\n           * @name SecretKey#inject\n           * @param {Instance} instance WASM instance\n           */\n          inject(instance: Instance) {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n            _instance = new Constructor(instance)\n            instance.delete()\n          },\n\n          /**\n           * Delete the underlying WASM instance.\n           *\n           * Should be called before dereferencing this object to prevent the\n           * WASM heap from growing indefinitely.\n           * @function\n           * @name SecretKey#delete\n           */\n          delete() {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n          },\n\n          /**\n           * Save the Encryption Parameters to a base64 string\n           *\n           * @function\n           * @name SecretKey#save\n           * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n           * @returns {string} Base64 encoded string\n           */\n          save(compression: ComprModeType = ComprModeType.zstd): string {\n            try {\n              return _instance.saveToString(compression)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Save the SecretKey as a binary Uint8Array\n           *\n           * @function\n           * @name SecretKey#saveArray\n           * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n           * @returns {Uint8Array} A byte array containing the SecretKey in binary form\n           */\n          saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n            const tempVect = Vector()\n            const instance = _instance.saveToArray(compression)\n            tempVect.unsafeInject(instance)\n            tempVect.setType('Uint8Array')\n            const tempArr = tempVect.toArray() as Uint8Array\n            tempVect.delete()\n            return tempArr\n          },\n\n          /**\n           * Load a SecretKey from a base64 string\n           *\n           * @function\n           * @name SecretKey#load\n           * @param {Context} context Encryption context to enforce\n           * @param {string} encoded Base64 encoded string\n           */\n          load(context: Context, encoded: string) {\n            try {\n              _instance.loadFromString(context.instance, encoded)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Load a SecretKey from an Uint8Array holding binary data\n           *\n           * @function\n           * @name SecretKey#loadArray\n           * @param {Context} context Encryption context to enforce\n           * @param {Uint8Array} array TypedArray containing binary data\n           */\n          loadArray(context: Context, array: Uint8Array) {\n            try {\n              _instance.loadFromArray(context.instance, array)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Copy an existing SecretKey and overwrite this instance\n           *\n           * @function\n           * @name SecretKey#copy\n           * @param {SecretKey} key SecretKey to copy\n           * @example\n           * const keyA = keyGenerator.secretKey()\n           * const keyB = seal.SecretKey()\n           * keyB.copy(keyA)\n           * // keyB holds a copy of keyA\n           */\n          copy(key: SecretKey) {\n            try {\n              _instance.copy(key.instance)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Clone and return a new instance of this SecretKey\n           *\n           * @function\n           * @name SecretKey#clone\n           * @returns {SecretKey}\n           * @example\n           * const keyA = keyGenerator.secretKey()\n           * const keyB = keyA.clone()\n           * // keyB holds a copy of keyA\n           */\n          clone(): SecretKey {\n            try {\n              const clonedInstance = _instance.clone()\n              const key = SecretKeyConstructor(library)({\n                Exception,\n                ComprModeType,\n                Vector\n              })()\n              key.inject(clonedInstance)\n              return key\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Move a SecretKey into this one and delete the old reference\n           *\n           * @function\n           * @name SecretKey#move\n           * @param {SecretKey} key SecretKey to move\n           * @example\n           * const keyA = keyGenerator.secretKey()\n           * const keyB = seal.SecretKey()\n           * keyB.move(keyA)\n           * // keyB holds a the instance of keyA.\n           * // keyA no longer holds an instance\n           */\n          move(key: SecretKey) {\n            try {\n              _instance.move(key.instance)\n              // TODO: find optimization\n              // This method results in a copy instead of a real move.\n              // Therefore, we need to delete the old instance.\n              key.delete()\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          }\n        }\n      }\n\nexport const SecretKeyInit = ({\n  loader\n}: LoaderOptions): SecretKeyDependencies => {\n  const library: Library = loader.library\n  return SecretKeyConstructor(library)\n}\n","import { LoaderOptions, Library } from './seal'\n\nexport type SecurityLevelDependencies = {\n  (): SecurityLevelConstructorOptions\n}\n\nexport type SecurityLevelConstructorOptions = {\n  (): SecurityLevel\n}\n\nexport type SecurityLevel = {\n  readonly none: any\n  readonly tc128: any\n  readonly tc192: any\n  readonly tc256: any\n}\n\nconst SecurityLevelConstructor =\n  (library: Library): SecurityLevelDependencies =>\n    (): SecurityLevelConstructorOptions =>\n      (): SecurityLevel => {\n        // Static methods\n        const _none = library.SecLevelType.none\n        const _tc128 = library.SecLevelType.tc128\n        const _tc192 = library.SecLevelType.tc192\n        const _tc256 = library.SecLevelType.tc256\n\n        /**\n         * @implements SecurityLevel\n         */\n\n        /**\n         * @interface SecurityLevel\n         */\n        return {\n          /**\n           * Returns the 'none' security level\n           *\n           * @readonly\n           * @name SecurityLevel.none\n           * @type {SecurityLevel.none}\n           */\n          get none() {\n            /**\n             * @typedef {SecurityLevel.none} SecurityLevel.none\n             */\n            return _none\n          },\n\n          /**\n           * Returns the '128' security level\n           *\n           * @readonly\n           * @name SecurityLevel.tc128\n           * @type {SecurityLevel.tc128}\n           */\n          get tc128() {\n            /**\n             * @typedef {SecurityLevel.tc128} SecurityLevel.tc128\n             */\n            return _tc128\n          },\n\n          /**\n           * Returns the '192' security level\n           *\n           * @readonly\n           * @name SecurityLevel.tc192\n           * @type {SecurityLevel.tc192}\n           */\n          get tc192() {\n            /**\n             * @typedef {SecurityLevel.tc192} SecurityLevel.tc192\n             */\n            return _tc192\n          },\n\n          /**\n           * Returns the '256' security level\n           *\n           * @readonly\n           * @name SecurityLevel.tc256\n           * @type {SecurityLevel.tc256}\n           */\n          get tc256() {\n            /**\n             * @typedef {SecurityLevel.tc256} SecurityLevel.tc256\n             */\n            return _tc256\n          }\n        }\n      }\nexport const SecurityLevelInit = ({\n  loader\n}: LoaderOptions): SecurityLevelDependencies => {\n  const library: Library = loader.library\n  return SecurityLevelConstructor(library)\n}\n","import { LoaderOptions, Instance, Library } from './seal'\nimport { Exception, SealError } from './exception'\nimport { INSTANCE_DELETED, UNSUPPORTED_VECTOR_TYPE } from './constants'\n\nexport type VectorDependencyOptions = {\n  readonly Exception: Exception\n}\n\nexport type VectorDependencies = {\n  ({ Exception }: VectorDependencyOptions): VectorConstructorOptions\n}\n\nexport type VectorConstructorOptions = {\n  (): Vector\n}\n\nexport type Vector = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly from: (array: VectorTypes, type?: StringTypes) => Instance\n  readonly type: string\n  readonly setType: (type: StringTypes) => void\n  readonly size: number\n  readonly getValue: (index: number) => number\n  readonly resize: (size: number, fill: number) => void\n  readonly toArray: () => VectorTypes\n}\n\nexport type VectorTypes =\n  | Uint8Array\n  | Int32Array\n  | Uint32Array\n  | Float64Array\n  | BigInt64Array\n  | BigUint64Array\n\nexport type StringTypes =\n  | 'Uint8Array'\n  | 'Int32Array'\n  | 'Uint32Array'\n  | 'Float64Array'\n  | 'BigInt64Array'\n  | 'BigUint64Array'\n  | 'Modulus'\n\nconst VectorConstructor =\n  (library: Library): VectorDependencies =>\n    ({ Exception }: VectorDependencyOptions): VectorConstructorOptions =>\n      (): Vector => {\n        // Static methods\n        const _vecFromArrayUint8 = library.vecFromArrayUint8\n        const _vecFromArrayUint32 = library.vecFromArrayUint32\n        const _vecFromArrayInt32 = library.vecFromArrayInt32\n        const _vecFromArrayFloat64 = library.vecFromArrayFloat64\n        const _vecFromArrayBigInt64 = library.vecFromArrayBigInt64\n        const _vecFromArrayBigUint64 = library.vecFromArrayBigUint64\n        const _vecFromArrayModulus = library.vecFromArrayModulus\n        const _jsArrayUint8FromVec = library.jsArrayUint8FromVec\n        const _jsArrayUint32FromVec = library.jsArrayUint32FromVec\n        const _jsArrayInt32FromVec = library.jsArrayInt32FromVec\n        const _jsArrayFloat64FromVec = library.jsArrayFloat64FromVec\n        const _jsArrayStringFromVecInt64 = library.jsArrayStringFromVecInt64\n        const _jsArrayStringFromVecUint64 = library.jsArrayStringFromVecUint64\n        const _jsArrayStringFromVecModulus = library.jsArrayStringFromVecModulus\n\n        let _instance: Instance\n        let _type: StringTypes\n        /**\n         * @implements Vector\n         */\n\n        /**\n         * @interface Vector\n         */\n        return {\n          /**\n           * Get the underlying WASM instance\n           *\n           * @private\n           * @readonly\n           * @name Vector#instance\n           * @type {Instance}\n           */\n          get instance() {\n            return _instance\n          },\n\n          /**\n           * Inject this object with a raw WASM instance. No type checking is performed.\n           *\n           * @private\n           * @function\n           * @name Vector#unsafeInject\n           * @param {Instance} instance WASM instance\n           */\n          unsafeInject(instance: Instance) {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n            _instance = instance\n          },\n\n          /**\n           * Delete the underlying WASM instance.\n           *\n           * Should be called before dereferencing this object to prevent the\n           * WASM heap from growing indefinitely.\n           * @function\n           * @name Vector#delete\n           */\n          delete() {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n          },\n\n          /**\n           * Converts a JS TypedArray into a vector\n           *\n           * @function\n           * @name Vector#from\n           * @param {VectorTypes} array The TypedArray to convert\n           * @param {StringTypes} [type] An optional type override - useful for 'Modulus' only\n           */\n          from(array: VectorTypes, type?: StringTypes) {\n            try {\n              _type = type ? type : (array.constructor.name as StringTypes)\n              switch (_type) {\n                case 'Uint8Array':\n                  _instance = _vecFromArrayUint8(array)\n                  break\n                case 'Int32Array':\n                  _instance = _vecFromArrayInt32(array)\n                  break\n                case 'Uint32Array':\n                  _instance = _vecFromArrayUint32(array)\n                  break\n                case 'Float64Array':\n                  _instance = _vecFromArrayFloat64(array)\n                  break\n                case 'BigInt64Array':\n                  _instance = _vecFromArrayBigInt64(array.toString().split(','))\n                  break\n                case 'BigUint64Array':\n                  _instance = _vecFromArrayBigUint64(array.toString().split(','))\n                  break\n                case 'Modulus':\n                  _instance = _vecFromArrayModulus(array.toString().split(','))\n                  break\n                default:\n                  throw new Error(UNSUPPORTED_VECTOR_TYPE)\n              }\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * The Vector type\n           *\n           * @readonly\n           * @name Vector#type\n           */\n          get type(): StringTypes {\n            return _type\n          },\n\n          /**\n           * Set the Vector type\n           *\n           * @function\n           * @name Vector#setType\n           * @param {StringTypes} type the type of the vector\n           */\n          setType(type: StringTypes) {\n            _type = type\n          },\n\n          /**\n           * The vector size\n           *\n           * @readonly\n           * @name Vector#size\n           * @type {number}\n           */\n          get size(): number {\n            return _instance.size()\n          },\n\n          /**\n           * Get a value pointed to by the specified index\n           *\n           * @function\n           * @name Vector#getValue\n           * @param {number} index Index of the Vector\n           * @returns {number} Value of the element in the Vector pointed to by the index\n           */\n          getValue(index: number): number {\n            try {\n              return _instance.get(index)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Resizes a vector to the given size\n           *\n           * @function\n           * @name Vector#resize\n           * @param {number} size number of elements to resize\n           * @param {number} fill Data to fill the vector with\n           */\n          resize(size: number, fill: number) {\n            try {\n              _instance.resize(size, fill)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Copy a vector's data into a Typed Array\n           *\n           * Note: we cannot simply return a view on the underlying ArrayBuffer\n           * because WASM memory can grow and cause all the views to become\n           * neutered. We have to perform a hard copy to get data from WASM heap to JS.\n           *\n           * @function\n           * @name Vector#toArray\n           * @returns {VectorTypes} TypedArray containing values from the Vector\n           */\n          toArray(): VectorTypes {\n            if (!_instance) {\n              throw new Error(INSTANCE_DELETED)\n            }\n            switch (_type) {\n              case 'Uint8Array':\n                return Uint8Array.from(_jsArrayUint8FromVec(_instance))\n              case 'Int32Array':\n                return Int32Array.from(_jsArrayInt32FromVec(_instance))\n              case 'Uint32Array':\n                return Uint32Array.from(_jsArrayUint32FromVec(_instance))\n              case 'Float64Array':\n                return Float64Array.from(_jsArrayFloat64FromVec(_instance))\n              case 'BigInt64Array':\n                return BigInt64Array.from(_jsArrayStringFromVecInt64(_instance))\n              case 'BigUint64Array':\n                return BigUint64Array.from(_jsArrayStringFromVecUint64(_instance))\n              case 'Modulus':\n                return BigUint64Array.from(_jsArrayStringFromVecModulus(_instance))\n              default:\n                throw new Error(UNSUPPORTED_VECTOR_TYPE)\n            }\n          }\n        }\n      }\n\nexport const VectorInit = ({ loader }: LoaderOptions): VectorDependencies => {\n  const library: Library = loader.library\n  return VectorConstructor(library)\n}\n","import { SEALLibrary } from './implementation/seal'\nimport sealLibrary from 'seal_allows_wasm_web'\nimport { Loader, createLoader } from './main/loader'\nimport { SEAL } from './main/seal'\n/**\n * Export a function which loads the proper build\n */\nconst loader = async (): Promise<Loader> => createLoader(sealLibrary)\n\n/**\n * Main export for node-seal\n */\nexport default async (): Promise<SEALLibrary> => SEAL(loader)\n","import { Library } from '../implementation/seal'\n\nexport type Loader = {\n  readonly library: Library\n}\n\n/**\n * Export a default function which instantiates the library\n * @param {Object} bin Emscripten library to initialize\n */\nexport const createLoader = async (\n  bin: () => Promise<Library>\n): Promise<Loader> => ({\n  library: await bin()\n})\n","import { SEALLibrary, SEALConstructor } from '../implementation/seal'\nimport { BatchEncoderInit } from '../implementation/batch-encoder'\nimport { CipherTextInit } from '../implementation/cipher-text'\nimport { CKKSEncoderInit } from '../implementation/ckks-encoder'\nimport { CoeffModulusInit } from '../implementation/coeff-modulus'\nimport { ComprModeTypeInit } from '../implementation/compr-mode-type'\nimport { ContextDataInit } from '../implementation/context-data'\nimport { ContextInit } from '../implementation/context'\nimport { DecryptorInit } from '../implementation/decryptor'\nimport { EncryptionParameterQualifiersInit } from '../implementation/encryption-parameter-qualifiers'\nimport { EncryptionParametersInit } from '../implementation/encryption-parameters'\nimport { EncryptorInit } from '../implementation/encryptor'\nimport { EvaluatorInit } from '../implementation/evaluator'\nimport { ExceptionInit } from '../implementation/exception'\nimport { GaloisKeysInit } from '../implementation/galois-keys'\nimport { KeyGeneratorInit } from '../implementation/key-generator'\nimport { MemoryPoolHandleInit } from '../implementation/memory-pool-handle'\nimport { ModulusInit } from '../implementation/modulus'\nimport { ParmsIdTypeInit } from '../implementation/parms-id-type'\nimport { PlainTextInit } from '../implementation/plain-text'\nimport { PlainModulusInit } from '../implementation/plain-modulus'\nimport { PublicKeyInit } from '../implementation/public-key'\nimport { RelinKeysInit } from '../implementation/relin-keys'\nimport { SchemeTypeInit } from '../implementation/scheme-type'\nimport { SecretKeyInit } from '../implementation/secret-key'\nimport { SecurityLevelInit } from '../implementation/security-level'\nimport { SerializableInit } from '../implementation/serializable'\nimport { VectorInit } from '../implementation/vector'\nimport { Loader } from './loader'\n\n/**\n * Main export for the library\n */\nexport const SEAL = async (\n  Loader: () => Promise<Loader>\n): Promise<SEALLibrary> => {\n  const loader = await Loader()\n  return SEALConstructor({\n    BatchEncoder: BatchEncoderInit({\n      loader\n    }),\n    CipherText: CipherTextInit({\n      loader\n    }),\n    CKKSEncoder: CKKSEncoderInit({\n      loader\n    }),\n    CoeffModulus: CoeffModulusInit({\n      loader\n    }),\n    ComprModeType: ComprModeTypeInit({\n      loader\n    }),\n    ContextData: ContextDataInit({\n      loader\n    }),\n    Context: ContextInit({\n      loader\n    }),\n    Decryptor: DecryptorInit({\n      loader\n    }),\n    EncryptionParameterQualifiers: EncryptionParameterQualifiersInit(),\n    EncryptionParameters: EncryptionParametersInit({\n      loader\n    }),\n    Encryptor: EncryptorInit({\n      loader\n    }),\n    Evaluator: EvaluatorInit({\n      loader\n    }),\n    Exception: ExceptionInit({\n      loader\n    }),\n    GaloisKeys: GaloisKeysInit({\n      loader\n    }),\n    KeyGenerator: KeyGeneratorInit({\n      loader\n    }),\n    MemoryPoolHandle: MemoryPoolHandleInit({\n      loader\n    }),\n    Modulus: ModulusInit({\n      loader\n    }),\n    ParmsIdType: ParmsIdTypeInit({\n      loader\n    }),\n    PlainText: PlainTextInit({\n      loader\n    }),\n    PlainModulus: PlainModulusInit({\n      loader\n    }),\n    PublicKey: PublicKeyInit({\n      loader\n    }),\n    RelinKeys: RelinKeysInit({\n      loader\n    }),\n    SchemeType: SchemeTypeInit({\n      loader\n    }),\n    SecretKey: SecretKeyInit({\n      loader\n    }),\n    SecurityLevel: SecurityLevelInit({\n      loader\n    }),\n    Serializable: SerializableInit(),\n    Vector: VectorInit({\n      loader\n    })\n  })\n}\n","import { Instance } from './seal'\nimport { SecurityLevel } from './security-level'\n\nexport type EncryptionParameterQualifiersDependencies = {\n  (): EncryptionParameterQualifiersConstructorOptions\n}\n\nexport type EncryptionParameterQualifiersConstructorOptions = {\n  (): EncryptionParameterQualifiers\n}\n\nexport type EncryptionParameterQualifiers = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly parametersSet: () => boolean\n  readonly usingFFT: boolean\n  readonly usingNTT: boolean\n  readonly usingBatching: boolean\n  readonly usingFastPlainLift: boolean\n  readonly usingDescendingModulusChain: boolean\n  readonly securityLevel: SecurityLevel\n}\n\nconst EncryptionParameterQualifiersConstructor =\n  (): EncryptionParameterQualifiersDependencies =>\n    (): EncryptionParameterQualifiersConstructorOptions =>\n      (): EncryptionParameterQualifiers => {\n        let _instance: Instance\n        /**\n         * @implements EncryptionParameterQualifiers\n         */\n\n        /**\n         * @interface EncryptionParameterQualifiers\n         */\n        return {\n          /**\n           * Get the underlying WASM instance\n           *\n           * @private\n           * @readonly\n           * @name EncryptionParameterQualifiers#instance\n           * @type {Instance}\n           */\n          get instance() {\n            return _instance\n          },\n\n          /**\n           * Inject this object with a raw WASM instance. No type checking is performed.\n           *\n           * @private\n           * @function\n           * @name EncryptionParameterQualifiers#unsafeInject\n           * @param {Instance} instance WASM instance\n           */\n          unsafeInject(instance: Instance) {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n            _instance = instance\n          },\n\n          /**\n           * Delete the underlying WASM instance.\n           *\n           * Should be called before dereferencing this object to prevent the\n           * WASM heap from growing indefinitely.\n           * @function\n           * @name EncryptionParameterQualifiers#delete\n           */\n          delete() {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n          },\n\n          /**\n           * If the encryption parameters are set in a way that is considered valid by\n           * Microsoft SEAL, the variable parameters_set is set to true.\n           *\n           * @function\n           * @name EncryptionParameterQualifiers#parametersSet\n           * @type {boolean}\n           */\n          parametersSet() {\n            return _instance.parametersSet()\n          },\n\n          /**\n           * Tells whether FFT can be used for polynomial multiplication. If the\n           * polynomial modulus is of the form X^N+1, where N is a power of two, then\n           * FFT can be used for fast multiplication of polynomials modulo the polynomial\n           * modulus. In this case the variable using_fft will be set to true. However,\n           * currently Microsoft SEAL requires this to be the case for the parameters\n           * to be valid. Therefore, parameters_set can only be true if using_fft is\n           * true.\n           *\n           * @readonly\n           * @name EncryptionParameterQualifiers#usingFFT\n           * @type {boolean}\n           */\n          get usingFFT() {\n            return _instance.usingFFT\n          },\n\n          /**\n           * Tells whether NTT can be used for polynomial multiplication. If the primes\n           * in the coefficient modulus are congruent to 1 modulo 2N, where X^N+1 is the\n           * polynomial modulus and N is a power of two, then the number-theoretic\n           * transform (NTT) can be used for fast multiplications of polynomials modulo\n           * the polynomial modulus and coefficient modulus. In this case the variable\n           * using_ntt will be set to true. However, currently Microsoft SEAL requires\n           * this to be the case for the parameters to be valid. Therefore, parameters_set\n           * can only be true if using_ntt is true.\n           *\n           * @readonly\n           * @name EncryptionParameterQualifiers#usingNTT\n           * @type {boolean}\n           */\n          get usingNTT() {\n            return _instance.usingNTT\n          },\n\n          /**\n           * Tells whether batching is supported by the encryption parameters. If the\n           * plaintext modulus is congruent to 1 modulo 2N, where X^N+1 is the polynomial\n           * modulus and N is a power of two, then it is possible to use the BatchEncoder\n           * class to view plaintext elements as 2-by-(N/2) matrices of integers modulo\n           * the plaintext modulus. This is called batching, and allows the user to\n           * operate on the matrix elements (slots) in a SIMD fashion, and rotate the\n           * matrix rows and columns. When the computation is easily vectorizable, using\n           * batching can yield a huge performance boost. If the encryption parameters\n           * support batching, the variable using_batching is set to true.\n           *\n           * @readonly\n           * @name EncryptionParameterQualifiers#usingBatching\n           * @type {boolean}\n           */\n          get usingBatching() {\n            return _instance.usingBatching\n          },\n\n          /**\n           * Tells whether fast plain lift is supported by the encryption parameters.\n           * A certain performance optimization in multiplication of a ciphertext by\n           * a plaintext (Evaluator::multiply_plain) and in transforming a plaintext\n           * element to NTT domain (Evaluator::transform_to_ntt) can be used when the\n           * plaintext modulus is smaller than each prime in the coefficient modulus.\n           * In this case the variable using_fast_plain_lift is set to true.\n           *\n           * @readonly\n           * @name EncryptionParameterQualifiers#usingFastPlainLift\n           * @type {boolean}\n           */\n          get usingFastPlainLift() {\n            return _instance.usingFastPlainLift\n          },\n\n          /**\n           * Tells whether the coefficient modulus consists of a set of primes that\n           * are in decreasing order. If this is true, certain modular reductions in\n           * base conversion can be omitted, improving performance.\n           *\n           * @readonly\n           * @name EncryptionParameterQualifiers#usingDescendingModulusChain\n           * @type {boolean}\n           */\n          get usingDescendingModulusChain() {\n            return _instance.usingDescendingModulusChain\n          },\n\n          /**\n           * Tells whether the encryption parameters are secure based on the standard\n           * parameters from HomomorphicEncryption.org security standard.\n           *\n           * @readonly\n           * @name EncryptionParameterQualifiers#securityLevel\n           * @type {(SecurityLevel.none|SecurityLevel.tc128|SecurityLevel.tc192|SecurityLevel.tc256)}\n           */\n          get securityLevel() {\n            return _instance.securityLevel\n          }\n        }\n      }\n\nexport const EncryptionParameterQualifiersInit =\n  (): EncryptionParameterQualifiersDependencies => {\n    return EncryptionParameterQualifiersConstructor()\n  }\n","import { Instance } from './seal'\nimport { Exception, SealError } from './exception'\nimport { VectorConstructorOptions } from './vector'\nimport { ComprModeType } from './compr-mode-type'\n\nexport type SerializableDependencyOptions = {\n  readonly Exception: Exception\n  readonly Vector: VectorConstructorOptions\n  readonly ComprModeType: ComprModeType\n}\n\nexport type SerializableDependencies = {\n  ({\n    Exception,\n    Vector,\n    ComprModeType\n  }: SerializableDependencyOptions): SerializableConstructorOptions\n}\n\nexport type SerializableConstructorOptions = {\n  (): Serializable\n}\n\nexport type Serializable = {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n}\n\nconst SerializableConstructor =\n  (): SerializableDependencies =>\n    ({\n      Exception,\n      Vector,\n      ComprModeType\n    }: SerializableDependencyOptions): SerializableConstructorOptions =>\n      (): Serializable => {\n        let _instance: Instance\n\n        /**\n         * @implements Serializable\n         */\n\n        /**\n         * @interface Serializable\n         */\n        return {\n          /**\n           * Get the underlying WASM instance\n           *\n           * @private\n           * @readonly\n           * @name Serializable#instance\n           * @type {Instance}\n           */\n          get instance() {\n            return _instance\n          },\n\n          /**\n           * Inject this object with a raw WASM instance. No type checking is performed.\n           *\n           * @private\n           * @function\n           * @name Serializable#unsafeInject\n           * @param {Instance} instance WASM instance\n           */\n          unsafeInject(instance: Instance) {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n            _instance = instance\n          },\n\n          /**\n           * Delete the underlying WASM instance.\n           *\n           * Should be called before dereferencing this object to prevent the\n           * WASM heap from growing indefinitely.\n           * @function\n           * @name Serializable#delete\n           */\n          delete() {\n            if (_instance) {\n              _instance.delete()\n              _instance = undefined\n            }\n          },\n\n          /**\n           * Save to a base64 string\n           *\n           * @function\n           * @name Serializable#save\n           * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n           * @returns {string} Base64 encoded string\n           */\n          save(compression: ComprModeType = ComprModeType.zstd): string {\n            try {\n              return _instance.saveToString(compression)\n            } catch (e) {\n              throw Exception.safe(e as SealError)\n            }\n          },\n\n          /**\n           * Save as a binary Uint8Array\n           *\n           * @function\n           * @name Serializable#saveArray\n           * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n           * @returns {Uint8Array} A byte array containing the Serializable object in binary form\n           */\n          saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n            const tempVect = Vector()\n            const instance = _instance.saveToArray(compression)\n            tempVect.unsafeInject(instance)\n            tempVect.setType('Uint8Array')\n            const tempArr = tempVect.toArray() as Uint8Array\n            tempVect.delete()\n            return tempArr\n          }\n        }\n      }\n\nexport const SerializableInit = (): SerializableDependencies => {\n  return SerializableConstructor()\n}\n"],"names":["_scriptDir","Module","document","currentScript","src","undefined","h","aa","ba","ready","Promise","a","b","ja","ka","ca","Object","assign","da","fa","ha","window","ia","importScripts","t","self","location","href","indexOf","substr","replace","lastIndexOf","XMLHttpRequest","open","responseType","send","Uint8Array","response","c","la","d","onload","status","e","buffer","onerror","x","w","printErr","console","warn","bind","thisProgram","quit","wasmBinary","noExitRuntime","WebAssembly","z","ma","na","oa","TextDecoder","pa","A","subarray","decode","f","String","fromCharCode","l","qa","length","charCodeAt","ra","za","E","C","B","D","F","Aa","Ba","sa","ta","ua","va","wa","xa","ya","Ca","HEAP8","Int8Array","HEAP16","Int16Array","HEAP32","Int32Array","HEAPU8","HEAPU16","Uint16Array","HEAPU32","Uint32Array","HEAPF32","Float32Array","HEAPF64","Float64Array","Da","Ea","Fa","Ga","Ha","Ia","preRun","shift","unshift","G","H","onAbort","RuntimeError","preloadedImages","preloadedAudios","J","Ka","startsWith","La","locateFile","Ma","Oa","$a","Pa","Qa","get","Ra","this","Ta","TypeError","Ua","K","L","M","Va","Wa","Xa","Function","Ya","Error","name","message","stack","toString","prototype","create","constructor","O","P","Za","Q","k","m","R","forEach","Array","hasOwnProperty","push","ab","ea","bb","cb","db","count","value","ga","eb","Ja","fb","gb","hb","pop","ib","jb","lb","mb","FinalizationRegistry","unregister","register","S","nb","arguments","apply","ob","pb","Na","Sa","qb","rb","sb","tb","clone","T","ub","vb","fromWireType","U","toWireType","wb","V","includes","concat","call","xb","yb","zb","Ab","W","X","map","join","Bb","Cb","Db","p","n","r","split","Eb","Fb","Gb","Y","Hb","Z","Ib","Kb","Lb","Mb","Nb","Ob","Vb","Pb","Sb","Tb","Ub","USER","LOGNAME","PATH","PWD","HOME","LANG","navigator","languages","_","Yb","Zb","$b","ac","bc","Date","getTime","getMonth","getFullYear","getDate","setDate","setMonth","setFullYear","cc","g","q","v","I","y","getDay","RegExp","u","substring","Math","ceil","abs","slice","dc","set","ec","fc","BindingError","InternalError","isAliasOf","getPrototypeOf","isDeleted","deleteLater","getInheritedInstanceCount","keys","getLiveInheritedInstances","flushPendingDeletes","setDelayFunction","argPackAdvance","readValueFromPointer","deleteObject","kb","pointerType","UnboundTypeError","count_emval_handles","get_first_emval","gc","atob","charAt","ic","hc","N","Jb","Symbol","enumerable","configurable","defineProperty","splice","className","values","s","o","ArrayBuffer","Uint8ClampedArray","i","Rb","Qb","j","copyWithin","min","max","grow","byteLength","Xb","crypto","getRandomValues","Wb","asm","exports","monitorRunDependencies","instance","fetch","credentials","then","ok","arrayBuffer","catch","resolve","instantiate","instantiateWasm","instantiateStreaming","___wasm_call_ctors","_main","___getTypeName","___embind_register_native_and_builtin_types","jc","_malloc","_free","kc","mc","calledRun","onRuntimeInitialized","nc","onExit","postRun","setStatus","setTimeout","dynCall_viij","dynCall_viiij","dynCall_iiiij","dynCall_vij","dynCall_iij","dynCall_iiij","dynCall_iiiiij","dynCall_iiiiijj","dynCall_iiiiiijj","$","dynCall_viijii","lc","run","preInit","noInitialRun","BatchEncoderInit","loader","library","Exception","MemoryPoolHandle","PlainText","Vector","context","Constructor","BatchEncoder","_instance","safe","unsafeInject","delete","encode","array","plainText","plain","BigInt64Array","stringArray","BigUint64Array","signed","pool","global","tempVect","decodeInt32","setType","tempArr","toArray","decodeUint32","decodeBigInt","from","slotCount","BatchEncoderConstructor","CipherTextConstructor","ComprModeType","ParmsIdType","parmsId","sizeCapacity","Ciphertext","construct","reserve","capacity","resize","size","release","coeffModulusSize","polyModulusDegree","isTransparent","isNttForm","parms","inject","scale","setScale","save","compression","zstd","saveToString","saveArray","saveToArray","load","encoded","loadFromString","loadArray","loadFromArray","copy","cipher","clonedInstance","move","CipherTextInit","CKKSEncoderInit","CKKSEncoder","decodeDouble","CKKSEncoderConstructor","CoeffModulusInit","SecurityLevel","_MaxBitCount","CoeffModulus","MaxBitCount","_BFVDefault","BFVDefault","_CreateFromArray","CreateFromArray","securityLevel","tc128","vectorModulus","Create","bitSizes","CoeffModulusConstructor","ComprModeTypeInit","_none","none","_zlib","zlib","_zstd","ComprModeTypeConstructor","ContextDataConstructor","EncryptionParameters","EncryptionParameterQualifiers","encryptionParameters","qualifiers","encParmQualifiers","totalCoeffModulusBitCount","prevContextData","cxtData","nextContextData","chainIndex","ContextDataInit","ContextInit","ContextData","encryptionParams","expandModChain","SEALContext","toHuman","getContextData","contextData","keyContextData","firstContextData","lastContextData","parametersSet","keyParmsId","firstParmsId","lastParmsId","usingKeyswitching","ContextConstructor","DecryptorInit","secretKey","Decryptor","decrypt","cipherText","invariantNoiseBudget","DecryptorConstructor","EncryptionParametersInit","Modulus","SchemeType","schemeType","setPolyModulusDegree","setCoeffModulus","coeffModulus","setPlainModulus","plainModulus","scheme","smallModulus","BigInt","EncryptionParametersConstructor","EncryptorInit","CipherText","Serializable","publicKey","Encryptor","constructInstance","encrypt","encryptSerializable","temp","encryptSymmetric","encryptSymmetricSerializable","serialized","encryptZero","encryptZeroSerializable","EncryptorConstructor","EvaluatorInit","Evaluator","negate","encrypted","destination","add","sub","multiply","square","relinearize","relinKeys","cipherModSwitchToNext","cipherModSwitchTo","plainModSwitchToNext","plainModSwitchTo","rescaleToNext","rescaleTo","exponentiate","exponent","addPlain","subPlain","multiplyPlain","plainTransformToNtt","destinationNtt","cipherTransformToNtt","cipherTransformFromNtt","encryptedNtt","applyGalois","galoisElt","galoisKeys","rotateRows","steps","rotateColumns","rotateVector","complexConjugate","sumElements","newDest","dotProduct","dotProductPlain","EvaluatorConstructor","ExceptionInit","_getException","getException","error","ExceptionConstructor","GaloisKeysConstructor","GaloisKeys","getIndex","hasKey","key","GaloisKeysInit","KeyGeneratorInit","PublicKey","SecretKey","RelinKeys","KeyGenerator","createPublicKey","createPublicKeySerializable","createRelinKeys","createRelinKeysSerializable","createGaloisKeys","createGaloisKeysSerializable","KeyGeneratorConstructor","MemoryPoolHandleInit","_global","MemoryPoolHandleGlobal","_threadLocal","MemoryPoolHandleThreadLocal","threadLocal","MemoryPoolHandleConstructor","ModulusInit","inst","setValue","createModulus","bitCount","isZero","isPrime","ModulusConstructor","ParmsIdTypeInit","ParmsIdTypeConstructor","PlainTextConstructor","coeffCount","Plaintext","shrinkToFit","setZero","significantCoeffCount","nonzeroCoeffCount","toPolynomial","PlainTextInit","PlainModulusInit","_Batching","PlainModulus","Batching","_BatchingVector","BatchingVector","bitSize","smallMod","polyPlainModulusDegree","vectBitSizes","vect","PlainModulusConstructor","PublicKeyConstructor","PublicKeyInit","RelinKeysConstructor","keyPower","RelinKeysInit","SchemeTypeInit","_bfv","bfv","_ckks","ckks","_bgv","bgv","SchemeTypeConstructor","SecretKeyConstructor","SecretKeyInit","SecurityLevelInit","SecLevelType","_tc128","_tc192","tc192","_tc256","tc256","SecurityLevelConstructor","VectorInit","_vecFromArrayUint8","vecFromArrayUint8","_vecFromArrayUint32","vecFromArrayUint32","_vecFromArrayInt32","vecFromArrayInt32","_vecFromArrayFloat64","vecFromArrayFloat64","_vecFromArrayBigInt64","vecFromArrayBigInt64","_vecFromArrayBigUint64","vecFromArrayBigUint64","_vecFromArrayModulus","vecFromArrayModulus","_jsArrayUint8FromVec","jsArrayUint8FromVec","_jsArrayUint32FromVec","jsArrayUint32FromVec","_jsArrayInt32FromVec","jsArrayInt32FromVec","_jsArrayFloat64FromVec","jsArrayFloat64FromVec","_jsArrayStringFromVecInt64","jsArrayStringFromVecInt64","_jsArrayStringFromVecUint64","jsArrayStringFromVecUint64","_jsArrayStringFromVecModulus","jsArrayStringFromVecModulus","_type","type","getValue","index","fill","VectorConstructor","async","bin","createLoader","sealLibrary","Loader","Context","exception","comprModeType","memoryPoolHandle","vector","modulus","serializable","parmsIdType","batchEncoder","ckksEncoder","encryptionParameterQualifiers","decryptor","encryptor","evaluator","Version","SEALConstructor","usingFFT","usingNTT","usingBatching","usingFastPlainLift","usingDescendingModulusChain","SEAL"],"mappings":"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"}